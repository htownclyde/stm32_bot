
stm32f411_bot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08006de8  08006de8  00016de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eb0  08006eb0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006eb0  08006eb0  00016eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006eb8  08006eb8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eb8  08006eb8  00016eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ebc  08006ebc  00016ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b48  20000010  08006ed0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b58  08006ed0  00024b58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001df00  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003946  00000000  00000000  0003df40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f0  00000000  00000000  00041888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018c0  00000000  00000000  00043278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a33  00000000  00000000  00044b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cc88  00000000  00000000  0004856b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7922  00000000  00000000  000651f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010cb15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f94  00000000  00000000  0010cb68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006dd0 	.word	0x08006dd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006dd0 	.word	0x08006dd0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fcc8 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f83c 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f9c8 	bl	8000884 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004f4:	f000 f99c 	bl	8000830 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80004f8:	f000 f894 	bl	8000624 <MX_ADC1_Init>
  MX_I2C1_Init();
 80004fc:	f000 f8e4 	bl	80006c8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000500:	f000 f910 	bl	8000724 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000504:	f000 f944 	bl	8000790 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000508:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <main+0x60>)
 800050a:	2100      	movs	r1, #0
 800050c:	480e      	ldr	r0, [pc, #56]	; (8000548 <main+0x64>)
 800050e:	f003 ff1b 	bl	8004348 <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a0d      	ldr	r2, [pc, #52]	; (800054c <main+0x68>)
 8000516:	6013      	str	r3, [r2, #0]
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8000518:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <main+0x6c>)
 800051a:	2100      	movs	r1, #0
 800051c:	480d      	ldr	r0, [pc, #52]	; (8000554 <main+0x70>)
 800051e:	f003 ff13 	bl	8004348 <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a0c      	ldr	r2, [pc, #48]	; (8000558 <main+0x74>)
 8000526:	6013      	str	r3, [r2, #0]
  accelTaskHandle = osThreadNew(StartAccelTask, NULL, &accelTask_attributes);
 8000528:	4a0c      	ldr	r2, [pc, #48]	; (800055c <main+0x78>)
 800052a:	2100      	movs	r1, #0
 800052c:	480c      	ldr	r0, [pc, #48]	; (8000560 <main+0x7c>)
 800052e:	f003 ff0b 	bl	8004348 <osThreadNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <main+0x80>)
 8000536:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000538:	f003 febc 	bl	80042b4 <osKernelInitialize>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 800053c:	f003 fede 	bl	80042fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000540:	e7fe      	b.n	8000540 <main+0x5c>
 8000542:	bf00      	nop
 8000544:	08006e2c 	.word	0x08006e2c
 8000548:	08000925 	.word	0x08000925
 800054c:	200001ac 	.word	0x200001ac
 8000550:	08006e50 	.word	0x08006e50
 8000554:	08000935 	.word	0x08000935
 8000558:	200001b0 	.word	0x200001b0
 800055c:	08006e74 	.word	0x08006e74
 8000560:	08000975 	.word	0x08000975
 8000564:	200001b4 	.word	0x200001b4

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f006 fc22 	bl	8006dc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b22      	ldr	r3, [pc, #136]	; (800061c <SystemClock_Config+0xb4>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a21      	ldr	r2, [pc, #132]	; (800061c <SystemClock_Config+0xb4>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <SystemClock_Config+0xb4>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <SystemClock_Config+0xb8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a1b      	ldr	r2, [pc, #108]	; (8000620 <SystemClock_Config+0xb8>)
 80005b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b19      	ldr	r3, [pc, #100]	; (8000620 <SystemClock_Config+0xb8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c4:	2302      	movs	r3, #2
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	2310      	movs	r3, #16
 80005ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d0:	2300      	movs	r3, #0
 80005d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 0320 	add.w	r3, r7, #32
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 fdbb 	bl	8002154 <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005e4:	f000 f9f0 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f002 f81e 	bl	8002644 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800060e:	f000 f9db 	bl	80009c8 <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3750      	adds	r7, #80	; 0x50
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800
 8000620:	40007000 	.word	0x40007000

08000624 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800062a:	463b      	mov	r3, r7
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <MX_ADC1_Init+0x98>)
 8000638:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <MX_ADC1_Init+0x9c>)
 800063a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <MX_ADC1_Init+0x98>)
 800063e:	2200      	movs	r2, #0
 8000640:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000642:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <MX_ADC1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <MX_ADC1_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800064e:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <MX_ADC1_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <MX_ADC1_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800065c:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_ADC1_Init+0x98>)
 800065e:	2200      	movs	r2, #0
 8000660:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000662:	4b16      	ldr	r3, [pc, #88]	; (80006bc <MX_ADC1_Init+0x98>)
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <MX_ADC1_Init+0xa0>)
 8000666:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000668:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_ADC1_Init+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800066e:	4b13      	ldr	r3, [pc, #76]	; (80006bc <MX_ADC1_Init+0x98>)
 8000670:	2201      	movs	r2, #1
 8000672:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_ADC1_Init+0x98>)
 8000676:	2200      	movs	r2, #0
 8000678:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_ADC1_Init+0x98>)
 800067e:	2201      	movs	r2, #1
 8000680:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000682:	480e      	ldr	r0, [pc, #56]	; (80006bc <MX_ADC1_Init+0x98>)
 8000684:	f000 fc3c 	bl	8000f00 <HAL_ADC_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800068e:	f000 f99b 	bl	80009c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000692:	2301      	movs	r3, #1
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000696:	2301      	movs	r3, #1
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069e:	463b      	mov	r3, r7
 80006a0:	4619      	mov	r1, r3
 80006a2:	4806      	ldr	r0, [pc, #24]	; (80006bc <MX_ADC1_Init+0x98>)
 80006a4:	f000 fdb0 	bl	8001208 <HAL_ADC_ConfigChannel>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006ae:	f000 f98b 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	2000002c 	.word	0x2000002c
 80006c0:	40012000 	.word	0x40012000
 80006c4:	0f000001 	.word	0x0f000001

080006c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_I2C1_Init+0x50>)
 80006ce:	4a13      	ldr	r2, [pc, #76]	; (800071c <MX_I2C1_Init+0x54>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_I2C1_Init+0x50>)
 80006d4:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_I2C1_Init+0x58>)
 80006d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_I2C1_Init+0x50>)
 80006e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_I2C1_Init+0x50>)
 8000706:	f001 fbe1 	bl	8001ecc <HAL_I2C_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000710:	f000 f95a 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000074 	.word	0x20000074
 800071c:	40005400 	.word	0x40005400
 8000720:	000186a0 	.word	0x000186a0

08000724 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <MX_SPI1_Init+0x64>)
 800072a:	4a18      	ldr	r2, [pc, #96]	; (800078c <MX_SPI1_Init+0x68>)
 800072c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_SPI1_Init+0x64>)
 8000730:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000734:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_SPI1_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_SPI1_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_SPI1_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_SPI1_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_SPI1_Init+0x64>)
 8000750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000754:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_SPI1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <MX_SPI1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_SPI1_Init+0x64>)
 8000770:	220a      	movs	r2, #10
 8000772:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_SPI1_Init+0x64>)
 8000776:	f002 f977 	bl	8002a68 <HAL_SPI_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000780:	f000 f922 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200000c8 	.word	0x200000c8
 800078c:	40013000 	.word	0x40013000

08000790 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a4:	463b      	mov	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007ac:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <MX_TIM1_Init+0x98>)
 80007ae:	4a1f      	ldr	r2, [pc, #124]	; (800082c <MX_TIM1_Init+0x9c>)
 80007b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007b2:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <MX_TIM1_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_TIM1_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_TIM1_Init+0x98>)
 80007c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_TIM1_Init+0x98>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_TIM1_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_TIM1_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d8:	4813      	ldr	r0, [pc, #76]	; (8000828 <MX_TIM1_Init+0x98>)
 80007da:	f002 f9ce 	bl	8002b7a <HAL_TIM_Base_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80007e4:	f000 f8f0 	bl	80009c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	4619      	mov	r1, r3
 80007f4:	480c      	ldr	r0, [pc, #48]	; (8000828 <MX_TIM1_Init+0x98>)
 80007f6:	f002 fb79 	bl	8002eec <HAL_TIM_ConfigClockSource>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000800:	f000 f8e2 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000804:	2300      	movs	r3, #0
 8000806:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800080c:	463b      	mov	r3, r7
 800080e:	4619      	mov	r1, r3
 8000810:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_TIM1_Init+0x98>)
 8000812:	f002 fd75 	bl	8003300 <HAL_TIMEx_MasterConfigSynchronization>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800081c:	f000 f8d4 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000120 	.word	0x20000120
 800082c:	40010000 	.word	0x40010000

08000830 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <MX_USART1_UART_Init+0x50>)
 8000838:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_USART1_UART_Init+0x4c>)
 800083c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000840:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART1_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000856:	2204      	movs	r2, #4
 8000858:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART1_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000868:	f002 fdcc 	bl	8003404 <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000872:	f000 f8a9 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000168 	.word	0x20000168
 8000880:	40011000 	.word	0x40011000

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_GPIO_Init+0x94>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a1d      	ldr	r2, [pc, #116]	; (8000918 <MX_GPIO_Init+0x94>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <MX_GPIO_Init+0x94>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_GPIO_Init+0x94>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a16      	ldr	r2, [pc, #88]	; (8000918 <MX_GPIO_Init+0x94>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_GPIO_Init+0x94>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led_r_Pin|led_g_Pin|led_b_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2107      	movs	r1, #7
 80008d6:	4811      	ldr	r0, [pc, #68]	; (800091c <MX_GPIO_Init+0x98>)
 80008d8:	f001 fac4 	bl	8001e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : xtilt_pwm_in_Pin ytilt_pwm_in_Pin */
  GPIO_InitStruct.Pin = xtilt_pwm_in_Pin|ytilt_pwm_in_Pin;
 80008dc:	2318      	movs	r3, #24
 80008de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	4619      	mov	r1, r3
 80008ee:	480c      	ldr	r0, [pc, #48]	; (8000920 <MX_GPIO_Init+0x9c>)
 80008f0:	f001 f934 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : led_r_Pin led_g_Pin led_b_Pin */
  GPIO_InitStruct.Pin = led_r_Pin|led_g_Pin|led_b_Pin;
 80008f4:	2307      	movs	r3, #7
 80008f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	4619      	mov	r1, r3
 800090a:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_GPIO_Init+0x98>)
 800090c:	f001 f926 	bl	8001b5c <HAL_GPIO_Init>

}
 8000910:	bf00      	nop
 8000912:	3720      	adds	r7, #32
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40023800 	.word	0x40023800
 800091c:	40020400 	.word	0x40020400
 8000920:	40020000 	.word	0x40020000

08000924 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800092c:	2001      	movs	r0, #1
 800092e:	f003 fd9d 	bl	800446c <osDelay>
 8000932:	e7fb      	b.n	800092c <StartDefaultTask+0x8>

08000934 <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(100);
 800093c:	2064      	movs	r0, #100	; 0x64
 800093e:	f003 fd95 	bl	800446c <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, led_r_Pin);
 8000942:	2101      	movs	r1, #1
 8000944:	480a      	ldr	r0, [pc, #40]	; (8000970 <StartDisplayTask+0x3c>)
 8000946:	f001 faa6 	bl	8001e96 <HAL_GPIO_TogglePin>
	  osDelay(100);
 800094a:	2064      	movs	r0, #100	; 0x64
 800094c:	f003 fd8e 	bl	800446c <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, led_g_Pin);
 8000950:	2102      	movs	r1, #2
 8000952:	4807      	ldr	r0, [pc, #28]	; (8000970 <StartDisplayTask+0x3c>)
 8000954:	f001 fa9f 	bl	8001e96 <HAL_GPIO_TogglePin>
	  osDelay(100);
 8000958:	2064      	movs	r0, #100	; 0x64
 800095a:	f003 fd87 	bl	800446c <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, led_b_Pin);
 800095e:	2104      	movs	r1, #4
 8000960:	4803      	ldr	r0, [pc, #12]	; (8000970 <StartDisplayTask+0x3c>)
 8000962:	f001 fa98 	bl	8001e96 <HAL_GPIO_TogglePin>
	  osDelay(100);
 8000966:	2064      	movs	r0, #100	; 0x64
 8000968:	f003 fd80 	bl	800446c <osDelay>
	  osDelay(100);
 800096c:	e7e6      	b.n	800093c <StartDisplayTask+0x8>
 800096e:	bf00      	nop
 8000970:	40020400 	.word	0x40020400

08000974 <StartAccelTask>:
* @retval None
*/
/* USER CODE END Header_StartAccelTask */
volatile uint16_t tempRead[2] = {0};
void StartAccelTask(void *argument)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartAccelTask */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 800097c:	2001      	movs	r0, #1
 800097e:	f003 fd75 	bl	800446c <osDelay>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) tempRead, 2);
 8000982:	2202      	movs	r2, #2
 8000984:	4905      	ldr	r1, [pc, #20]	; (800099c <StartAccelTask+0x28>)
 8000986:	4806      	ldr	r0, [pc, #24]	; (80009a0 <StartAccelTask+0x2c>)
 8000988:	f000 fb30 	bl	8000fec <HAL_ADC_Start_DMA>
		osDelay(500);
 800098c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000990:	f003 fd6c 	bl	800446c <osDelay>
		HAL_ADC_Stop(&hadc1);
 8000994:	4802      	ldr	r0, [pc, #8]	; (80009a0 <StartAccelTask+0x2c>)
 8000996:	f000 faf6 	bl	8000f86 <HAL_ADC_Stop>
		osDelay(1);
 800099a:	e7ef      	b.n	800097c <StartAccelTask+0x8>
 800099c:	200001b8 	.word	0x200001b8
 80009a0:	2000002c 	.word	0x2000002c

080009a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d101      	bne.n	80009ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009b6:	f000 fa83 	bl	8000ec0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40014800 	.word	0x40014800

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <Error_Handler+0x8>
	...

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_MspInit+0x54>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	4a11      	ldr	r2, [pc, #68]	; (8000a28 <HAL_MspInit+0x54>)
 80009e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <HAL_MspInit+0x54>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <HAL_MspInit+0x54>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <HAL_MspInit+0x54>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	6413      	str	r3, [r2, #64]	; 0x40
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <HAL_MspInit+0x54>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	210f      	movs	r1, #15
 8000a16:	f06f 0001 	mvn.w	r0, #1
 8000a1a:	f000 ff5d 	bl	80018d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <HAL_ADC_MspInit+0x7c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d127      	bne.n	8000a9e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <HAL_ADC_MspInit+0x80>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	4a15      	ldr	r2, [pc, #84]	; (8000aac <HAL_ADC_MspInit+0x80>)
 8000a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <HAL_ADC_MspInit+0x80>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_ADC_MspInit+0x80>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <HAL_ADC_MspInit+0x80>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <HAL_ADC_MspInit+0x80>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = temp_adc_in_Pin;
 8000a86:	2302      	movs	r3, #2
 8000a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(temp_adc_in_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <HAL_ADC_MspInit+0x84>)
 8000a9a:	f001 f85f 	bl	8001b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3728      	adds	r7, #40	; 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40012000 	.word	0x40012000
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020000 	.word	0x40020000

08000ab4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a19      	ldr	r2, [pc, #100]	; (8000b38 <HAL_I2C_MspInit+0x84>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d12b      	bne.n	8000b2e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <HAL_I2C_MspInit+0x88>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <HAL_I2C_MspInit+0x88>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_I2C_MspInit+0x88>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000af2:	23c0      	movs	r3, #192	; 0xc0
 8000af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af6:	2312      	movs	r3, #18
 8000af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b02:	2304      	movs	r3, #4
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <HAL_I2C_MspInit+0x8c>)
 8000b0e:	f001 f825 	bl	8001b5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_I2C_MspInit+0x88>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_I2C_MspInit+0x88>)
 8000b1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_I2C_MspInit+0x88>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	; 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40005400 	.word	0x40005400
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020400 	.word	0x40020400

08000b44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a19      	ldr	r2, [pc, #100]	; (8000bc8 <HAL_SPI_MspInit+0x84>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d12b      	bne.n	8000bbe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a17      	ldr	r2, [pc, #92]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b9e:	23e0      	movs	r3, #224	; 0xe0
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bae:	2305      	movs	r3, #5
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <HAL_SPI_MspInit+0x8c>)
 8000bba:	f000 ffcf 	bl	8001b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	; 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40013000 	.word	0x40013000
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <HAL_TIM_Base_MspInit+0x48>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d115      	bne.n	8000c12 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <HAL_TIM_Base_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	4a0c      	ldr	r2, [pc, #48]	; (8000c20 <HAL_TIM_Base_MspInit+0x4c>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_TIM_Base_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2105      	movs	r1, #5
 8000c06:	201a      	movs	r0, #26
 8000c08:	f000 fe66 	bl	80018d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000c0c:	201a      	movs	r0, #26
 8000c0e:	f000 fe7f 	bl	8001910 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40010000 	.word	0x40010000
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a1d      	ldr	r2, [pc, #116]	; (8000cb8 <HAL_UART_MspInit+0x94>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d134      	bne.n	8000cb0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <HAL_UART_MspInit+0x98>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	4a1b      	ldr	r2, [pc, #108]	; (8000cbc <HAL_UART_MspInit+0x98>)
 8000c50:	f043 0310 	orr.w	r3, r3, #16
 8000c54:	6453      	str	r3, [r2, #68]	; 0x44
 8000c56:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <HAL_UART_MspInit+0x98>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f003 0310 	and.w	r3, r3, #16
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <HAL_UART_MspInit+0x98>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <HAL_UART_MspInit+0x98>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_UART_MspInit+0x98>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c90:	2307      	movs	r3, #7
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <HAL_UART_MspInit+0x9c>)
 8000c9c:	f000 ff5e 	bl	8001b5c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2105      	movs	r1, #5
 8000ca4:	2025      	movs	r0, #37	; 0x25
 8000ca6:	f000 fe17 	bl	80018d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000caa:	2025      	movs	r0, #37	; 0x25
 8000cac:	f000 fe30 	bl	8001910 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cb0:	bf00      	nop
 8000cb2:	3728      	adds	r7, #40	; 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40011000 	.word	0x40011000
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000

08000cc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08c      	sub	sp, #48	; 0x30
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <HAL_InitTick+0xd0>)
 8000cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cdc:	4a2d      	ldr	r2, [pc, #180]	; (8000d94 <HAL_InitTick+0xd0>)
 8000cde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce4:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <HAL_InitTick+0xd0>)
 8000ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cf0:	f107 020c 	add.w	r2, r7, #12
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f001 fe82 	bl	8002a04 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d00:	f001 fe6c 	bl	80029dc <HAL_RCC_GetPCLK2Freq>
 8000d04:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d08:	4a23      	ldr	r2, [pc, #140]	; (8000d98 <HAL_InitTick+0xd4>)
 8000d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0e:	0c9b      	lsrs	r3, r3, #18
 8000d10:	3b01      	subs	r3, #1
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000d14:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <HAL_InitTick+0xd8>)
 8000d16:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <HAL_InitTick+0xdc>)
 8000d18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000d1a:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <HAL_InitTick+0xd8>)
 8000d1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d20:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000d22:	4a1e      	ldr	r2, [pc, #120]	; (8000d9c <HAL_InitTick+0xd8>)
 8000d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d26:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000d28:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <HAL_InitTick+0xd8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2e:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <HAL_InitTick+0xd8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d34:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <HAL_InitTick+0xd8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000d3a:	4818      	ldr	r0, [pc, #96]	; (8000d9c <HAL_InitTick+0xd8>)
 8000d3c:	f001 ff1d 	bl	8002b7a <HAL_TIM_Base_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d11b      	bne.n	8000d86 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000d4e:	4813      	ldr	r0, [pc, #76]	; (8000d9c <HAL_InitTick+0xd8>)
 8000d50:	f001 ff62 	bl	8002c18 <HAL_TIM_Base_Start_IT>
 8000d54:	4603      	mov	r3, r0
 8000d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d111      	bne.n	8000d86 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000d62:	201a      	movs	r0, #26
 8000d64:	f000 fdd4 	bl	8001910 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b0f      	cmp	r3, #15
 8000d6c:	d808      	bhi.n	8000d80 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	201a      	movs	r0, #26
 8000d74:	f000 fdb0 	bl	80018d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d78:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <HAL_InitTick+0xe0>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	e002      	b.n	8000d86 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3730      	adds	r7, #48	; 0x30
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800
 8000d98:	431bde83 	.word	0x431bde83
 8000d9c:	200001bc 	.word	0x200001bc
 8000da0:	40014800 	.word	0x40014800
 8000da4:	20000004 	.word	0x20000004

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <NMI_Handler+0x4>

08000dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <MemManage_Handler+0x4>

08000dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dd8:	4803      	ldr	r0, [pc, #12]	; (8000de8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8000dda:	f001 ff7f 	bl	8002cdc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8000dde:	4803      	ldr	r0, [pc, #12]	; (8000dec <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8000de0:	f001 ff7c 	bl	8002cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000120 	.word	0x20000120
 8000dec:	200001bc 	.word	0x200001bc

08000df0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <USART1_IRQHandler+0x10>)
 8000df6:	f002 fb53 	bl	80034a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000168 	.word	0x20000168

08000e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <SystemInit+0x20>)
 8000e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <SystemInit+0x20>)
 8000e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e2c:	480d      	ldr	r0, [pc, #52]	; (8000e64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e2e:	490e      	ldr	r1, [pc, #56]	; (8000e68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e30:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e34:	e002      	b.n	8000e3c <LoopCopyDataInit>

08000e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3a:	3304      	adds	r3, #4

08000e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e40:	d3f9      	bcc.n	8000e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e44:	4c0b      	ldr	r4, [pc, #44]	; (8000e74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e48:	e001      	b.n	8000e4e <LoopFillZerobss>

08000e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e4c:	3204      	adds	r2, #4

08000e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e50:	d3fb      	bcc.n	8000e4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e52:	f7ff ffd7 	bl	8000e04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e56:	f005 ff81 	bl	8006d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5a:	f7ff fb43 	bl	80004e4 <main>
  bx  lr    
 8000e5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e6c:	08006ec0 	.word	0x08006ec0
  ldr r2, =_sbss
 8000e70:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e74:	20004b58 	.word	0x20004b58

08000e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <HAL_Init+0x40>)
 8000e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <HAL_Init+0x40>)
 8000e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <HAL_Init+0x40>)
 8000e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 fd0c 	bl	80018c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eaa:	2005      	movs	r0, #5
 8000eac:	f7ff ff0a 	bl	8000cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb0:	f7ff fd90 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023c00 	.word	0x40023c00

08000ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_IncTick+0x20>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000204 	.word	0x20000204

08000ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <HAL_GetTick+0x14>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000204 	.word	0x20000204

08000f00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e033      	b.n	8000f7e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d109      	bne.n	8000f32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff fd84 	bl	8000a2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f003 0310 	and.w	r3, r3, #16
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d118      	bne.n	8000f70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f46:	f023 0302 	bic.w	r3, r3, #2
 8000f4a:	f043 0202 	orr.w	r2, r3, #2
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 fa8a 	bl	800146c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	f023 0303 	bic.w	r3, r3, #3
 8000f66:	f043 0201 	orr.w	r2, r3, #1
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f6e:	e001      	b.n	8000f74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d101      	bne.n	8000f9c <HAL_ADC_Stop+0x16>
 8000f98:	2302      	movs	r3, #2
 8000f9a:	e021      	b.n	8000fe0 <HAL_ADC_Stop+0x5a>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 0201 	bic.w	r2, r2, #1
 8000fb2:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d109      	bne.n	8000fd6 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fca:	f023 0301 	bic.w	r3, r3, #1
 8000fce:	f043 0201 	orr.w	r2, r3, #1
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001002:	2b01      	cmp	r3, #1
 8001004:	d101      	bne.n	800100a <HAL_ADC_Start_DMA+0x1e>
 8001006:	2302      	movs	r3, #2
 8001008:	e0ce      	b.n	80011a8 <HAL_ADC_Start_DMA+0x1bc>
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2201      	movs	r2, #1
 800100e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	2b01      	cmp	r3, #1
 800101e:	d018      	beq.n	8001052 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0201 	orr.w	r2, r2, #1
 800102e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001030:	4b5f      	ldr	r3, [pc, #380]	; (80011b0 <HAL_ADC_Start_DMA+0x1c4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a5f      	ldr	r2, [pc, #380]	; (80011b4 <HAL_ADC_Start_DMA+0x1c8>)
 8001036:	fba2 2303 	umull	r2, r3, r2, r3
 800103a:	0c9a      	lsrs	r2, r3, #18
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001044:	e002      	b.n	800104c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	3b01      	subs	r3, #1
 800104a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f9      	bne.n	8001046 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001060:	d107      	bne.n	8001072 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001070:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	2b01      	cmp	r3, #1
 800107e:	f040 8086 	bne.w	800118e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800108a:	f023 0301 	bic.w	r3, r3, #1
 800108e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d007      	beq.n	80010b4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010c0:	d106      	bne.n	80010d0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f023 0206 	bic.w	r2, r3, #6
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	645a      	str	r2, [r3, #68]	; 0x44
 80010ce:	e002      	b.n	80010d6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2200      	movs	r2, #0
 80010d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010de:	4b36      	ldr	r3, [pc, #216]	; (80011b8 <HAL_ADC_Start_DMA+0x1cc>)
 80010e0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010e6:	4a35      	ldr	r2, [pc, #212]	; (80011bc <HAL_ADC_Start_DMA+0x1d0>)
 80010e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ee:	4a34      	ldr	r2, [pc, #208]	; (80011c0 <HAL_ADC_Start_DMA+0x1d4>)
 80010f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f6:	4a33      	ldr	r2, [pc, #204]	; (80011c4 <HAL_ADC_Start_DMA+0x1d8>)
 80010f8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001102:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001112:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001122:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	334c      	adds	r3, #76	; 0x4c
 800112e:	4619      	mov	r1, r3
 8001130:	68ba      	ldr	r2, [r7, #8]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f000 fbfa 	bl	800192c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 031f 	and.w	r3, r3, #31
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10f      	bne.n	8001164 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d129      	bne.n	80011a6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	e020      	b.n	80011a6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <HAL_ADC_Start_DMA+0x1dc>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d11b      	bne.n	80011a6 <HAL_ADC_Start_DMA+0x1ba>
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d114      	bne.n	80011a6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	e00b      	b.n	80011a6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f043 0210 	orr.w	r2, r3, #16
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f043 0201 	orr.w	r2, r3, #1
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000000 	.word	0x20000000
 80011b4:	431bde83 	.word	0x431bde83
 80011b8:	40012300 	.word	0x40012300
 80011bc:	08001665 	.word	0x08001665
 80011c0:	0800171f 	.word	0x0800171f
 80011c4:	0800173b 	.word	0x0800173b
 80011c8:	40012000 	.word	0x40012000

080011cc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800121c:	2b01      	cmp	r3, #1
 800121e:	d101      	bne.n	8001224 <HAL_ADC_ConfigChannel+0x1c>
 8001220:	2302      	movs	r3, #2
 8001222:	e113      	b.n	800144c <HAL_ADC_ConfigChannel+0x244>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2201      	movs	r2, #1
 8001228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b09      	cmp	r3, #9
 8001232:	d925      	bls.n	8001280 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68d9      	ldr	r1, [r3, #12]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	b29b      	uxth	r3, r3
 8001240:	461a      	mov	r2, r3
 8001242:	4613      	mov	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4413      	add	r3, r2
 8001248:	3b1e      	subs	r3, #30
 800124a:	2207      	movs	r2, #7
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43da      	mvns	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	400a      	ands	r2, r1
 8001258:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68d9      	ldr	r1, [r3, #12]
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	b29b      	uxth	r3, r3
 800126a:	4618      	mov	r0, r3
 800126c:	4603      	mov	r3, r0
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4403      	add	r3, r0
 8001272:	3b1e      	subs	r3, #30
 8001274:	409a      	lsls	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	430a      	orrs	r2, r1
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	e022      	b.n	80012c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6919      	ldr	r1, [r3, #16]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	b29b      	uxth	r3, r3
 800128c:	461a      	mov	r2, r3
 800128e:	4613      	mov	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	2207      	movs	r2, #7
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	400a      	ands	r2, r1
 80012a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6919      	ldr	r1, [r3, #16]
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	4618      	mov	r0, r3
 80012b6:	4603      	mov	r3, r0
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4403      	add	r3, r0
 80012bc:	409a      	lsls	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	430a      	orrs	r2, r1
 80012c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d824      	bhi.n	8001318 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	4613      	mov	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	3b05      	subs	r3, #5
 80012e0:	221f      	movs	r2, #31
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43da      	mvns	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	400a      	ands	r2, r1
 80012ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	3b05      	subs	r3, #5
 800130a:	fa00 f203 	lsl.w	r2, r0, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	430a      	orrs	r2, r1
 8001314:	635a      	str	r2, [r3, #52]	; 0x34
 8001316:	e04c      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b0c      	cmp	r3, #12
 800131e:	d824      	bhi.n	800136a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	3b23      	subs	r3, #35	; 0x23
 8001332:	221f      	movs	r2, #31
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43da      	mvns	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	400a      	ands	r2, r1
 8001340:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	b29b      	uxth	r3, r3
 800134e:	4618      	mov	r0, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	3b23      	subs	r3, #35	; 0x23
 800135c:	fa00 f203 	lsl.w	r2, r0, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	430a      	orrs	r2, r1
 8001366:	631a      	str	r2, [r3, #48]	; 0x30
 8001368:	e023      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	3b41      	subs	r3, #65	; 0x41
 800137c:	221f      	movs	r2, #31
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	400a      	ands	r2, r1
 800138a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	b29b      	uxth	r3, r3
 8001398:	4618      	mov	r0, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	3b41      	subs	r3, #65	; 0x41
 80013a6:	fa00 f203 	lsl.w	r2, r0, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013b2:	4b29      	ldr	r3, [pc, #164]	; (8001458 <HAL_ADC_ConfigChannel+0x250>)
 80013b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a28      	ldr	r2, [pc, #160]	; (800145c <HAL_ADC_ConfigChannel+0x254>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d10f      	bne.n	80013e0 <HAL_ADC_ConfigChannel+0x1d8>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b12      	cmp	r3, #18
 80013c6:	d10b      	bne.n	80013e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a1d      	ldr	r2, [pc, #116]	; (800145c <HAL_ADC_ConfigChannel+0x254>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d12b      	bne.n	8001442 <HAL_ADC_ConfigChannel+0x23a>
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a1c      	ldr	r2, [pc, #112]	; (8001460 <HAL_ADC_ConfigChannel+0x258>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d003      	beq.n	80013fc <HAL_ADC_ConfigChannel+0x1f4>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b11      	cmp	r3, #17
 80013fa:	d122      	bne.n	8001442 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a11      	ldr	r2, [pc, #68]	; (8001460 <HAL_ADC_ConfigChannel+0x258>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d111      	bne.n	8001442 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <HAL_ADC_ConfigChannel+0x25c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a11      	ldr	r2, [pc, #68]	; (8001468 <HAL_ADC_ConfigChannel+0x260>)
 8001424:	fba2 2303 	umull	r2, r3, r2, r3
 8001428:	0c9a      	lsrs	r2, r3, #18
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001434:	e002      	b.n	800143c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	3b01      	subs	r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f9      	bne.n	8001436 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	40012300 	.word	0x40012300
 800145c:	40012000 	.word	0x40012000
 8001460:	10000012 	.word	0x10000012
 8001464:	20000000 	.word	0x20000000
 8001468:	431bde83 	.word	0x431bde83

0800146c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001474:	4b79      	ldr	r3, [pc, #484]	; (800165c <ADC_Init+0x1f0>)
 8001476:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	431a      	orrs	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6859      	ldr	r1, [r3, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	021a      	lsls	r2, r3, #8
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6859      	ldr	r1, [r3, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6899      	ldr	r1, [r3, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fe:	4a58      	ldr	r2, [pc, #352]	; (8001660 <ADC_Init+0x1f4>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d022      	beq.n	800154a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001512:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6899      	ldr	r1, [r3, #8]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001534:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6899      	ldr	r1, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	e00f      	b.n	800156a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001558:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001568:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0202 	bic.w	r2, r2, #2
 8001578:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6899      	ldr	r1, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7e1b      	ldrb	r3, [r3, #24]
 8001584:	005a      	lsls	r2, r3, #1
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d01b      	beq.n	80015d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6859      	ldr	r1, [r3, #4]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	3b01      	subs	r3, #1
 80015c4:	035a      	lsls	r2, r3, #13
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	e007      	b.n	80015e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	051a      	lsls	r2, r3, #20
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001614:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6899      	ldr	r1, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001622:	025a      	lsls	r2, r3, #9
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800163a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6899      	ldr	r1, [r3, #8]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	029a      	lsls	r2, r3, #10
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	609a      	str	r2, [r3, #8]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	40012300 	.word	0x40012300
 8001660:	0f000001 	.word	0x0f000001

08001664 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001670:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800167a:	2b00      	cmp	r3, #0
 800167c:	d13c      	bne.n	80016f8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d12b      	bne.n	80016f0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800169c:	2b00      	cmp	r3, #0
 800169e:	d127      	bne.n	80016f0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d006      	beq.n	80016bc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d119      	bne.n	80016f0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0220 	bic.w	r2, r2, #32
 80016ca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d105      	bne.n	80016f0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	f043 0201 	orr.w	r2, r3, #1
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f7ff fd6b 	bl	80011cc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80016f6:	e00e      	b.n	8001716 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f003 0310 	and.w	r3, r3, #16
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f7ff fd75 	bl	80011f4 <HAL_ADC_ErrorCallback>
}
 800170a:	e004      	b.n	8001716 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	4798      	blx	r3
}
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b084      	sub	sp, #16
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f7ff fd57 	bl	80011e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001746:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2240      	movs	r2, #64	; 0x40
 800174c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f043 0204 	orr.w	r2, r3, #4
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f7ff fd4a 	bl	80011f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001784:	4013      	ands	r3, r2
 8001786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179a:	4a04      	ldr	r2, [pc, #16]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	60d3      	str	r3, [r2, #12]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <__NVIC_GetPriorityGrouping+0x18>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	f003 0307 	and.w	r3, r3, #7
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	db0b      	blt.n	80017f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f003 021f 	and.w	r2, r3, #31
 80017e4:	4907      	ldr	r1, [pc, #28]	; (8001804 <__NVIC_EnableIRQ+0x38>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	2001      	movs	r0, #1
 80017ee:	fa00 f202 	lsl.w	r2, r0, r2
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000e100 	.word	0xe000e100

08001808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db0a      	blt.n	8001832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	490c      	ldr	r1, [pc, #48]	; (8001854 <__NVIC_SetPriority+0x4c>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	440b      	add	r3, r1
 800182c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001830:	e00a      	b.n	8001848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <__NVIC_SetPriority+0x50>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3b04      	subs	r3, #4
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	440b      	add	r3, r1
 8001846:	761a      	strb	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000e100 	.word	0xe000e100
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f1c3 0307 	rsb	r3, r3, #7
 8001876:	2b04      	cmp	r3, #4
 8001878:	bf28      	it	cs
 800187a:	2304      	movcs	r3, #4
 800187c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3304      	adds	r3, #4
 8001882:	2b06      	cmp	r3, #6
 8001884:	d902      	bls.n	800188c <NVIC_EncodePriority+0x30>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3b03      	subs	r3, #3
 800188a:	e000      	b.n	800188e <NVIC_EncodePriority+0x32>
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	4313      	orrs	r3, r2
         );
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	; 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ff4c 	bl	8001768 <__NVIC_SetPriorityGrouping>
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ea:	f7ff ff61 	bl	80017b0 <__NVIC_GetPriorityGrouping>
 80018ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	68b9      	ldr	r1, [r7, #8]
 80018f4:	6978      	ldr	r0, [r7, #20]
 80018f6:	f7ff ffb1 	bl	800185c <NVIC_EncodePriority>
 80018fa:	4602      	mov	r2, r0
 80018fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001900:	4611      	mov	r1, r2
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff ff80 	bl	8001808 <__NVIC_SetPriority>
}
 8001908:	bf00      	nop
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ff54 	bl	80017cc <__NVIC_EnableIRQ>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800194a:	2b01      	cmp	r3, #1
 800194c:	d101      	bne.n	8001952 <HAL_DMA_Start_IT+0x26>
 800194e:	2302      	movs	r3, #2
 8001950:	e040      	b.n	80019d4 <HAL_DMA_Start_IT+0xa8>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b01      	cmp	r3, #1
 8001964:	d12f      	bne.n	80019c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2202      	movs	r2, #2
 800196a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 f8c0 	bl	8001b00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001984:	223f      	movs	r2, #63	; 0x3f
 8001986:	409a      	lsls	r2, r3
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0216 	orr.w	r2, r2, #22
 800199a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d007      	beq.n	80019b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0208 	orr.w	r2, r2, #8
 80019b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0201 	orr.w	r2, r2, #1
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	e005      	b.n	80019d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019ce:	2302      	movs	r3, #2
 80019d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019ea:	f7ff fa7d 	bl	8000ee8 <HAL_GetTick>
 80019ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d008      	beq.n	8001a0e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2280      	movs	r2, #128	; 0x80
 8001a00:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e052      	b.n	8001ab4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0216 	bic.w	r2, r2, #22
 8001a1c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695a      	ldr	r2, [r3, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a2c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d103      	bne.n	8001a3e <HAL_DMA_Abort+0x62>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0208 	bic.w	r2, r2, #8
 8001a4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0201 	bic.w	r2, r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a5e:	e013      	b.n	8001a88 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a60:	f7ff fa42 	bl	8000ee8 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b05      	cmp	r3, #5
 8001a6c:	d90c      	bls.n	8001a88 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2220      	movs	r2, #32
 8001a72:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2203      	movs	r2, #3
 8001a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e015      	b.n	8001ab4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1e4      	bne.n	8001a60 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9a:	223f      	movs	r2, #63	; 0x3f
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d004      	beq.n	8001ada <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2280      	movs	r2, #128	; 0x80
 8001ad4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00c      	b.n	8001af4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2205      	movs	r2, #5
 8001ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0201 	bic.w	r2, r2, #1
 8001af0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b40      	cmp	r3, #64	; 0x40
 8001b2c:	d108      	bne.n	8001b40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b3e:	e007      	b.n	8001b50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	60da      	str	r2, [r3, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	; 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	e159      	b.n	8001e2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b78:	2201      	movs	r2, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	f040 8148 	bne.w	8001e26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d005      	beq.n	8001bae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d130      	bne.n	8001c10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	2203      	movs	r2, #3
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001be4:	2201      	movs	r2, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 0201 	and.w	r2, r3, #1
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d017      	beq.n	8001c4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d123      	bne.n	8001ca0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	08da      	lsrs	r2, r3, #3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3208      	adds	r2, #8
 8001c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	220f      	movs	r2, #15
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	08da      	lsrs	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3208      	adds	r2, #8
 8001c9a:	69b9      	ldr	r1, [r7, #24]
 8001c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	2203      	movs	r2, #3
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0203 	and.w	r2, r3, #3
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80a2 	beq.w	8001e26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b57      	ldr	r3, [pc, #348]	; (8001e44 <HAL_GPIO_Init+0x2e8>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	4a56      	ldr	r2, [pc, #344]	; (8001e44 <HAL_GPIO_Init+0x2e8>)
 8001cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf2:	4b54      	ldr	r3, [pc, #336]	; (8001e44 <HAL_GPIO_Init+0x2e8>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cfe:	4a52      	ldr	r2, [pc, #328]	; (8001e48 <HAL_GPIO_Init+0x2ec>)
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	3302      	adds	r3, #2
 8001d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	220f      	movs	r2, #15
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a49      	ldr	r2, [pc, #292]	; (8001e4c <HAL_GPIO_Init+0x2f0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d019      	beq.n	8001d5e <HAL_GPIO_Init+0x202>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a48      	ldr	r2, [pc, #288]	; (8001e50 <HAL_GPIO_Init+0x2f4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_GPIO_Init+0x1fe>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a47      	ldr	r2, [pc, #284]	; (8001e54 <HAL_GPIO_Init+0x2f8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00d      	beq.n	8001d56 <HAL_GPIO_Init+0x1fa>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a46      	ldr	r2, [pc, #280]	; (8001e58 <HAL_GPIO_Init+0x2fc>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d007      	beq.n	8001d52 <HAL_GPIO_Init+0x1f6>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a45      	ldr	r2, [pc, #276]	; (8001e5c <HAL_GPIO_Init+0x300>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_GPIO_Init+0x1f2>
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	e008      	b.n	8001d60 <HAL_GPIO_Init+0x204>
 8001d4e:	2307      	movs	r3, #7
 8001d50:	e006      	b.n	8001d60 <HAL_GPIO_Init+0x204>
 8001d52:	2303      	movs	r3, #3
 8001d54:	e004      	b.n	8001d60 <HAL_GPIO_Init+0x204>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e002      	b.n	8001d60 <HAL_GPIO_Init+0x204>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_GPIO_Init+0x204>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	f002 0203 	and.w	r2, r2, #3
 8001d66:	0092      	lsls	r2, r2, #2
 8001d68:	4093      	lsls	r3, r2
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d70:	4935      	ldr	r1, [pc, #212]	; (8001e48 <HAL_GPIO_Init+0x2ec>)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	089b      	lsrs	r3, r3, #2
 8001d76:	3302      	adds	r3, #2
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7e:	4b38      	ldr	r3, [pc, #224]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001da2:	4a2f      	ldr	r2, [pc, #188]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da8:	4b2d      	ldr	r3, [pc, #180]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dcc:	4a24      	ldr	r2, [pc, #144]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dd2:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001df6:	4a1a      	ldr	r2, [pc, #104]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dfc:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e20:	4a0f      	ldr	r2, [pc, #60]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	61fb      	str	r3, [r7, #28]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	2b0f      	cmp	r3, #15
 8001e30:	f67f aea2 	bls.w	8001b78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	3724      	adds	r7, #36	; 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40013800 	.word	0x40013800
 8001e4c:	40020000 	.word	0x40020000
 8001e50:	40020400 	.word	0x40020400
 8001e54:	40020800 	.word	0x40020800
 8001e58:	40020c00 	.word	0x40020c00
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40013c00 	.word	0x40013c00

08001e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]
 8001e70:	4613      	mov	r3, r2
 8001e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e74:	787b      	ldrb	r3, [r7, #1]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e80:	e003      	b.n	8001e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e82:	887b      	ldrh	r3, [r7, #2]
 8001e84:	041a      	lsls	r2, r3, #16
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	619a      	str	r2, [r3, #24]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b085      	sub	sp, #20
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ea8:	887a      	ldrh	r2, [r7, #2]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4013      	ands	r3, r2
 8001eae:	041a      	lsls	r2, r3, #16
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	43d9      	mvns	r1, r3
 8001eb4:	887b      	ldrh	r3, [r7, #2]
 8001eb6:	400b      	ands	r3, r1
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	619a      	str	r2, [r3, #24]
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e12b      	b.n	8002136 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7fe fdde 	bl	8000ab4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2224      	movs	r2, #36	; 0x24
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0201 	bic.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f30:	f000 fd40 	bl	80029b4 <HAL_RCC_GetPCLK1Freq>
 8001f34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4a81      	ldr	r2, [pc, #516]	; (8002140 <HAL_I2C_Init+0x274>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d807      	bhi.n	8001f50 <HAL_I2C_Init+0x84>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4a80      	ldr	r2, [pc, #512]	; (8002144 <HAL_I2C_Init+0x278>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	bf94      	ite	ls
 8001f48:	2301      	movls	r3, #1
 8001f4a:	2300      	movhi	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	e006      	b.n	8001f5e <HAL_I2C_Init+0x92>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4a7d      	ldr	r2, [pc, #500]	; (8002148 <HAL_I2C_Init+0x27c>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	bf94      	ite	ls
 8001f58:	2301      	movls	r3, #1
 8001f5a:	2300      	movhi	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e0e7      	b.n	8002136 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4a78      	ldr	r2, [pc, #480]	; (800214c <HAL_I2C_Init+0x280>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	0c9b      	lsrs	r3, r3, #18
 8001f70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4a6a      	ldr	r2, [pc, #424]	; (8002140 <HAL_I2C_Init+0x274>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d802      	bhi.n	8001fa0 <HAL_I2C_Init+0xd4>
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	e009      	b.n	8001fb4 <HAL_I2C_Init+0xe8>
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fa6:	fb02 f303 	mul.w	r3, r2, r3
 8001faa:	4a69      	ldr	r2, [pc, #420]	; (8002150 <HAL_I2C_Init+0x284>)
 8001fac:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb0:	099b      	lsrs	r3, r3, #6
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	495c      	ldr	r1, [pc, #368]	; (8002140 <HAL_I2C_Init+0x274>)
 8001fd0:	428b      	cmp	r3, r1
 8001fd2:	d819      	bhi.n	8002008 <HAL_I2C_Init+0x13c>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	1e59      	subs	r1, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fe2:	1c59      	adds	r1, r3, #1
 8001fe4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fe8:	400b      	ands	r3, r1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00a      	beq.n	8002004 <HAL_I2C_Init+0x138>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1e59      	subs	r1, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002002:	e051      	b.n	80020a8 <HAL_I2C_Init+0x1dc>
 8002004:	2304      	movs	r3, #4
 8002006:	e04f      	b.n	80020a8 <HAL_I2C_Init+0x1dc>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d111      	bne.n	8002034 <HAL_I2C_Init+0x168>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1e58      	subs	r0, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6859      	ldr	r1, [r3, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	440b      	add	r3, r1
 800201e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002022:	3301      	adds	r3, #1
 8002024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002028:	2b00      	cmp	r3, #0
 800202a:	bf0c      	ite	eq
 800202c:	2301      	moveq	r3, #1
 800202e:	2300      	movne	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	e012      	b.n	800205a <HAL_I2C_Init+0x18e>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1e58      	subs	r0, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6859      	ldr	r1, [r3, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	0099      	lsls	r1, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	fbb0 f3f3 	udiv	r3, r0, r3
 800204a:	3301      	adds	r3, #1
 800204c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002050:	2b00      	cmp	r3, #0
 8002052:	bf0c      	ite	eq
 8002054:	2301      	moveq	r3, #1
 8002056:	2300      	movne	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_I2C_Init+0x196>
 800205e:	2301      	movs	r3, #1
 8002060:	e022      	b.n	80020a8 <HAL_I2C_Init+0x1dc>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10e      	bne.n	8002088 <HAL_I2C_Init+0x1bc>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1e58      	subs	r0, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6859      	ldr	r1, [r3, #4]
 8002072:	460b      	mov	r3, r1
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	440b      	add	r3, r1
 8002078:	fbb0 f3f3 	udiv	r3, r0, r3
 800207c:	3301      	adds	r3, #1
 800207e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002086:	e00f      	b.n	80020a8 <HAL_I2C_Init+0x1dc>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	1e58      	subs	r0, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6859      	ldr	r1, [r3, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	0099      	lsls	r1, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	fbb0 f3f3 	udiv	r3, r0, r3
 800209e:	3301      	adds	r3, #1
 80020a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	6809      	ldr	r1, [r1, #0]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69da      	ldr	r2, [r3, #28]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6911      	ldr	r1, [r2, #16]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68d2      	ldr	r2, [r2, #12]
 80020e2:	4311      	orrs	r1, r2
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	430b      	orrs	r3, r1
 80020ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2220      	movs	r2, #32
 8002122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	000186a0 	.word	0x000186a0
 8002144:	001e847f 	.word	0x001e847f
 8002148:	003d08ff 	.word	0x003d08ff
 800214c:	431bde83 	.word	0x431bde83
 8002150:	10624dd3 	.word	0x10624dd3

08002154 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e267      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d075      	beq.n	800225e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002172:	4b88      	ldr	r3, [pc, #544]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	2b04      	cmp	r3, #4
 800217c:	d00c      	beq.n	8002198 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800217e:	4b85      	ldr	r3, [pc, #532]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002186:	2b08      	cmp	r3, #8
 8002188:	d112      	bne.n	80021b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800218a:	4b82      	ldr	r3, [pc, #520]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002192:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002196:	d10b      	bne.n	80021b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002198:	4b7e      	ldr	r3, [pc, #504]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d05b      	beq.n	800225c <HAL_RCC_OscConfig+0x108>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d157      	bne.n	800225c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e242      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b8:	d106      	bne.n	80021c8 <HAL_RCC_OscConfig+0x74>
 80021ba:	4b76      	ldr	r3, [pc, #472]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a75      	ldr	r2, [pc, #468]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80021c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	e01d      	b.n	8002204 <HAL_RCC_OscConfig+0xb0>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0x98>
 80021d2:	4b70      	ldr	r3, [pc, #448]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a6f      	ldr	r2, [pc, #444]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80021d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	4b6d      	ldr	r3, [pc, #436]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a6c      	ldr	r2, [pc, #432]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80021e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e00b      	b.n	8002204 <HAL_RCC_OscConfig+0xb0>
 80021ec:	4b69      	ldr	r3, [pc, #420]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a68      	ldr	r2, [pc, #416]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80021f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	4b66      	ldr	r3, [pc, #408]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a65      	ldr	r2, [pc, #404]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80021fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d013      	beq.n	8002234 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7fe fe6c 	bl	8000ee8 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002214:	f7fe fe68 	bl	8000ee8 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	; 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e207      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002226:	4b5b      	ldr	r3, [pc, #364]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0xc0>
 8002232:	e014      	b.n	800225e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7fe fe58 	bl	8000ee8 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800223c:	f7fe fe54 	bl	8000ee8 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	; 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e1f3      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224e:	4b51      	ldr	r3, [pc, #324]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0xe8>
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d063      	beq.n	8002332 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800226a:	4b4a      	ldr	r3, [pc, #296]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00b      	beq.n	800228e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002276:	4b47      	ldr	r3, [pc, #284]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800227e:	2b08      	cmp	r3, #8
 8002280:	d11c      	bne.n	80022bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002282:	4b44      	ldr	r3, [pc, #272]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d116      	bne.n	80022bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228e:	4b41      	ldr	r3, [pc, #260]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d005      	beq.n	80022a6 <HAL_RCC_OscConfig+0x152>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d001      	beq.n	80022a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e1c7      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a6:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4937      	ldr	r1, [pc, #220]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ba:	e03a      	b.n	8002332 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d020      	beq.n	8002306 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c4:	4b34      	ldr	r3, [pc, #208]	; (8002398 <HAL_RCC_OscConfig+0x244>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ca:	f7fe fe0d 	bl	8000ee8 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022d2:	f7fe fe09 	bl	8000ee8 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e1a8      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e4:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f0:	4b28      	ldr	r3, [pc, #160]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4925      	ldr	r1, [pc, #148]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 8002300:	4313      	orrs	r3, r2
 8002302:	600b      	str	r3, [r1, #0]
 8002304:	e015      	b.n	8002332 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002306:	4b24      	ldr	r3, [pc, #144]	; (8002398 <HAL_RCC_OscConfig+0x244>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7fe fdec 	bl	8000ee8 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002314:	f7fe fde8 	bl	8000ee8 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e187      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002326:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d036      	beq.n	80023ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d016      	beq.n	8002374 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002346:	4b15      	ldr	r3, [pc, #84]	; (800239c <HAL_RCC_OscConfig+0x248>)
 8002348:	2201      	movs	r2, #1
 800234a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234c:	f7fe fdcc 	bl	8000ee8 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002354:	f7fe fdc8 	bl	8000ee8 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e167      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_RCC_OscConfig+0x240>)
 8002368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x200>
 8002372:	e01b      	b.n	80023ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <HAL_RCC_OscConfig+0x248>)
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237a:	f7fe fdb5 	bl	8000ee8 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002380:	e00e      	b.n	80023a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002382:	f7fe fdb1 	bl	8000ee8 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d907      	bls.n	80023a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e150      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
 8002394:	40023800 	.word	0x40023800
 8002398:	42470000 	.word	0x42470000
 800239c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a0:	4b88      	ldr	r3, [pc, #544]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 80023a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1ea      	bne.n	8002382 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 8097 	beq.w	80024e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023be:	4b81      	ldr	r3, [pc, #516]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10f      	bne.n	80023ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	4b7d      	ldr	r3, [pc, #500]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a7c      	ldr	r2, [pc, #496]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b7a      	ldr	r3, [pc, #488]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e6:	2301      	movs	r3, #1
 80023e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ea:	4b77      	ldr	r3, [pc, #476]	; (80025c8 <HAL_RCC_OscConfig+0x474>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d118      	bne.n	8002428 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f6:	4b74      	ldr	r3, [pc, #464]	; (80025c8 <HAL_RCC_OscConfig+0x474>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a73      	ldr	r2, [pc, #460]	; (80025c8 <HAL_RCC_OscConfig+0x474>)
 80023fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002402:	f7fe fd71 	bl	8000ee8 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240a:	f7fe fd6d 	bl	8000ee8 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e10c      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241c:	4b6a      	ldr	r3, [pc, #424]	; (80025c8 <HAL_RCC_OscConfig+0x474>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d106      	bne.n	800243e <HAL_RCC_OscConfig+0x2ea>
 8002430:	4b64      	ldr	r3, [pc, #400]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 8002432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002434:	4a63      	ldr	r2, [pc, #396]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6713      	str	r3, [r2, #112]	; 0x70
 800243c:	e01c      	b.n	8002478 <HAL_RCC_OscConfig+0x324>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b05      	cmp	r3, #5
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0x30c>
 8002446:	4b5f      	ldr	r3, [pc, #380]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 8002448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244a:	4a5e      	ldr	r2, [pc, #376]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 800244c:	f043 0304 	orr.w	r3, r3, #4
 8002450:	6713      	str	r3, [r2, #112]	; 0x70
 8002452:	4b5c      	ldr	r3, [pc, #368]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	4a5b      	ldr	r2, [pc, #364]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	6713      	str	r3, [r2, #112]	; 0x70
 800245e:	e00b      	b.n	8002478 <HAL_RCC_OscConfig+0x324>
 8002460:	4b58      	ldr	r3, [pc, #352]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 8002462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002464:	4a57      	ldr	r2, [pc, #348]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 8002466:	f023 0301 	bic.w	r3, r3, #1
 800246a:	6713      	str	r3, [r2, #112]	; 0x70
 800246c:	4b55      	ldr	r3, [pc, #340]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002470:	4a54      	ldr	r2, [pc, #336]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 8002472:	f023 0304 	bic.w	r3, r3, #4
 8002476:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d015      	beq.n	80024ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002480:	f7fe fd32 	bl	8000ee8 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002486:	e00a      	b.n	800249e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002488:	f7fe fd2e 	bl	8000ee8 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	; 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e0cb      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249e:	4b49      	ldr	r3, [pc, #292]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 80024a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0ee      	beq.n	8002488 <HAL_RCC_OscConfig+0x334>
 80024aa:	e014      	b.n	80024d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ac:	f7fe fd1c 	bl	8000ee8 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b4:	f7fe fd18 	bl	8000ee8 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e0b5      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ca:	4b3e      	ldr	r3, [pc, #248]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 80024cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1ee      	bne.n	80024b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d105      	bne.n	80024e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024dc:	4b39      	ldr	r3, [pc, #228]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	4a38      	ldr	r2, [pc, #224]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 80024e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 80a1 	beq.w	8002634 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024f2:	4b34      	ldr	r3, [pc, #208]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d05c      	beq.n	80025b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d141      	bne.n	800258a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002506:	4b31      	ldr	r3, [pc, #196]	; (80025cc <HAL_RCC_OscConfig+0x478>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7fe fcec 	bl	8000ee8 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002514:	f7fe fce8 	bl	8000ee8 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e087      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002526:	4b27      	ldr	r3, [pc, #156]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69da      	ldr	r2, [r3, #28]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	019b      	lsls	r3, r3, #6
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	085b      	lsrs	r3, r3, #1
 800254a:	3b01      	subs	r3, #1
 800254c:	041b      	lsls	r3, r3, #16
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	061b      	lsls	r3, r3, #24
 8002556:	491b      	ldr	r1, [pc, #108]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800255c:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <HAL_RCC_OscConfig+0x478>)
 800255e:	2201      	movs	r2, #1
 8002560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002562:	f7fe fcc1 	bl	8000ee8 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800256a:	f7fe fcbd 	bl	8000ee8 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e05c      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x416>
 8002588:	e054      	b.n	8002634 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258a:	4b10      	ldr	r3, [pc, #64]	; (80025cc <HAL_RCC_OscConfig+0x478>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7fe fcaa 	bl	8000ee8 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002598:	f7fe fca6 	bl	8000ee8 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e045      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_RCC_OscConfig+0x470>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x444>
 80025b6:	e03d      	b.n	8002634 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d107      	bne.n	80025d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e038      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40007000 	.word	0x40007000
 80025cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025d0:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <HAL_RCC_OscConfig+0x4ec>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d028      	beq.n	8002630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d121      	bne.n	8002630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d11a      	bne.n	8002630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002600:	4013      	ands	r3, r2
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002606:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002608:	4293      	cmp	r3, r2
 800260a:	d111      	bne.n	8002630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	085b      	lsrs	r3, r3, #1
 8002618:	3b01      	subs	r3, #1
 800261a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800261c:	429a      	cmp	r2, r3
 800261e:	d107      	bne.n	8002630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800

08002644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0cc      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002658:	4b68      	ldr	r3, [pc, #416]	; (80027fc <HAL_RCC_ClockConfig+0x1b8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d90c      	bls.n	8002680 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002666:	4b65      	ldr	r3, [pc, #404]	; (80027fc <HAL_RCC_ClockConfig+0x1b8>)
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266e:	4b63      	ldr	r3, [pc, #396]	; (80027fc <HAL_RCC_ClockConfig+0x1b8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0b8      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d020      	beq.n	80026ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002698:	4b59      	ldr	r3, [pc, #356]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	4a58      	ldr	r2, [pc, #352]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026b0:	4b53      	ldr	r3, [pc, #332]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	4a52      	ldr	r2, [pc, #328]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026bc:	4b50      	ldr	r3, [pc, #320]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	494d      	ldr	r1, [pc, #308]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d044      	beq.n	8002764 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d107      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e2:	4b47      	ldr	r3, [pc, #284]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d119      	bne.n	8002722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e07f      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d003      	beq.n	8002702 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d107      	bne.n	8002712 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002702:	4b3f      	ldr	r3, [pc, #252]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d109      	bne.n	8002722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e06f      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002712:	4b3b      	ldr	r3, [pc, #236]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e067      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002722:	4b37      	ldr	r3, [pc, #220]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f023 0203 	bic.w	r2, r3, #3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4934      	ldr	r1, [pc, #208]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	4313      	orrs	r3, r2
 8002732:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002734:	f7fe fbd8 	bl	8000ee8 <HAL_GetTick>
 8002738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	e00a      	b.n	8002752 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800273c:	f7fe fbd4 	bl	8000ee8 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	f241 3288 	movw	r2, #5000	; 0x1388
 800274a:	4293      	cmp	r3, r2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e04f      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	4b2b      	ldr	r3, [pc, #172]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 020c 	and.w	r2, r3, #12
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	429a      	cmp	r2, r3
 8002762:	d1eb      	bne.n	800273c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002764:	4b25      	ldr	r3, [pc, #148]	; (80027fc <HAL_RCC_ClockConfig+0x1b8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d20c      	bcs.n	800278c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002772:	4b22      	ldr	r3, [pc, #136]	; (80027fc <HAL_RCC_ClockConfig+0x1b8>)
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800277a:	4b20      	ldr	r3, [pc, #128]	; (80027fc <HAL_RCC_ClockConfig+0x1b8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d001      	beq.n	800278c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e032      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002798:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4916      	ldr	r1, [pc, #88]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027b6:	4b12      	ldr	r3, [pc, #72]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	490e      	ldr	r1, [pc, #56]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027ca:	f000 f821 	bl	8002810 <HAL_RCC_GetSysClockFreq>
 80027ce:	4602      	mov	r2, r0
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	091b      	lsrs	r3, r3, #4
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	490a      	ldr	r1, [pc, #40]	; (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 80027dc:	5ccb      	ldrb	r3, [r1, r3]
 80027de:	fa22 f303 	lsr.w	r3, r2, r3
 80027e2:	4a09      	ldr	r2, [pc, #36]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe fa6a 	bl	8000cc4 <HAL_InitTick>

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40023c00 	.word	0x40023c00
 8002800:	40023800 	.word	0x40023800
 8002804:	08006e98 	.word	0x08006e98
 8002808:	20000000 	.word	0x20000000
 800280c:	20000004 	.word	0x20000004

08002810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002814:	b090      	sub	sp, #64	; 0x40
 8002816:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	637b      	str	r3, [r7, #52]	; 0x34
 800281c:	2300      	movs	r3, #0
 800281e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002820:	2300      	movs	r3, #0
 8002822:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002828:	4b59      	ldr	r3, [pc, #356]	; (8002990 <HAL_RCC_GetSysClockFreq+0x180>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 030c 	and.w	r3, r3, #12
 8002830:	2b08      	cmp	r3, #8
 8002832:	d00d      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0x40>
 8002834:	2b08      	cmp	r3, #8
 8002836:	f200 80a1 	bhi.w	800297c <HAL_RCC_GetSysClockFreq+0x16c>
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <HAL_RCC_GetSysClockFreq+0x34>
 800283e:	2b04      	cmp	r3, #4
 8002840:	d003      	beq.n	800284a <HAL_RCC_GetSysClockFreq+0x3a>
 8002842:	e09b      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002844:	4b53      	ldr	r3, [pc, #332]	; (8002994 <HAL_RCC_GetSysClockFreq+0x184>)
 8002846:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002848:	e09b      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800284a:	4b53      	ldr	r3, [pc, #332]	; (8002998 <HAL_RCC_GetSysClockFreq+0x188>)
 800284c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800284e:	e098      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002850:	4b4f      	ldr	r3, [pc, #316]	; (8002990 <HAL_RCC_GetSysClockFreq+0x180>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002858:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800285a:	4b4d      	ldr	r3, [pc, #308]	; (8002990 <HAL_RCC_GetSysClockFreq+0x180>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d028      	beq.n	80028b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002866:	4b4a      	ldr	r3, [pc, #296]	; (8002990 <HAL_RCC_GetSysClockFreq+0x180>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	099b      	lsrs	r3, r3, #6
 800286c:	2200      	movs	r2, #0
 800286e:	623b      	str	r3, [r7, #32]
 8002870:	627a      	str	r2, [r7, #36]	; 0x24
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002878:	2100      	movs	r1, #0
 800287a:	4b47      	ldr	r3, [pc, #284]	; (8002998 <HAL_RCC_GetSysClockFreq+0x188>)
 800287c:	fb03 f201 	mul.w	r2, r3, r1
 8002880:	2300      	movs	r3, #0
 8002882:	fb00 f303 	mul.w	r3, r0, r3
 8002886:	4413      	add	r3, r2
 8002888:	4a43      	ldr	r2, [pc, #268]	; (8002998 <HAL_RCC_GetSysClockFreq+0x188>)
 800288a:	fba0 1202 	umull	r1, r2, r0, r2
 800288e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002890:	460a      	mov	r2, r1
 8002892:	62ba      	str	r2, [r7, #40]	; 0x28
 8002894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002896:	4413      	add	r3, r2
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800289a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800289c:	2200      	movs	r2, #0
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	61fa      	str	r2, [r7, #28]
 80028a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80028aa:	f7fd fc99 	bl	80001e0 <__aeabi_uldivmod>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4613      	mov	r3, r2
 80028b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028b6:	e053      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028b8:	4b35      	ldr	r3, [pc, #212]	; (8002990 <HAL_RCC_GetSysClockFreq+0x180>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	099b      	lsrs	r3, r3, #6
 80028be:	2200      	movs	r2, #0
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	617a      	str	r2, [r7, #20]
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028ca:	f04f 0b00 	mov.w	fp, #0
 80028ce:	4652      	mov	r2, sl
 80028d0:	465b      	mov	r3, fp
 80028d2:	f04f 0000 	mov.w	r0, #0
 80028d6:	f04f 0100 	mov.w	r1, #0
 80028da:	0159      	lsls	r1, r3, #5
 80028dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028e0:	0150      	lsls	r0, r2, #5
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	ebb2 080a 	subs.w	r8, r2, sl
 80028ea:	eb63 090b 	sbc.w	r9, r3, fp
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002902:	ebb2 0408 	subs.w	r4, r2, r8
 8002906:	eb63 0509 	sbc.w	r5, r3, r9
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	00eb      	lsls	r3, r5, #3
 8002914:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002918:	00e2      	lsls	r2, r4, #3
 800291a:	4614      	mov	r4, r2
 800291c:	461d      	mov	r5, r3
 800291e:	eb14 030a 	adds.w	r3, r4, sl
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	eb45 030b 	adc.w	r3, r5, fp
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002936:	4629      	mov	r1, r5
 8002938:	028b      	lsls	r3, r1, #10
 800293a:	4621      	mov	r1, r4
 800293c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002940:	4621      	mov	r1, r4
 8002942:	028a      	lsls	r2, r1, #10
 8002944:	4610      	mov	r0, r2
 8002946:	4619      	mov	r1, r3
 8002948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294a:	2200      	movs	r2, #0
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	60fa      	str	r2, [r7, #12]
 8002950:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002954:	f7fd fc44 	bl	80001e0 <__aeabi_uldivmod>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4613      	mov	r3, r2
 800295e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_RCC_GetSysClockFreq+0x180>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	0c1b      	lsrs	r3, r3, #16
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	3301      	adds	r3, #1
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002970:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002974:	fbb2 f3f3 	udiv	r3, r2, r3
 8002978:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800297a:	e002      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <HAL_RCC_GetSysClockFreq+0x184>)
 800297e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002984:	4618      	mov	r0, r3
 8002986:	3740      	adds	r7, #64	; 0x40
 8002988:	46bd      	mov	sp, r7
 800298a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800
 8002994:	00f42400 	.word	0x00f42400
 8002998:	017d7840 	.word	0x017d7840

0800299c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029a0:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029a2:	681b      	ldr	r3, [r3, #0]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	20000000 	.word	0x20000000

080029b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029b8:	f7ff fff0 	bl	800299c <HAL_RCC_GetHCLKFreq>
 80029bc:	4602      	mov	r2, r0
 80029be:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	0a9b      	lsrs	r3, r3, #10
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	4903      	ldr	r1, [pc, #12]	; (80029d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ca:	5ccb      	ldrb	r3, [r1, r3]
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40023800 	.word	0x40023800
 80029d8:	08006ea8 	.word	0x08006ea8

080029dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029e0:	f7ff ffdc 	bl	800299c <HAL_RCC_GetHCLKFreq>
 80029e4:	4602      	mov	r2, r0
 80029e6:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	0b5b      	lsrs	r3, r3, #13
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	4903      	ldr	r1, [pc, #12]	; (8002a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029f2:	5ccb      	ldrb	r3, [r1, r3]
 80029f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40023800 	.word	0x40023800
 8002a00:	08006ea8 	.word	0x08006ea8

08002a04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	220f      	movs	r2, #15
 8002a12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a14:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_RCC_GetClockConfig+0x5c>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 0203 	and.w	r2, r3, #3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a20:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <HAL_RCC_GetClockConfig+0x5c>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <HAL_RCC_GetClockConfig+0x5c>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a38:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_RCC_GetClockConfig+0x5c>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	08db      	lsrs	r3, r3, #3
 8002a3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a46:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <HAL_RCC_GetClockConfig+0x60>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0207 	and.w	r2, r3, #7
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	601a      	str	r2, [r3, #0]
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40023c00 	.word	0x40023c00

08002a68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e07b      	b.n	8002b72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d108      	bne.n	8002a94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a8a:	d009      	beq.n	8002aa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	61da      	str	r2, [r3, #28]
 8002a92:	e005      	b.n	8002aa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fe f842 	bl	8000b44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b24:	ea42 0103 	orr.w	r1, r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	0c1b      	lsrs	r3, r3, #16
 8002b3e:	f003 0104 	and.w	r1, r3, #4
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	f003 0210 	and.w	r2, r3, #16
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	69da      	ldr	r2, [r3, #28]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e041      	b.n	8002c10 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d106      	bne.n	8002ba6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7fe f817 	bl	8000bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4610      	mov	r0, r2
 8002bba:	f000 fa87 	bl	80030cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d001      	beq.n	8002c30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e044      	b.n	8002cba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a1e      	ldr	r2, [pc, #120]	; (8002cc8 <HAL_TIM_Base_Start_IT+0xb0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d018      	beq.n	8002c84 <HAL_TIM_Base_Start_IT+0x6c>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5a:	d013      	beq.n	8002c84 <HAL_TIM_Base_Start_IT+0x6c>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a1a      	ldr	r2, [pc, #104]	; (8002ccc <HAL_TIM_Base_Start_IT+0xb4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00e      	beq.n	8002c84 <HAL_TIM_Base_Start_IT+0x6c>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a19      	ldr	r2, [pc, #100]	; (8002cd0 <HAL_TIM_Base_Start_IT+0xb8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d009      	beq.n	8002c84 <HAL_TIM_Base_Start_IT+0x6c>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a17      	ldr	r2, [pc, #92]	; (8002cd4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d004      	beq.n	8002c84 <HAL_TIM_Base_Start_IT+0x6c>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a16      	ldr	r2, [pc, #88]	; (8002cd8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d111      	bne.n	8002ca8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b06      	cmp	r3, #6
 8002c94:	d010      	beq.n	8002cb8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0201 	orr.w	r2, r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca6:	e007      	b.n	8002cb8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0201 	orr.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40010000 	.word	0x40010000
 8002ccc:	40000400 	.word	0x40000400
 8002cd0:	40000800 	.word	0x40000800
 8002cd4:	40000c00 	.word	0x40000c00
 8002cd8:	40014000 	.word	0x40014000

08002cdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d122      	bne.n	8002d38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d11b      	bne.n	8002d38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0202 	mvn.w	r2, #2
 8002d08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f9b5 	bl	800308e <HAL_TIM_IC_CaptureCallback>
 8002d24:	e005      	b.n	8002d32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f9a7 	bl	800307a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f9b8 	bl	80030a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d122      	bne.n	8002d8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d11b      	bne.n	8002d8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f06f 0204 	mvn.w	r2, #4
 8002d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2202      	movs	r2, #2
 8002d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f98b 	bl	800308e <HAL_TIM_IC_CaptureCallback>
 8002d78:	e005      	b.n	8002d86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f97d 	bl	800307a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f98e 	bl	80030a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d122      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d11b      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f06f 0208 	mvn.w	r2, #8
 8002db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2204      	movs	r2, #4
 8002db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f961 	bl	800308e <HAL_TIM_IC_CaptureCallback>
 8002dcc:	e005      	b.n	8002dda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f953 	bl	800307a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f964 	bl	80030a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	2b10      	cmp	r3, #16
 8002dec:	d122      	bne.n	8002e34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	2b10      	cmp	r3, #16
 8002dfa:	d11b      	bne.n	8002e34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0210 	mvn.w	r2, #16
 8002e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2208      	movs	r2, #8
 8002e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f937 	bl	800308e <HAL_TIM_IC_CaptureCallback>
 8002e20:	e005      	b.n	8002e2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f929 	bl	800307a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f93a 	bl	80030a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d10e      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d107      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f06f 0201 	mvn.w	r2, #1
 8002e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fd fda2 	bl	80009a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6a:	2b80      	cmp	r3, #128	; 0x80
 8002e6c:	d10e      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e78:	2b80      	cmp	r3, #128	; 0x80
 8002e7a:	d107      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fab2 	bl	80033f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e96:	2b40      	cmp	r3, #64	; 0x40
 8002e98:	d10e      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea4:	2b40      	cmp	r3, #64	; 0x40
 8002ea6:	d107      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f8ff 	bl	80030b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f003 0320 	and.w	r3, r3, #32
 8002ec2:	2b20      	cmp	r3, #32
 8002ec4:	d10e      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	2b20      	cmp	r3, #32
 8002ed2:	d107      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f06f 0220 	mvn.w	r2, #32
 8002edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fa7c 	bl	80033dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_TIM_ConfigClockSource+0x1c>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e0b4      	b.n	8003072 <HAL_TIM_ConfigClockSource+0x186>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f40:	d03e      	beq.n	8002fc0 <HAL_TIM_ConfigClockSource+0xd4>
 8002f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f46:	f200 8087 	bhi.w	8003058 <HAL_TIM_ConfigClockSource+0x16c>
 8002f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f4e:	f000 8086 	beq.w	800305e <HAL_TIM_ConfigClockSource+0x172>
 8002f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f56:	d87f      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x16c>
 8002f58:	2b70      	cmp	r3, #112	; 0x70
 8002f5a:	d01a      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0xa6>
 8002f5c:	2b70      	cmp	r3, #112	; 0x70
 8002f5e:	d87b      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x16c>
 8002f60:	2b60      	cmp	r3, #96	; 0x60
 8002f62:	d050      	beq.n	8003006 <HAL_TIM_ConfigClockSource+0x11a>
 8002f64:	2b60      	cmp	r3, #96	; 0x60
 8002f66:	d877      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x16c>
 8002f68:	2b50      	cmp	r3, #80	; 0x50
 8002f6a:	d03c      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0xfa>
 8002f6c:	2b50      	cmp	r3, #80	; 0x50
 8002f6e:	d873      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x16c>
 8002f70:	2b40      	cmp	r3, #64	; 0x40
 8002f72:	d058      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0x13a>
 8002f74:	2b40      	cmp	r3, #64	; 0x40
 8002f76:	d86f      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x16c>
 8002f78:	2b30      	cmp	r3, #48	; 0x30
 8002f7a:	d064      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0x15a>
 8002f7c:	2b30      	cmp	r3, #48	; 0x30
 8002f7e:	d86b      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x16c>
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	d060      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0x15a>
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	d867      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x16c>
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d05c      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0x15a>
 8002f8c:	2b10      	cmp	r3, #16
 8002f8e:	d05a      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0x15a>
 8002f90:	e062      	b.n	8003058 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6899      	ldr	r1, [r3, #8]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f000 f98d 	bl	80032c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	609a      	str	r2, [r3, #8]
      break;
 8002fbe:	e04f      	b.n	8003060 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	6899      	ldr	r1, [r3, #8]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f000 f976 	bl	80032c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fe2:	609a      	str	r2, [r3, #8]
      break;
 8002fe4:	e03c      	b.n	8003060 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	6859      	ldr	r1, [r3, #4]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f000 f8ea 	bl	80031cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2150      	movs	r1, #80	; 0x50
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 f943 	bl	800328a <TIM_ITRx_SetConfig>
      break;
 8003004:	e02c      	b.n	8003060 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6859      	ldr	r1, [r3, #4]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	461a      	mov	r2, r3
 8003014:	f000 f909 	bl	800322a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2160      	movs	r1, #96	; 0x60
 800301e:	4618      	mov	r0, r3
 8003020:	f000 f933 	bl	800328a <TIM_ITRx_SetConfig>
      break;
 8003024:	e01c      	b.n	8003060 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	6859      	ldr	r1, [r3, #4]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	461a      	mov	r2, r3
 8003034:	f000 f8ca 	bl	80031cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2140      	movs	r1, #64	; 0x40
 800303e:	4618      	mov	r0, r3
 8003040:	f000 f923 	bl	800328a <TIM_ITRx_SetConfig>
      break;
 8003044:	e00c      	b.n	8003060 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4619      	mov	r1, r3
 8003050:	4610      	mov	r0, r2
 8003052:	f000 f91a 	bl	800328a <TIM_ITRx_SetConfig>
      break;
 8003056:	e003      	b.n	8003060 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
      break;
 800305c:	e000      	b.n	8003060 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800305e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003070:	7bfb      	ldrb	r3, [r7, #15]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
	...

080030cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a34      	ldr	r2, [pc, #208]	; (80031b0 <TIM_Base_SetConfig+0xe4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00f      	beq.n	8003104 <TIM_Base_SetConfig+0x38>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ea:	d00b      	beq.n	8003104 <TIM_Base_SetConfig+0x38>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a31      	ldr	r2, [pc, #196]	; (80031b4 <TIM_Base_SetConfig+0xe8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d007      	beq.n	8003104 <TIM_Base_SetConfig+0x38>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a30      	ldr	r2, [pc, #192]	; (80031b8 <TIM_Base_SetConfig+0xec>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d003      	beq.n	8003104 <TIM_Base_SetConfig+0x38>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a2f      	ldr	r2, [pc, #188]	; (80031bc <TIM_Base_SetConfig+0xf0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d108      	bne.n	8003116 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a25      	ldr	r2, [pc, #148]	; (80031b0 <TIM_Base_SetConfig+0xe4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d01b      	beq.n	8003156 <TIM_Base_SetConfig+0x8a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003124:	d017      	beq.n	8003156 <TIM_Base_SetConfig+0x8a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a22      	ldr	r2, [pc, #136]	; (80031b4 <TIM_Base_SetConfig+0xe8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d013      	beq.n	8003156 <TIM_Base_SetConfig+0x8a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a21      	ldr	r2, [pc, #132]	; (80031b8 <TIM_Base_SetConfig+0xec>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00f      	beq.n	8003156 <TIM_Base_SetConfig+0x8a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a20      	ldr	r2, [pc, #128]	; (80031bc <TIM_Base_SetConfig+0xf0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00b      	beq.n	8003156 <TIM_Base_SetConfig+0x8a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a1f      	ldr	r2, [pc, #124]	; (80031c0 <TIM_Base_SetConfig+0xf4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d007      	beq.n	8003156 <TIM_Base_SetConfig+0x8a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a1e      	ldr	r2, [pc, #120]	; (80031c4 <TIM_Base_SetConfig+0xf8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d003      	beq.n	8003156 <TIM_Base_SetConfig+0x8a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a1d      	ldr	r2, [pc, #116]	; (80031c8 <TIM_Base_SetConfig+0xfc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d108      	bne.n	8003168 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800315c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4313      	orrs	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a08      	ldr	r2, [pc, #32]	; (80031b0 <TIM_Base_SetConfig+0xe4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d103      	bne.n	800319c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	615a      	str	r2, [r3, #20]
}
 80031a2:	bf00      	nop
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40010000 	.word	0x40010000
 80031b4:	40000400 	.word	0x40000400
 80031b8:	40000800 	.word	0x40000800
 80031bc:	40000c00 	.word	0x40000c00
 80031c0:	40014000 	.word	0x40014000
 80031c4:	40014400 	.word	0x40014400
 80031c8:	40014800 	.word	0x40014800

080031cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	f023 0201 	bic.w	r2, r3, #1
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f023 030a 	bic.w	r3, r3, #10
 8003208:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	621a      	str	r2, [r3, #32]
}
 800321e:	bf00      	nop
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800322a:	b480      	push	{r7}
 800322c:	b087      	sub	sp, #28
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	f023 0210 	bic.w	r2, r3, #16
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003254:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	031b      	lsls	r3, r3, #12
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003266:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	621a      	str	r2, [r3, #32]
}
 800327e:	bf00      	nop
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800328a:	b480      	push	{r7}
 800328c:	b085      	sub	sp, #20
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f043 0307 	orr.w	r3, r3, #7
 80032ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	609a      	str	r2, [r3, #8]
}
 80032b4:	bf00      	nop
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	021a      	lsls	r2, r3, #8
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	609a      	str	r2, [r3, #8]
}
 80032f4:	bf00      	nop
 80032f6:	371c      	adds	r7, #28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003314:	2302      	movs	r3, #2
 8003316:	e050      	b.n	80033ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4313      	orrs	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1c      	ldr	r2, [pc, #112]	; (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d018      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003364:	d013      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a18      	ldr	r2, [pc, #96]	; (80033cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00e      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a16      	ldr	r2, [pc, #88]	; (80033d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d009      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a15      	ldr	r2, [pc, #84]	; (80033d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d004      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a13      	ldr	r2, [pc, #76]	; (80033d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d10c      	bne.n	80033a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003394:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	4313      	orrs	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40010000 	.word	0x40010000
 80033cc:	40000400 	.word	0x40000400
 80033d0:	40000800 	.word	0x40000800
 80033d4:	40000c00 	.word	0x40000c00
 80033d8:	40014000 	.word	0x40014000

080033dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e03f      	b.n	8003496 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fd fbfa 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2224      	movs	r2, #36	; 0x24
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fc7b 	bl	8003d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800345c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695a      	ldr	r2, [r3, #20]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800346c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800347c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b0ba      	sub	sp, #232	; 0xe8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80034de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10f      	bne.n	8003506 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ea:	f003 0320 	and.w	r3, r3, #32
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d009      	beq.n	8003506 <HAL_UART_IRQHandler+0x66>
 80034f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fb65 	bl	8003bce <UART_Receive_IT>
      return;
 8003504:	e256      	b.n	80039b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 80de 	beq.w	80036cc <HAL_UART_IRQHandler+0x22c>
 8003510:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b00      	cmp	r3, #0
 800351a:	d106      	bne.n	800352a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800351c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003520:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80d1 	beq.w	80036cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800352a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00b      	beq.n	800354e <HAL_UART_IRQHandler+0xae>
 8003536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800353a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f043 0201 	orr.w	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800354e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00b      	beq.n	8003572 <HAL_UART_IRQHandler+0xd2>
 800355a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d005      	beq.n	8003572 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f043 0202 	orr.w	r2, r3, #2
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00b      	beq.n	8003596 <HAL_UART_IRQHandler+0xf6>
 800357e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f043 0204 	orr.w	r2, r3, #4
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d011      	beq.n	80035c6 <HAL_UART_IRQHandler+0x126>
 80035a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d105      	bne.n	80035ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80035ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	f043 0208 	orr.w	r2, r3, #8
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 81ed 	beq.w	80039aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_UART_IRQHandler+0x14e>
 80035dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 faf0 	bl	8003bce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f8:	2b40      	cmp	r3, #64	; 0x40
 80035fa:	bf0c      	ite	eq
 80035fc:	2301      	moveq	r3, #1
 80035fe:	2300      	movne	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d103      	bne.n	800361a <HAL_UART_IRQHandler+0x17a>
 8003612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003616:	2b00      	cmp	r3, #0
 8003618:	d04f      	beq.n	80036ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f9f8 	bl	8003a10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	2b40      	cmp	r3, #64	; 0x40
 800362c:	d141      	bne.n	80036b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3314      	adds	r3, #20
 8003634:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003638:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800363c:	e853 3f00 	ldrex	r3, [r3]
 8003640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003644:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800364c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3314      	adds	r3, #20
 8003656:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800365a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800365e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003662:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003666:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800366a:	e841 2300 	strex	r3, r2, [r1]
 800366e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1d9      	bne.n	800362e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367e:	2b00      	cmp	r3, #0
 8003680:	d013      	beq.n	80036aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	4a7d      	ldr	r2, [pc, #500]	; (800387c <HAL_UART_IRQHandler+0x3dc>)
 8003688:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368e:	4618      	mov	r0, r3
 8003690:	f7fe fa14 	bl	8001abc <HAL_DMA_Abort_IT>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d016      	beq.n	80036c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036a4:	4610      	mov	r0, r2
 80036a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a8:	e00e      	b.n	80036c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f99a 	bl	80039e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b0:	e00a      	b.n	80036c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f996 	bl	80039e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b8:	e006      	b.n	80036c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f992 	bl	80039e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80036c6:	e170      	b.n	80039aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c8:	bf00      	nop
    return;
 80036ca:	e16e      	b.n	80039aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	f040 814a 	bne.w	800396a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 8143 	beq.w	800396a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80036e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 813c 	beq.w	800396a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036f2:	2300      	movs	r3, #0
 80036f4:	60bb      	str	r3, [r7, #8]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003712:	2b40      	cmp	r3, #64	; 0x40
 8003714:	f040 80b4 	bne.w	8003880 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003724:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 8140 	beq.w	80039ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003736:	429a      	cmp	r2, r3
 8003738:	f080 8139 	bcs.w	80039ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003742:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800374e:	f000 8088 	beq.w	8003862 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	330c      	adds	r3, #12
 8003758:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003760:	e853 3f00 	ldrex	r3, [r3]
 8003764:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003768:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800376c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003770:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	330c      	adds	r3, #12
 800377a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800377e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003782:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003786:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800378a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800378e:	e841 2300 	strex	r3, r2, [r1]
 8003792:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003796:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1d9      	bne.n	8003752 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3314      	adds	r3, #20
 80037a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037a8:	e853 3f00 	ldrex	r3, [r3]
 80037ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037b0:	f023 0301 	bic.w	r3, r3, #1
 80037b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3314      	adds	r3, #20
 80037be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037ce:	e841 2300 	strex	r3, r2, [r1]
 80037d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1e1      	bne.n	800379e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	3314      	adds	r3, #20
 80037e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037e4:	e853 3f00 	ldrex	r3, [r3]
 80037e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80037ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3314      	adds	r3, #20
 80037fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003800:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003802:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003804:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003806:	e841 2300 	strex	r3, r2, [r1]
 800380a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800380c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1e3      	bne.n	80037da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	330c      	adds	r3, #12
 8003826:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800382a:	e853 3f00 	ldrex	r3, [r3]
 800382e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003832:	f023 0310 	bic.w	r3, r3, #16
 8003836:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	330c      	adds	r3, #12
 8003840:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003844:	65ba      	str	r2, [r7, #88]	; 0x58
 8003846:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800384a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e3      	bne.n	8003820 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	4618      	mov	r0, r3
 800385e:	f7fe f8bd 	bl	80019dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800386a:	b29b      	uxth	r3, r3
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	b29b      	uxth	r3, r3
 8003870:	4619      	mov	r1, r3
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f8c0 	bl	80039f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003878:	e099      	b.n	80039ae <HAL_UART_IRQHandler+0x50e>
 800387a:	bf00      	nop
 800387c:	08003ad7 	.word	0x08003ad7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003888:	b29b      	uxth	r3, r3
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003894:	b29b      	uxth	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 808b 	beq.w	80039b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800389c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 8086 	beq.w	80039b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	330c      	adds	r3, #12
 80038ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b0:	e853 3f00 	ldrex	r3, [r3]
 80038b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	330c      	adds	r3, #12
 80038c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80038ca:	647a      	str	r2, [r7, #68]	; 0x44
 80038cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038d2:	e841 2300 	strex	r3, r2, [r1]
 80038d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e3      	bne.n	80038a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3314      	adds	r3, #20
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	e853 3f00 	ldrex	r3, [r3]
 80038ec:	623b      	str	r3, [r7, #32]
   return(result);
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	f023 0301 	bic.w	r3, r3, #1
 80038f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3314      	adds	r3, #20
 80038fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003902:	633a      	str	r2, [r7, #48]	; 0x30
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003906:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1e3      	bne.n	80038de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	330c      	adds	r3, #12
 800392a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	e853 3f00 	ldrex	r3, [r3]
 8003932:	60fb      	str	r3, [r7, #12]
   return(result);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0310 	bic.w	r3, r3, #16
 800393a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	330c      	adds	r3, #12
 8003944:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003948:	61fa      	str	r2, [r7, #28]
 800394a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394c:	69b9      	ldr	r1, [r7, #24]
 800394e:	69fa      	ldr	r2, [r7, #28]
 8003950:	e841 2300 	strex	r3, r2, [r1]
 8003954:	617b      	str	r3, [r7, #20]
   return(result);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e3      	bne.n	8003924 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800395c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003960:	4619      	mov	r1, r3
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f848 	bl	80039f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003968:	e023      	b.n	80039b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800396a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800396e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003972:	2b00      	cmp	r3, #0
 8003974:	d009      	beq.n	800398a <HAL_UART_IRQHandler+0x4ea>
 8003976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800397a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f8bb 	bl	8003afe <UART_Transmit_IT>
    return;
 8003988:	e014      	b.n	80039b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800398a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800398e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00e      	beq.n	80039b4 <HAL_UART_IRQHandler+0x514>
 8003996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800399a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d008      	beq.n	80039b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f8fb 	bl	8003b9e <UART_EndTransmit_IT>
    return;
 80039a8:	e004      	b.n	80039b4 <HAL_UART_IRQHandler+0x514>
    return;
 80039aa:	bf00      	nop
 80039ac:	e002      	b.n	80039b4 <HAL_UART_IRQHandler+0x514>
      return;
 80039ae:	bf00      	nop
 80039b0:	e000      	b.n	80039b4 <HAL_UART_IRQHandler+0x514>
      return;
 80039b2:	bf00      	nop
  }
}
 80039b4:	37e8      	adds	r7, #232	; 0xe8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop

080039bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	460b      	mov	r3, r1
 8003a02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b095      	sub	sp, #84	; 0x54
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	330c      	adds	r3, #12
 8003a1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	330c      	adds	r3, #12
 8003a36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a38:	643a      	str	r2, [r7, #64]	; 0x40
 8003a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a40:	e841 2300 	strex	r3, r2, [r1]
 8003a44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e5      	bne.n	8003a18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	3314      	adds	r3, #20
 8003a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	e853 3f00 	ldrex	r3, [r3]
 8003a5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f023 0301 	bic.w	r3, r3, #1
 8003a62:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3314      	adds	r3, #20
 8003a6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a74:	e841 2300 	strex	r3, r2, [r1]
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1e5      	bne.n	8003a4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d119      	bne.n	8003abc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	330c      	adds	r3, #12
 8003a8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	e853 3f00 	ldrex	r3, [r3]
 8003a96:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f023 0310 	bic.w	r3, r3, #16
 8003a9e:	647b      	str	r3, [r7, #68]	; 0x44
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	330c      	adds	r3, #12
 8003aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003aa8:	61ba      	str	r2, [r7, #24]
 8003aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aac:	6979      	ldr	r1, [r7, #20]
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	e841 2300 	strex	r3, r2, [r1]
 8003ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e5      	bne.n	8003a88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003aca:	bf00      	nop
 8003acc:	3754      	adds	r7, #84	; 0x54
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b084      	sub	sp, #16
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f7ff ff77 	bl	80039e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003af6:	bf00      	nop
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b085      	sub	sp, #20
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b21      	cmp	r3, #33	; 0x21
 8003b10:	d13e      	bne.n	8003b90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b1a:	d114      	bne.n	8003b46 <UART_Transmit_IT+0x48>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d110      	bne.n	8003b46 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	1c9a      	adds	r2, r3, #2
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	621a      	str	r2, [r3, #32]
 8003b44:	e008      	b.n	8003b58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	1c59      	adds	r1, r3, #1
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6211      	str	r1, [r2, #32]
 8003b50:	781a      	ldrb	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	4619      	mov	r1, r3
 8003b66:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10f      	bne.n	8003b8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	e000      	b.n	8003b92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b90:	2302      	movs	r3, #2
  }
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff fefc 	bl	80039bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b08c      	sub	sp, #48	; 0x30
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b22      	cmp	r3, #34	; 0x22
 8003be0:	f040 80ab 	bne.w	8003d3a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bec:	d117      	bne.n	8003c1e <UART_Receive_IT+0x50>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d113      	bne.n	8003c1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	1c9a      	adds	r2, r3, #2
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c1c:	e026      	b.n	8003c6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c30:	d007      	beq.n	8003c42 <UART_Receive_IT+0x74>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <UART_Receive_IT+0x82>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4c:	701a      	strb	r2, [r3, #0]
 8003c4e:	e008      	b.n	8003c62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	4619      	mov	r1, r3
 8003c7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d15a      	bne.n	8003d36 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0220 	bic.w	r2, r2, #32
 8003c8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0201 	bic.w	r2, r2, #1
 8003cae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d135      	bne.n	8003d2c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	330c      	adds	r3, #12
 8003ccc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	f023 0310 	bic.w	r3, r3, #16
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	330c      	adds	r3, #12
 8003ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce6:	623a      	str	r2, [r7, #32]
 8003ce8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cea:	69f9      	ldr	r1, [r7, #28]
 8003cec:	6a3a      	ldr	r2, [r7, #32]
 8003cee:	e841 2300 	strex	r3, r2, [r1]
 8003cf2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e5      	bne.n	8003cc6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0310 	and.w	r3, r3, #16
 8003d04:	2b10      	cmp	r3, #16
 8003d06:	d10a      	bne.n	8003d1e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d22:	4619      	mov	r1, r3
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff fe67 	bl	80039f8 <HAL_UARTEx_RxEventCallback>
 8003d2a:	e002      	b.n	8003d32 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff fe4f 	bl	80039d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	e002      	b.n	8003d3c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	e000      	b.n	8003d3c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003d3a:	2302      	movs	r3, #2
  }
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3730      	adds	r7, #48	; 0x30
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d48:	b0c0      	sub	sp, #256	; 0x100
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d60:	68d9      	ldr	r1, [r3, #12]
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	ea40 0301 	orr.w	r3, r0, r1
 8003d6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d9c:	f021 010c 	bic.w	r1, r1, #12
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003daa:	430b      	orrs	r3, r1
 8003dac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dbe:	6999      	ldr	r1, [r3, #24]
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	ea40 0301 	orr.w	r3, r0, r1
 8003dca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4b8f      	ldr	r3, [pc, #572]	; (8004010 <UART_SetConfig+0x2cc>)
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d005      	beq.n	8003de4 <UART_SetConfig+0xa0>
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	4b8d      	ldr	r3, [pc, #564]	; (8004014 <UART_SetConfig+0x2d0>)
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d104      	bne.n	8003dee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003de4:	f7fe fdfa 	bl	80029dc <HAL_RCC_GetPCLK2Freq>
 8003de8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003dec:	e003      	b.n	8003df6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dee:	f7fe fde1 	bl	80029b4 <HAL_RCC_GetPCLK1Freq>
 8003df2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e00:	f040 810c 	bne.w	800401c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e16:	4622      	mov	r2, r4
 8003e18:	462b      	mov	r3, r5
 8003e1a:	1891      	adds	r1, r2, r2
 8003e1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e1e:	415b      	adcs	r3, r3
 8003e20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e26:	4621      	mov	r1, r4
 8003e28:	eb12 0801 	adds.w	r8, r2, r1
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	eb43 0901 	adc.w	r9, r3, r1
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	f04f 0300 	mov.w	r3, #0
 8003e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e46:	4690      	mov	r8, r2
 8003e48:	4699      	mov	r9, r3
 8003e4a:	4623      	mov	r3, r4
 8003e4c:	eb18 0303 	adds.w	r3, r8, r3
 8003e50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e54:	462b      	mov	r3, r5
 8003e56:	eb49 0303 	adc.w	r3, r9, r3
 8003e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e72:	460b      	mov	r3, r1
 8003e74:	18db      	adds	r3, r3, r3
 8003e76:	653b      	str	r3, [r7, #80]	; 0x50
 8003e78:	4613      	mov	r3, r2
 8003e7a:	eb42 0303 	adc.w	r3, r2, r3
 8003e7e:	657b      	str	r3, [r7, #84]	; 0x54
 8003e80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e88:	f7fc f9aa 	bl	80001e0 <__aeabi_uldivmod>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4b61      	ldr	r3, [pc, #388]	; (8004018 <UART_SetConfig+0x2d4>)
 8003e92:	fba3 2302 	umull	r2, r3, r3, r2
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	011c      	lsls	r4, r3, #4
 8003e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ea4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ea8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003eac:	4642      	mov	r2, r8
 8003eae:	464b      	mov	r3, r9
 8003eb0:	1891      	adds	r1, r2, r2
 8003eb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003eb4:	415b      	adcs	r3, r3
 8003eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ebc:	4641      	mov	r1, r8
 8003ebe:	eb12 0a01 	adds.w	sl, r2, r1
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ed4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003edc:	4692      	mov	sl, r2
 8003ede:	469b      	mov	fp, r3
 8003ee0:	4643      	mov	r3, r8
 8003ee2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ee6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003eea:	464b      	mov	r3, r9
 8003eec:	eb4b 0303 	adc.w	r3, fp, r3
 8003ef0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	18db      	adds	r3, r3, r3
 8003f0c:	643b      	str	r3, [r7, #64]	; 0x40
 8003f0e:	4613      	mov	r3, r2
 8003f10:	eb42 0303 	adc.w	r3, r2, r3
 8003f14:	647b      	str	r3, [r7, #68]	; 0x44
 8003f16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f1e:	f7fc f95f 	bl	80001e0 <__aeabi_uldivmod>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	4b3b      	ldr	r3, [pc, #236]	; (8004018 <UART_SetConfig+0x2d4>)
 8003f2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	2264      	movs	r2, #100	; 0x64
 8003f32:	fb02 f303 	mul.w	r3, r2, r3
 8003f36:	1acb      	subs	r3, r1, r3
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f3e:	4b36      	ldr	r3, [pc, #216]	; (8004018 <UART_SetConfig+0x2d4>)
 8003f40:	fba3 2302 	umull	r2, r3, r3, r2
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f4c:	441c      	add	r4, r3
 8003f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f52:	2200      	movs	r2, #0
 8003f54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f60:	4642      	mov	r2, r8
 8003f62:	464b      	mov	r3, r9
 8003f64:	1891      	adds	r1, r2, r2
 8003f66:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f68:	415b      	adcs	r3, r3
 8003f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f70:	4641      	mov	r1, r8
 8003f72:	1851      	adds	r1, r2, r1
 8003f74:	6339      	str	r1, [r7, #48]	; 0x30
 8003f76:	4649      	mov	r1, r9
 8003f78:	414b      	adcs	r3, r1
 8003f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f88:	4659      	mov	r1, fp
 8003f8a:	00cb      	lsls	r3, r1, #3
 8003f8c:	4651      	mov	r1, sl
 8003f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f92:	4651      	mov	r1, sl
 8003f94:	00ca      	lsls	r2, r1, #3
 8003f96:	4610      	mov	r0, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4642      	mov	r2, r8
 8003f9e:	189b      	adds	r3, r3, r2
 8003fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fa4:	464b      	mov	r3, r9
 8003fa6:	460a      	mov	r2, r1
 8003fa8:	eb42 0303 	adc.w	r3, r2, r3
 8003fac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003fbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003fc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	18db      	adds	r3, r3, r3
 8003fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fca:	4613      	mov	r3, r2
 8003fcc:	eb42 0303 	adc.w	r3, r2, r3
 8003fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003fda:	f7fc f901 	bl	80001e0 <__aeabi_uldivmod>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	; (8004018 <UART_SetConfig+0x2d4>)
 8003fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	2164      	movs	r1, #100	; 0x64
 8003fec:	fb01 f303 	mul.w	r3, r1, r3
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	3332      	adds	r3, #50	; 0x32
 8003ff6:	4a08      	ldr	r2, [pc, #32]	; (8004018 <UART_SetConfig+0x2d4>)
 8003ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffc:	095b      	lsrs	r3, r3, #5
 8003ffe:	f003 0207 	and.w	r2, r3, #7
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4422      	add	r2, r4
 800400a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800400c:	e105      	b.n	800421a <UART_SetConfig+0x4d6>
 800400e:	bf00      	nop
 8004010:	40011000 	.word	0x40011000
 8004014:	40011400 	.word	0x40011400
 8004018:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800401c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004020:	2200      	movs	r2, #0
 8004022:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004026:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800402a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800402e:	4642      	mov	r2, r8
 8004030:	464b      	mov	r3, r9
 8004032:	1891      	adds	r1, r2, r2
 8004034:	6239      	str	r1, [r7, #32]
 8004036:	415b      	adcs	r3, r3
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
 800403a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800403e:	4641      	mov	r1, r8
 8004040:	1854      	adds	r4, r2, r1
 8004042:	4649      	mov	r1, r9
 8004044:	eb43 0501 	adc.w	r5, r3, r1
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	00eb      	lsls	r3, r5, #3
 8004052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004056:	00e2      	lsls	r2, r4, #3
 8004058:	4614      	mov	r4, r2
 800405a:	461d      	mov	r5, r3
 800405c:	4643      	mov	r3, r8
 800405e:	18e3      	adds	r3, r4, r3
 8004060:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004064:	464b      	mov	r3, r9
 8004066:	eb45 0303 	adc.w	r3, r5, r3
 800406a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800407a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800408a:	4629      	mov	r1, r5
 800408c:	008b      	lsls	r3, r1, #2
 800408e:	4621      	mov	r1, r4
 8004090:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004094:	4621      	mov	r1, r4
 8004096:	008a      	lsls	r2, r1, #2
 8004098:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800409c:	f7fc f8a0 	bl	80001e0 <__aeabi_uldivmod>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4b60      	ldr	r3, [pc, #384]	; (8004228 <UART_SetConfig+0x4e4>)
 80040a6:	fba3 2302 	umull	r2, r3, r3, r2
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	011c      	lsls	r4, r3, #4
 80040ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80040c0:	4642      	mov	r2, r8
 80040c2:	464b      	mov	r3, r9
 80040c4:	1891      	adds	r1, r2, r2
 80040c6:	61b9      	str	r1, [r7, #24]
 80040c8:	415b      	adcs	r3, r3
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040d0:	4641      	mov	r1, r8
 80040d2:	1851      	adds	r1, r2, r1
 80040d4:	6139      	str	r1, [r7, #16]
 80040d6:	4649      	mov	r1, r9
 80040d8:	414b      	adcs	r3, r1
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040e8:	4659      	mov	r1, fp
 80040ea:	00cb      	lsls	r3, r1, #3
 80040ec:	4651      	mov	r1, sl
 80040ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040f2:	4651      	mov	r1, sl
 80040f4:	00ca      	lsls	r2, r1, #3
 80040f6:	4610      	mov	r0, r2
 80040f8:	4619      	mov	r1, r3
 80040fa:	4603      	mov	r3, r0
 80040fc:	4642      	mov	r2, r8
 80040fe:	189b      	adds	r3, r3, r2
 8004100:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004104:	464b      	mov	r3, r9
 8004106:	460a      	mov	r2, r1
 8004108:	eb42 0303 	adc.w	r3, r2, r3
 800410c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	67bb      	str	r3, [r7, #120]	; 0x78
 800411a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004128:	4649      	mov	r1, r9
 800412a:	008b      	lsls	r3, r1, #2
 800412c:	4641      	mov	r1, r8
 800412e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004132:	4641      	mov	r1, r8
 8004134:	008a      	lsls	r2, r1, #2
 8004136:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800413a:	f7fc f851 	bl	80001e0 <__aeabi_uldivmod>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4b39      	ldr	r3, [pc, #228]	; (8004228 <UART_SetConfig+0x4e4>)
 8004144:	fba3 1302 	umull	r1, r3, r3, r2
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	2164      	movs	r1, #100	; 0x64
 800414c:	fb01 f303 	mul.w	r3, r1, r3
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	3332      	adds	r3, #50	; 0x32
 8004156:	4a34      	ldr	r2, [pc, #208]	; (8004228 <UART_SetConfig+0x4e4>)
 8004158:	fba2 2303 	umull	r2, r3, r2, r3
 800415c:	095b      	lsrs	r3, r3, #5
 800415e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004162:	441c      	add	r4, r3
 8004164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004168:	2200      	movs	r2, #0
 800416a:	673b      	str	r3, [r7, #112]	; 0x70
 800416c:	677a      	str	r2, [r7, #116]	; 0x74
 800416e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004172:	4642      	mov	r2, r8
 8004174:	464b      	mov	r3, r9
 8004176:	1891      	adds	r1, r2, r2
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	415b      	adcs	r3, r3
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004182:	4641      	mov	r1, r8
 8004184:	1851      	adds	r1, r2, r1
 8004186:	6039      	str	r1, [r7, #0]
 8004188:	4649      	mov	r1, r9
 800418a:	414b      	adcs	r3, r1
 800418c:	607b      	str	r3, [r7, #4]
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800419a:	4659      	mov	r1, fp
 800419c:	00cb      	lsls	r3, r1, #3
 800419e:	4651      	mov	r1, sl
 80041a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041a4:	4651      	mov	r1, sl
 80041a6:	00ca      	lsls	r2, r1, #3
 80041a8:	4610      	mov	r0, r2
 80041aa:	4619      	mov	r1, r3
 80041ac:	4603      	mov	r3, r0
 80041ae:	4642      	mov	r2, r8
 80041b0:	189b      	adds	r3, r3, r2
 80041b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80041b4:	464b      	mov	r3, r9
 80041b6:	460a      	mov	r2, r1
 80041b8:	eb42 0303 	adc.w	r3, r2, r3
 80041bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	663b      	str	r3, [r7, #96]	; 0x60
 80041c8:	667a      	str	r2, [r7, #100]	; 0x64
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80041d6:	4649      	mov	r1, r9
 80041d8:	008b      	lsls	r3, r1, #2
 80041da:	4641      	mov	r1, r8
 80041dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041e0:	4641      	mov	r1, r8
 80041e2:	008a      	lsls	r2, r1, #2
 80041e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041e8:	f7fb fffa 	bl	80001e0 <__aeabi_uldivmod>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4b0d      	ldr	r3, [pc, #52]	; (8004228 <UART_SetConfig+0x4e4>)
 80041f2:	fba3 1302 	umull	r1, r3, r3, r2
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	2164      	movs	r1, #100	; 0x64
 80041fa:	fb01 f303 	mul.w	r3, r1, r3
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	3332      	adds	r3, #50	; 0x32
 8004204:	4a08      	ldr	r2, [pc, #32]	; (8004228 <UART_SetConfig+0x4e4>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	f003 020f 	and.w	r2, r3, #15
 8004210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4422      	add	r2, r4
 8004218:	609a      	str	r2, [r3, #8]
}
 800421a:	bf00      	nop
 800421c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004220:	46bd      	mov	sp, r7
 8004222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004226:	bf00      	nop
 8004228:	51eb851f 	.word	0x51eb851f

0800422c <__NVIC_SetPriority>:
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	6039      	str	r1, [r7, #0]
 8004236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423c:	2b00      	cmp	r3, #0
 800423e:	db0a      	blt.n	8004256 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	b2da      	uxtb	r2, r3
 8004244:	490c      	ldr	r1, [pc, #48]	; (8004278 <__NVIC_SetPriority+0x4c>)
 8004246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424a:	0112      	lsls	r2, r2, #4
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	440b      	add	r3, r1
 8004250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004254:	e00a      	b.n	800426c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	b2da      	uxtb	r2, r3
 800425a:	4908      	ldr	r1, [pc, #32]	; (800427c <__NVIC_SetPriority+0x50>)
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	3b04      	subs	r3, #4
 8004264:	0112      	lsls	r2, r2, #4
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	440b      	add	r3, r1
 800426a:	761a      	strb	r2, [r3, #24]
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	e000e100 	.word	0xe000e100
 800427c:	e000ed00 	.word	0xe000ed00

08004280 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004284:	4b05      	ldr	r3, [pc, #20]	; (800429c <SysTick_Handler+0x1c>)
 8004286:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004288:	f001 fcfe 	bl	8005c88 <xTaskGetSchedulerState>
 800428c:	4603      	mov	r3, r0
 800428e:	2b01      	cmp	r3, #1
 8004290:	d001      	beq.n	8004296 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004292:	f002 fae9 	bl	8006868 <xPortSysTickHandler>
  }
}
 8004296:	bf00      	nop
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	e000e010 	.word	0xe000e010

080042a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80042a4:	2100      	movs	r1, #0
 80042a6:	f06f 0004 	mvn.w	r0, #4
 80042aa:	f7ff ffbf 	bl	800422c <__NVIC_SetPriority>
#endif
}
 80042ae:	bf00      	nop
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042ba:	f3ef 8305 	mrs	r3, IPSR
 80042be:	603b      	str	r3, [r7, #0]
  return(result);
 80042c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80042c6:	f06f 0305 	mvn.w	r3, #5
 80042ca:	607b      	str	r3, [r7, #4]
 80042cc:	e00c      	b.n	80042e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80042ce:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <osKernelInitialize+0x44>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d105      	bne.n	80042e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80042d6:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <osKernelInitialize+0x44>)
 80042d8:	2201      	movs	r2, #1
 80042da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80042dc:	2300      	movs	r3, #0
 80042de:	607b      	str	r3, [r7, #4]
 80042e0:	e002      	b.n	80042e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80042e2:	f04f 33ff 	mov.w	r3, #4294967295
 80042e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042e8:	687b      	ldr	r3, [r7, #4]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	20000208 	.word	0x20000208

080042fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004302:	f3ef 8305 	mrs	r3, IPSR
 8004306:	603b      	str	r3, [r7, #0]
  return(result);
 8004308:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <osKernelStart+0x1a>
    stat = osErrorISR;
 800430e:	f06f 0305 	mvn.w	r3, #5
 8004312:	607b      	str	r3, [r7, #4]
 8004314:	e010      	b.n	8004338 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004316:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <osKernelStart+0x48>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d109      	bne.n	8004332 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800431e:	f7ff ffbf 	bl	80042a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004322:	4b08      	ldr	r3, [pc, #32]	; (8004344 <osKernelStart+0x48>)
 8004324:	2202      	movs	r2, #2
 8004326:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004328:	f001 f866 	bl	80053f8 <vTaskStartScheduler>
      stat = osOK;
 800432c:	2300      	movs	r3, #0
 800432e:	607b      	str	r3, [r7, #4]
 8004330:	e002      	b.n	8004338 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004332:	f04f 33ff 	mov.w	r3, #4294967295
 8004336:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004338:	687b      	ldr	r3, [r7, #4]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	20000208 	.word	0x20000208

08004348 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004348:	b580      	push	{r7, lr}
 800434a:	b08e      	sub	sp, #56	; 0x38
 800434c:	af04      	add	r7, sp, #16
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004354:	2300      	movs	r3, #0
 8004356:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004358:	f3ef 8305 	mrs	r3, IPSR
 800435c:	617b      	str	r3, [r7, #20]
  return(result);
 800435e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004360:	2b00      	cmp	r3, #0
 8004362:	d17e      	bne.n	8004462 <osThreadNew+0x11a>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d07b      	beq.n	8004462 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800436a:	2380      	movs	r3, #128	; 0x80
 800436c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800436e:	2318      	movs	r3, #24
 8004370:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004372:	2300      	movs	r3, #0
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004376:	f04f 33ff 	mov.w	r3, #4294967295
 800437a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d045      	beq.n	800440e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <osThreadNew+0x48>
        name = attr->name;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <osThreadNew+0x6e>
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	2b38      	cmp	r3, #56	; 0x38
 80043a8:	d805      	bhi.n	80043b6 <osThreadNew+0x6e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <osThreadNew+0x72>
        return (NULL);
 80043b6:	2300      	movs	r3, #0
 80043b8:	e054      	b.n	8004464 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	089b      	lsrs	r3, r3, #2
 80043c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00e      	beq.n	80043f0 <osThreadNew+0xa8>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	2b5b      	cmp	r3, #91	; 0x5b
 80043d8:	d90a      	bls.n	80043f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d006      	beq.n	80043f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <osThreadNew+0xa8>
        mem = 1;
 80043ea:	2301      	movs	r3, #1
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	e010      	b.n	8004412 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10c      	bne.n	8004412 <osThreadNew+0xca>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d108      	bne.n	8004412 <osThreadNew+0xca>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d104      	bne.n	8004412 <osThreadNew+0xca>
          mem = 0;
 8004408:	2300      	movs	r3, #0
 800440a:	61bb      	str	r3, [r7, #24]
 800440c:	e001      	b.n	8004412 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800440e:	2300      	movs	r3, #0
 8004410:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d110      	bne.n	800443a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004420:	9202      	str	r2, [sp, #8]
 8004422:	9301      	str	r3, [sp, #4]
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	6a3a      	ldr	r2, [r7, #32]
 800442c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 fe0c 	bl	800504c <xTaskCreateStatic>
 8004434:	4603      	mov	r3, r0
 8004436:	613b      	str	r3, [r7, #16]
 8004438:	e013      	b.n	8004462 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d110      	bne.n	8004462 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	b29a      	uxth	r2, r3
 8004444:	f107 0310 	add.w	r3, r7, #16
 8004448:	9301      	str	r3, [sp, #4]
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 fe57 	bl	8005106 <xTaskCreate>
 8004458:	4603      	mov	r3, r0
 800445a:	2b01      	cmp	r3, #1
 800445c:	d001      	beq.n	8004462 <osThreadNew+0x11a>
            hTask = NULL;
 800445e:	2300      	movs	r3, #0
 8004460:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004462:	693b      	ldr	r3, [r7, #16]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3728      	adds	r7, #40	; 0x28
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004474:	f3ef 8305 	mrs	r3, IPSR
 8004478:	60bb      	str	r3, [r7, #8]
  return(result);
 800447a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <osDelay+0x1c>
    stat = osErrorISR;
 8004480:	f06f 0305 	mvn.w	r3, #5
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	e007      	b.n	8004498 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 ff7c 	bl	8005390 <vTaskDelay>
    }
  }

  return (stat);
 8004498:	68fb      	ldr	r3, [r7, #12]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4a07      	ldr	r2, [pc, #28]	; (80044d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80044b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4a06      	ldr	r2, [pc, #24]	; (80044d4 <vApplicationGetIdleTaskMemory+0x30>)
 80044ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2280      	movs	r2, #128	; 0x80
 80044c0:	601a      	str	r2, [r3, #0]
}
 80044c2:	bf00      	nop
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	2000020c 	.word	0x2000020c
 80044d4:	20000268 	.word	0x20000268

080044d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4a07      	ldr	r2, [pc, #28]	; (8004504 <vApplicationGetTimerTaskMemory+0x2c>)
 80044e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	4a06      	ldr	r2, [pc, #24]	; (8004508 <vApplicationGetTimerTaskMemory+0x30>)
 80044ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044f6:	601a      	str	r2, [r3, #0]
}
 80044f8:	bf00      	nop
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	20000468 	.word	0x20000468
 8004508:	200004c4 	.word	0x200004c4

0800450c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f103 0208 	add.w	r2, r3, #8
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f04f 32ff 	mov.w	r2, #4294967295
 8004524:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f103 0208 	add.w	r2, r3, #8
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f103 0208 	add.w	r2, r3, #8
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004566:	b480      	push	{r7}
 8004568:	b085      	sub	sp, #20
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	601a      	str	r2, [r3, #0]
}
 80045a2:	bf00      	nop
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045ae:	b480      	push	{r7}
 80045b0:	b085      	sub	sp, #20
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c4:	d103      	bne.n	80045ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	e00c      	b.n	80045e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3308      	adds	r3, #8
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	e002      	b.n	80045dc <vListInsert+0x2e>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d2f6      	bcs.n	80045d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	601a      	str	r2, [r3, #0]
}
 8004614:	bf00      	nop
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6892      	ldr	r2, [r2, #8]
 8004636:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6852      	ldr	r2, [r2, #4]
 8004640:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	429a      	cmp	r2, r3
 800464a:	d103      	bne.n	8004654 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	1e5a      	subs	r2, r3, #1
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10a      	bne.n	800469e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800469a:	bf00      	nop
 800469c:	e7fe      	b.n	800469c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800469e:	f002 f851 	bl	8006744 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	68f9      	ldr	r1, [r7, #12]
 80046ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046ae:	fb01 f303 	mul.w	r3, r1, r3
 80046b2:	441a      	add	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ce:	3b01      	subs	r3, #1
 80046d0:	68f9      	ldr	r1, [r7, #12]
 80046d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046d4:	fb01 f303 	mul.w	r3, r1, r3
 80046d8:	441a      	add	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	22ff      	movs	r2, #255	; 0xff
 80046e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	22ff      	movs	r2, #255	; 0xff
 80046ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d114      	bne.n	800471e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01a      	beq.n	8004732 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	3310      	adds	r3, #16
 8004700:	4618      	mov	r0, r3
 8004702:	f001 f903 	bl	800590c <xTaskRemoveFromEventList>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d012      	beq.n	8004732 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800470c:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <xQueueGenericReset+0xcc>)
 800470e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	e009      	b.n	8004732 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	3310      	adds	r3, #16
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff fef2 	bl	800450c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	3324      	adds	r3, #36	; 0x24
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff feed 	bl	800450c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004732:	f002 f837 	bl	80067a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004736:	2301      	movs	r3, #1
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	e000ed04 	.word	0xe000ed04

08004744 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08e      	sub	sp, #56	; 0x38
 8004748:	af02      	add	r7, sp, #8
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10a      	bne.n	800476e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800476a:	bf00      	nop
 800476c:	e7fe      	b.n	800476c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10a      	bne.n	800478a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004786:	bf00      	nop
 8004788:	e7fe      	b.n	8004788 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <xQueueGenericCreateStatic+0x52>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <xQueueGenericCreateStatic+0x56>
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <xQueueGenericCreateStatic+0x58>
 800479a:	2300      	movs	r3, #0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10a      	bne.n	80047b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	623b      	str	r3, [r7, #32]
}
 80047b2:	bf00      	nop
 80047b4:	e7fe      	b.n	80047b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d102      	bne.n	80047c2 <xQueueGenericCreateStatic+0x7e>
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <xQueueGenericCreateStatic+0x82>
 80047c2:	2301      	movs	r3, #1
 80047c4:	e000      	b.n	80047c8 <xQueueGenericCreateStatic+0x84>
 80047c6:	2300      	movs	r3, #0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10a      	bne.n	80047e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80047cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	61fb      	str	r3, [r7, #28]
}
 80047de:	bf00      	nop
 80047e0:	e7fe      	b.n	80047e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80047e2:	2350      	movs	r3, #80	; 0x50
 80047e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b50      	cmp	r3, #80	; 0x50
 80047ea:	d00a      	beq.n	8004802 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80047ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	61bb      	str	r3, [r7, #24]
}
 80047fe:	bf00      	nop
 8004800:	e7fe      	b.n	8004800 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004802:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00d      	beq.n	800482a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800480e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004816:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	4613      	mov	r3, r2
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	68b9      	ldr	r1, [r7, #8]
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 f805 	bl	8004834 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800482a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800482c:	4618      	mov	r0, r3
 800482e:	3730      	adds	r7, #48	; 0x30
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d103      	bne.n	8004850 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	e002      	b.n	8004856 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004862:	2101      	movs	r1, #1
 8004864:	69b8      	ldr	r0, [r7, #24]
 8004866:	f7ff ff05 	bl	8004674 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	78fa      	ldrb	r2, [r7, #3]
 800486e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004872:	bf00      	nop
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08e      	sub	sp, #56	; 0x38
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800488a:	2300      	movs	r3, #0
 800488c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10a      	bne.n	80048ae <xQueueGenericSend+0x32>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048aa:	bf00      	nop
 80048ac:	e7fe      	b.n	80048ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d103      	bne.n	80048bc <xQueueGenericSend+0x40>
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <xQueueGenericSend+0x44>
 80048bc:	2301      	movs	r3, #1
 80048be:	e000      	b.n	80048c2 <xQueueGenericSend+0x46>
 80048c0:	2300      	movs	r3, #0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10a      	bne.n	80048dc <xQueueGenericSend+0x60>
	__asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048d8:	bf00      	nop
 80048da:	e7fe      	b.n	80048da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d103      	bne.n	80048ea <xQueueGenericSend+0x6e>
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <xQueueGenericSend+0x72>
 80048ea:	2301      	movs	r3, #1
 80048ec:	e000      	b.n	80048f0 <xQueueGenericSend+0x74>
 80048ee:	2300      	movs	r3, #0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10a      	bne.n	800490a <xQueueGenericSend+0x8e>
	__asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	623b      	str	r3, [r7, #32]
}
 8004906:	bf00      	nop
 8004908:	e7fe      	b.n	8004908 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800490a:	f001 f9bd 	bl	8005c88 <xTaskGetSchedulerState>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d102      	bne.n	800491a <xQueueGenericSend+0x9e>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <xQueueGenericSend+0xa2>
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <xQueueGenericSend+0xa4>
 800491e:	2300      	movs	r3, #0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10a      	bne.n	800493a <xQueueGenericSend+0xbe>
	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	61fb      	str	r3, [r7, #28]
}
 8004936:	bf00      	nop
 8004938:	e7fe      	b.n	8004938 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800493a:	f001 ff03 	bl	8006744 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004946:	429a      	cmp	r2, r3
 8004948:	d302      	bcc.n	8004950 <xQueueGenericSend+0xd4>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b02      	cmp	r3, #2
 800494e:	d129      	bne.n	80049a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	68b9      	ldr	r1, [r7, #8]
 8004954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004956:	f000 fa0b 	bl	8004d70 <prvCopyDataToQueue>
 800495a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	2b00      	cmp	r3, #0
 8004962:	d010      	beq.n	8004986 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004966:	3324      	adds	r3, #36	; 0x24
 8004968:	4618      	mov	r0, r3
 800496a:	f000 ffcf 	bl	800590c <xTaskRemoveFromEventList>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d013      	beq.n	800499c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004974:	4b3f      	ldr	r3, [pc, #252]	; (8004a74 <xQueueGenericSend+0x1f8>)
 8004976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	f3bf 8f6f 	isb	sy
 8004984:	e00a      	b.n	800499c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d007      	beq.n	800499c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800498c:	4b39      	ldr	r3, [pc, #228]	; (8004a74 <xQueueGenericSend+0x1f8>)
 800498e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800499c:	f001 ff02 	bl	80067a4 <vPortExitCritical>
				return pdPASS;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e063      	b.n	8004a6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d103      	bne.n	80049b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049aa:	f001 fefb 	bl	80067a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	e05c      	b.n	8004a6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d106      	bne.n	80049c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049b8:	f107 0314 	add.w	r3, r7, #20
 80049bc:	4618      	mov	r0, r3
 80049be:	f001 f809 	bl	80059d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049c2:	2301      	movs	r3, #1
 80049c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049c6:	f001 feed 	bl	80067a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049ca:	f000 fd7b 	bl	80054c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049ce:	f001 feb9 	bl	8006744 <vPortEnterCritical>
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049d8:	b25b      	sxtb	r3, r3
 80049da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049de:	d103      	bne.n	80049e8 <xQueueGenericSend+0x16c>
 80049e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049ee:	b25b      	sxtb	r3, r3
 80049f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f4:	d103      	bne.n	80049fe <xQueueGenericSend+0x182>
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049fe:	f001 fed1 	bl	80067a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a02:	1d3a      	adds	r2, r7, #4
 8004a04:	f107 0314 	add.w	r3, r7, #20
 8004a08:	4611      	mov	r1, r2
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 fff8 	bl	8005a00 <xTaskCheckForTimeOut>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d124      	bne.n	8004a60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a18:	f000 faa2 	bl	8004f60 <prvIsQueueFull>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d018      	beq.n	8004a54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a24:	3310      	adds	r3, #16
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	4611      	mov	r1, r2
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 ff1e 	bl	800586c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a32:	f000 fa2d 	bl	8004e90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a36:	f000 fd53 	bl	80054e0 <xTaskResumeAll>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f47f af7c 	bne.w	800493a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004a42:	4b0c      	ldr	r3, [pc, #48]	; (8004a74 <xQueueGenericSend+0x1f8>)
 8004a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	e772      	b.n	800493a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a56:	f000 fa1b 	bl	8004e90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a5a:	f000 fd41 	bl	80054e0 <xTaskResumeAll>
 8004a5e:	e76c      	b.n	800493a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a62:	f000 fa15 	bl	8004e90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a66:	f000 fd3b 	bl	80054e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3738      	adds	r7, #56	; 0x38
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	e000ed04 	.word	0xe000ed04

08004a78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b090      	sub	sp, #64	; 0x40
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10a      	bne.n	8004aa6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004aa2:	bf00      	nop
 8004aa4:	e7fe      	b.n	8004aa4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d103      	bne.n	8004ab4 <xQueueGenericSendFromISR+0x3c>
 8004aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <xQueueGenericSendFromISR+0x40>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e000      	b.n	8004aba <xQueueGenericSendFromISR+0x42>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10a      	bne.n	8004ad4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ad0:	bf00      	nop
 8004ad2:	e7fe      	b.n	8004ad2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d103      	bne.n	8004ae2 <xQueueGenericSendFromISR+0x6a>
 8004ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <xQueueGenericSendFromISR+0x6e>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <xQueueGenericSendFromISR+0x70>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10a      	bne.n	8004b02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	623b      	str	r3, [r7, #32]
}
 8004afe:	bf00      	nop
 8004b00:	e7fe      	b.n	8004b00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b02:	f001 ff01 	bl	8006908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b06:	f3ef 8211 	mrs	r2, BASEPRI
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	61fa      	str	r2, [r7, #28]
 8004b1c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d302      	bcc.n	8004b34 <xQueueGenericSendFromISR+0xbc>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d12f      	bne.n	8004b94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	68b9      	ldr	r1, [r7, #8]
 8004b48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b4a:	f000 f911 	bl	8004d70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b56:	d112      	bne.n	8004b7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d016      	beq.n	8004b8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b62:	3324      	adds	r3, #36	; 0x24
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fed1 	bl	800590c <xTaskRemoveFromEventList>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00e      	beq.n	8004b8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00b      	beq.n	8004b8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	e007      	b.n	8004b8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b82:	3301      	adds	r3, #1
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	b25a      	sxtb	r2, r3
 8004b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004b92:	e001      	b.n	8004b98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ba2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3740      	adds	r7, #64	; 0x40
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08c      	sub	sp, #48	; 0x30
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10a      	bne.n	8004be0 <xQueueReceive+0x30>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	623b      	str	r3, [r7, #32]
}
 8004bdc:	bf00      	nop
 8004bde:	e7fe      	b.n	8004bde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d103      	bne.n	8004bee <xQueueReceive+0x3e>
 8004be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <xQueueReceive+0x42>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e000      	b.n	8004bf4 <xQueueReceive+0x44>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10a      	bne.n	8004c0e <xQueueReceive+0x5e>
	__asm volatile
 8004bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	61fb      	str	r3, [r7, #28]
}
 8004c0a:	bf00      	nop
 8004c0c:	e7fe      	b.n	8004c0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c0e:	f001 f83b 	bl	8005c88 <xTaskGetSchedulerState>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d102      	bne.n	8004c1e <xQueueReceive+0x6e>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <xQueueReceive+0x72>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <xQueueReceive+0x74>
 8004c22:	2300      	movs	r3, #0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10a      	bne.n	8004c3e <xQueueReceive+0x8e>
	__asm volatile
 8004c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2c:	f383 8811 	msr	BASEPRI, r3
 8004c30:	f3bf 8f6f 	isb	sy
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	61bb      	str	r3, [r7, #24]
}
 8004c3a:	bf00      	nop
 8004c3c:	e7fe      	b.n	8004c3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c3e:	f001 fd81 	bl	8006744 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d01f      	beq.n	8004c8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c4e:	68b9      	ldr	r1, [r7, #8]
 8004c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c52:	f000 f8f7 	bl	8004e44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	1e5a      	subs	r2, r3, #1
 8004c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00f      	beq.n	8004c86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c68:	3310      	adds	r3, #16
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fe4e 	bl	800590c <xTaskRemoveFromEventList>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d007      	beq.n	8004c86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c76:	4b3d      	ldr	r3, [pc, #244]	; (8004d6c <xQueueReceive+0x1bc>)
 8004c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c86:	f001 fd8d 	bl	80067a4 <vPortExitCritical>
				return pdPASS;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e069      	b.n	8004d62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d103      	bne.n	8004c9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c94:	f001 fd86 	bl	80067a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e062      	b.n	8004d62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ca2:	f107 0310 	add.w	r3, r7, #16
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fe94 	bl	80059d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cac:	2301      	movs	r3, #1
 8004cae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cb0:	f001 fd78 	bl	80067a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cb4:	f000 fc06 	bl	80054c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cb8:	f001 fd44 	bl	8006744 <vPortEnterCritical>
 8004cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cc2:	b25b      	sxtb	r3, r3
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc8:	d103      	bne.n	8004cd2 <xQueueReceive+0x122>
 8004cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cd8:	b25b      	sxtb	r3, r3
 8004cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cde:	d103      	bne.n	8004ce8 <xQueueReceive+0x138>
 8004ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ce8:	f001 fd5c 	bl	80067a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cec:	1d3a      	adds	r2, r7, #4
 8004cee:	f107 0310 	add.w	r3, r7, #16
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 fe83 	bl	8005a00 <xTaskCheckForTimeOut>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d123      	bne.n	8004d48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d02:	f000 f917 	bl	8004f34 <prvIsQueueEmpty>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d017      	beq.n	8004d3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0e:	3324      	adds	r3, #36	; 0x24
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	4611      	mov	r1, r2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 fda9 	bl	800586c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d1c:	f000 f8b8 	bl	8004e90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d20:	f000 fbde 	bl	80054e0 <xTaskResumeAll>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d189      	bne.n	8004c3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004d2a:	4b10      	ldr	r3, [pc, #64]	; (8004d6c <xQueueReceive+0x1bc>)
 8004d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	e780      	b.n	8004c3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d3e:	f000 f8a7 	bl	8004e90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d42:	f000 fbcd 	bl	80054e0 <xTaskResumeAll>
 8004d46:	e77a      	b.n	8004c3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d4a:	f000 f8a1 	bl	8004e90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d4e:	f000 fbc7 	bl	80054e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d54:	f000 f8ee 	bl	8004f34 <prvIsQueueEmpty>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f43f af6f 	beq.w	8004c3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3730      	adds	r7, #48	; 0x30
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	e000ed04 	.word	0xe000ed04

08004d70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10d      	bne.n	8004daa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d14d      	bne.n	8004e32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 ff92 	bl	8005cc4 <xTaskPriorityDisinherit>
 8004da0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	609a      	str	r2, [r3, #8]
 8004da8:	e043      	b.n	8004e32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d119      	bne.n	8004de4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6858      	ldr	r0, [r3, #4]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	461a      	mov	r2, r3
 8004dba:	68b9      	ldr	r1, [r7, #8]
 8004dbc:	f001 fff2 	bl	8006da4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	441a      	add	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d32b      	bcc.n	8004e32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	605a      	str	r2, [r3, #4]
 8004de2:	e026      	b.n	8004e32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	68d8      	ldr	r0, [r3, #12]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	461a      	mov	r2, r3
 8004dee:	68b9      	ldr	r1, [r7, #8]
 8004df0:	f001 ffd8 	bl	8006da4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	425b      	negs	r3, r3
 8004dfe:	441a      	add	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d207      	bcs.n	8004e20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	425b      	negs	r3, r3
 8004e1a:	441a      	add	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d105      	bne.n	8004e32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e3a:	697b      	ldr	r3, [r7, #20]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d018      	beq.n	8004e88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	441a      	add	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d303      	bcc.n	8004e78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68d9      	ldr	r1, [r3, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	461a      	mov	r2, r3
 8004e82:	6838      	ldr	r0, [r7, #0]
 8004e84:	f001 ff8e 	bl	8006da4 <memcpy>
	}
}
 8004e88:	bf00      	nop
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e98:	f001 fc54 	bl	8006744 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ea2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ea4:	e011      	b.n	8004eca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d012      	beq.n	8004ed4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3324      	adds	r3, #36	; 0x24
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fd2a 	bl	800590c <xTaskRemoveFromEventList>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ebe:	f000 fe01 	bl	8005ac4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	dce9      	bgt.n	8004ea6 <prvUnlockQueue+0x16>
 8004ed2:	e000      	b.n	8004ed6 <prvUnlockQueue+0x46>
					break;
 8004ed4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	22ff      	movs	r2, #255	; 0xff
 8004eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ede:	f001 fc61 	bl	80067a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ee2:	f001 fc2f 	bl	8006744 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eee:	e011      	b.n	8004f14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d012      	beq.n	8004f1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3310      	adds	r3, #16
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fd05 	bl	800590c <xTaskRemoveFromEventList>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f08:	f000 fddc 	bl	8005ac4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f0c:	7bbb      	ldrb	r3, [r7, #14]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	dce9      	bgt.n	8004ef0 <prvUnlockQueue+0x60>
 8004f1c:	e000      	b.n	8004f20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	22ff      	movs	r2, #255	; 0xff
 8004f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f28:	f001 fc3c 	bl	80067a4 <vPortExitCritical>
}
 8004f2c:	bf00      	nop
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f3c:	f001 fc02 	bl	8006744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d102      	bne.n	8004f4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	e001      	b.n	8004f52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f52:	f001 fc27 	bl	80067a4 <vPortExitCritical>

	return xReturn;
 8004f56:	68fb      	ldr	r3, [r7, #12]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f68:	f001 fbec 	bl	8006744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d102      	bne.n	8004f7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	e001      	b.n	8004f82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f82:	f001 fc0f 	bl	80067a4 <vPortExitCritical>

	return xReturn;
 8004f86:	68fb      	ldr	r3, [r7, #12]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	e014      	b.n	8004fca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004fa0:	4a0f      	ldr	r2, [pc, #60]	; (8004fe0 <vQueueAddToRegistry+0x50>)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10b      	bne.n	8004fc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004fac:	490c      	ldr	r1, [pc, #48]	; (8004fe0 <vQueueAddToRegistry+0x50>)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004fb6:	4a0a      	ldr	r2, [pc, #40]	; (8004fe0 <vQueueAddToRegistry+0x50>)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	4413      	add	r3, r2
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004fc2:	e006      	b.n	8004fd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b07      	cmp	r3, #7
 8004fce:	d9e7      	bls.n	8004fa0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004fd0:	bf00      	nop
 8004fd2:	bf00      	nop
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	200008c4 	.word	0x200008c4

08004fe4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ff4:	f001 fba6 	bl	8006744 <vPortEnterCritical>
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ffe:	b25b      	sxtb	r3, r3
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d103      	bne.n	800500e <vQueueWaitForMessageRestricted+0x2a>
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005014:	b25b      	sxtb	r3, r3
 8005016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501a:	d103      	bne.n	8005024 <vQueueWaitForMessageRestricted+0x40>
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005024:	f001 fbbe 	bl	80067a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	2b00      	cmp	r3, #0
 800502e:	d106      	bne.n	800503e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	3324      	adds	r3, #36	; 0x24
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	68b9      	ldr	r1, [r7, #8]
 8005038:	4618      	mov	r0, r3
 800503a:	f000 fc3b 	bl	80058b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800503e:	6978      	ldr	r0, [r7, #20]
 8005040:	f7ff ff26 	bl	8004e90 <prvUnlockQueue>
	}
 8005044:	bf00      	nop
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08e      	sub	sp, #56	; 0x38
 8005050:	af04      	add	r7, sp, #16
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800505a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10a      	bne.n	8005076 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	623b      	str	r3, [r7, #32]
}
 8005072:	bf00      	nop
 8005074:	e7fe      	b.n	8005074 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10a      	bne.n	8005092 <xTaskCreateStatic+0x46>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	61fb      	str	r3, [r7, #28]
}
 800508e:	bf00      	nop
 8005090:	e7fe      	b.n	8005090 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005092:	235c      	movs	r3, #92	; 0x5c
 8005094:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	2b5c      	cmp	r3, #92	; 0x5c
 800509a:	d00a      	beq.n	80050b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	61bb      	str	r3, [r7, #24]
}
 80050ae:	bf00      	nop
 80050b0:	e7fe      	b.n	80050b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d01e      	beq.n	80050f8 <xTaskCreateStatic+0xac>
 80050ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d01b      	beq.n	80050f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	2202      	movs	r2, #2
 80050ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050d2:	2300      	movs	r3, #0
 80050d4:	9303      	str	r3, [sp, #12]
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	9302      	str	r3, [sp, #8]
 80050da:	f107 0314 	add.w	r3, r7, #20
 80050de:	9301      	str	r3, [sp, #4]
 80050e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 f850 	bl	8005190 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050f2:	f000 f8dd 	bl	80052b0 <prvAddNewTaskToReadyList>
 80050f6:	e001      	b.n	80050fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80050f8:	2300      	movs	r3, #0
 80050fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050fc:	697b      	ldr	r3, [r7, #20]
	}
 80050fe:	4618      	mov	r0, r3
 8005100:	3728      	adds	r7, #40	; 0x28
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005106:	b580      	push	{r7, lr}
 8005108:	b08c      	sub	sp, #48	; 0x30
 800510a:	af04      	add	r7, sp, #16
 800510c:	60f8      	str	r0, [r7, #12]
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	603b      	str	r3, [r7, #0]
 8005112:	4613      	mov	r3, r2
 8005114:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005116:	88fb      	ldrh	r3, [r7, #6]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4618      	mov	r0, r3
 800511c:	f001 fc34 	bl	8006988 <pvPortMalloc>
 8005120:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00e      	beq.n	8005146 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005128:	205c      	movs	r0, #92	; 0x5c
 800512a:	f001 fc2d 	bl	8006988 <pvPortMalloc>
 800512e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	631a      	str	r2, [r3, #48]	; 0x30
 800513c:	e005      	b.n	800514a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800513e:	6978      	ldr	r0, [r7, #20]
 8005140:	f001 fcee 	bl	8006b20 <vPortFree>
 8005144:	e001      	b.n	800514a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005146:	2300      	movs	r3, #0
 8005148:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d017      	beq.n	8005180 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005158:	88fa      	ldrh	r2, [r7, #6]
 800515a:	2300      	movs	r3, #0
 800515c:	9303      	str	r3, [sp, #12]
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	9302      	str	r3, [sp, #8]
 8005162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005164:	9301      	str	r3, [sp, #4]
 8005166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68b9      	ldr	r1, [r7, #8]
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 f80e 	bl	8005190 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005174:	69f8      	ldr	r0, [r7, #28]
 8005176:	f000 f89b 	bl	80052b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800517a:	2301      	movs	r3, #1
 800517c:	61bb      	str	r3, [r7, #24]
 800517e:	e002      	b.n	8005186 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005180:	f04f 33ff 	mov.w	r3, #4294967295
 8005184:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005186:	69bb      	ldr	r3, [r7, #24]
	}
 8005188:	4618      	mov	r0, r3
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b088      	sub	sp, #32
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	461a      	mov	r2, r3
 80051a8:	21a5      	movs	r1, #165	; 0xa5
 80051aa:	f001 fe09 	bl	8006dc0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051b8:	3b01      	subs	r3, #1
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	f023 0307 	bic.w	r3, r3, #7
 80051c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80051d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d6:	f383 8811 	msr	BASEPRI, r3
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	617b      	str	r3, [r7, #20]
}
 80051e4:	bf00      	nop
 80051e6:	e7fe      	b.n	80051e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d01f      	beq.n	800522e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
 80051f2:	e012      	b.n	800521a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	4413      	add	r3, r2
 80051fa:	7819      	ldrb	r1, [r3, #0]
 80051fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	4413      	add	r3, r2
 8005202:	3334      	adds	r3, #52	; 0x34
 8005204:	460a      	mov	r2, r1
 8005206:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	4413      	add	r3, r2
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d006      	beq.n	8005222 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	3301      	adds	r3, #1
 8005218:	61fb      	str	r3, [r7, #28]
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	2b0f      	cmp	r3, #15
 800521e:	d9e9      	bls.n	80051f4 <prvInitialiseNewTask+0x64>
 8005220:	e000      	b.n	8005224 <prvInitialiseNewTask+0x94>
			{
				break;
 8005222:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800522c:	e003      	b.n	8005236 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005238:	2b37      	cmp	r3, #55	; 0x37
 800523a:	d901      	bls.n	8005240 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800523c:	2337      	movs	r3, #55	; 0x37
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005244:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800524a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800524c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524e:	2200      	movs	r2, #0
 8005250:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005254:	3304      	adds	r3, #4
 8005256:	4618      	mov	r0, r3
 8005258:	f7ff f978 	bl	800454c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525e:	3318      	adds	r3, #24
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff f973 	bl	800454c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800526a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800527a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527e:	2200      	movs	r2, #0
 8005280:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	68f9      	ldr	r1, [r7, #12]
 800528e:	69b8      	ldr	r0, [r7, #24]
 8005290:	f001 f928 	bl	80064e4 <pxPortInitialiseStack>
 8005294:	4602      	mov	r2, r0
 8005296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005298:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052a6:	bf00      	nop
 80052a8:	3720      	adds	r7, #32
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052b8:	f001 fa44 	bl	8006744 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052bc:	4b2d      	ldr	r3, [pc, #180]	; (8005374 <prvAddNewTaskToReadyList+0xc4>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3301      	adds	r3, #1
 80052c2:	4a2c      	ldr	r2, [pc, #176]	; (8005374 <prvAddNewTaskToReadyList+0xc4>)
 80052c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052c6:	4b2c      	ldr	r3, [pc, #176]	; (8005378 <prvAddNewTaskToReadyList+0xc8>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d109      	bne.n	80052e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052ce:	4a2a      	ldr	r2, [pc, #168]	; (8005378 <prvAddNewTaskToReadyList+0xc8>)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052d4:	4b27      	ldr	r3, [pc, #156]	; (8005374 <prvAddNewTaskToReadyList+0xc4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d110      	bne.n	80052fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052dc:	f000 fc16 	bl	8005b0c <prvInitialiseTaskLists>
 80052e0:	e00d      	b.n	80052fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052e2:	4b26      	ldr	r3, [pc, #152]	; (800537c <prvAddNewTaskToReadyList+0xcc>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d109      	bne.n	80052fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052ea:	4b23      	ldr	r3, [pc, #140]	; (8005378 <prvAddNewTaskToReadyList+0xc8>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d802      	bhi.n	80052fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052f8:	4a1f      	ldr	r2, [pc, #124]	; (8005378 <prvAddNewTaskToReadyList+0xc8>)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052fe:	4b20      	ldr	r3, [pc, #128]	; (8005380 <prvAddNewTaskToReadyList+0xd0>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	3301      	adds	r3, #1
 8005304:	4a1e      	ldr	r2, [pc, #120]	; (8005380 <prvAddNewTaskToReadyList+0xd0>)
 8005306:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005308:	4b1d      	ldr	r3, [pc, #116]	; (8005380 <prvAddNewTaskToReadyList+0xd0>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005314:	4b1b      	ldr	r3, [pc, #108]	; (8005384 <prvAddNewTaskToReadyList+0xd4>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d903      	bls.n	8005324 <prvAddNewTaskToReadyList+0x74>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	4a18      	ldr	r2, [pc, #96]	; (8005384 <prvAddNewTaskToReadyList+0xd4>)
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005328:	4613      	mov	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4a15      	ldr	r2, [pc, #84]	; (8005388 <prvAddNewTaskToReadyList+0xd8>)
 8005332:	441a      	add	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3304      	adds	r3, #4
 8005338:	4619      	mov	r1, r3
 800533a:	4610      	mov	r0, r2
 800533c:	f7ff f913 	bl	8004566 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005340:	f001 fa30 	bl	80067a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005344:	4b0d      	ldr	r3, [pc, #52]	; (800537c <prvAddNewTaskToReadyList+0xcc>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00e      	beq.n	800536a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800534c:	4b0a      	ldr	r3, [pc, #40]	; (8005378 <prvAddNewTaskToReadyList+0xc8>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005356:	429a      	cmp	r2, r3
 8005358:	d207      	bcs.n	800536a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800535a:	4b0c      	ldr	r3, [pc, #48]	; (800538c <prvAddNewTaskToReadyList+0xdc>)
 800535c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800536a:	bf00      	nop
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20000dd8 	.word	0x20000dd8
 8005378:	20000904 	.word	0x20000904
 800537c:	20000de4 	.word	0x20000de4
 8005380:	20000df4 	.word	0x20000df4
 8005384:	20000de0 	.word	0x20000de0
 8005388:	20000908 	.word	0x20000908
 800538c:	e000ed04 	.word	0xe000ed04

08005390 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d017      	beq.n	80053d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053a2:	4b13      	ldr	r3, [pc, #76]	; (80053f0 <vTaskDelay+0x60>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <vTaskDelay+0x30>
	__asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	60bb      	str	r3, [r7, #8]
}
 80053bc:	bf00      	nop
 80053be:	e7fe      	b.n	80053be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80053c0:	f000 f880 	bl	80054c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053c4:	2100      	movs	r1, #0
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 fcea 	bl	8005da0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053cc:	f000 f888 	bl	80054e0 <xTaskResumeAll>
 80053d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d107      	bne.n	80053e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80053d8:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <vTaskDelay+0x64>)
 80053da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053e8:	bf00      	nop
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	20000e00 	.word	0x20000e00
 80053f4:	e000ed04 	.word	0xe000ed04

080053f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08a      	sub	sp, #40	; 0x28
 80053fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053fe:	2300      	movs	r3, #0
 8005400:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005402:	2300      	movs	r3, #0
 8005404:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005406:	463a      	mov	r2, r7
 8005408:	1d39      	adds	r1, r7, #4
 800540a:	f107 0308 	add.w	r3, r7, #8
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff f848 	bl	80044a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005414:	6839      	ldr	r1, [r7, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	9202      	str	r2, [sp, #8]
 800541c:	9301      	str	r3, [sp, #4]
 800541e:	2300      	movs	r3, #0
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	2300      	movs	r3, #0
 8005424:	460a      	mov	r2, r1
 8005426:	4921      	ldr	r1, [pc, #132]	; (80054ac <vTaskStartScheduler+0xb4>)
 8005428:	4821      	ldr	r0, [pc, #132]	; (80054b0 <vTaskStartScheduler+0xb8>)
 800542a:	f7ff fe0f 	bl	800504c <xTaskCreateStatic>
 800542e:	4603      	mov	r3, r0
 8005430:	4a20      	ldr	r2, [pc, #128]	; (80054b4 <vTaskStartScheduler+0xbc>)
 8005432:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005434:	4b1f      	ldr	r3, [pc, #124]	; (80054b4 <vTaskStartScheduler+0xbc>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800543c:	2301      	movs	r3, #1
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	e001      	b.n	8005446 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005442:	2300      	movs	r3, #0
 8005444:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d102      	bne.n	8005452 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800544c:	f000 fcfc 	bl	8005e48 <xTimerCreateTimerTask>
 8005450:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d116      	bne.n	8005486 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	613b      	str	r3, [r7, #16]
}
 800546a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800546c:	4b12      	ldr	r3, [pc, #72]	; (80054b8 <vTaskStartScheduler+0xc0>)
 800546e:	f04f 32ff 	mov.w	r2, #4294967295
 8005472:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005474:	4b11      	ldr	r3, [pc, #68]	; (80054bc <vTaskStartScheduler+0xc4>)
 8005476:	2201      	movs	r2, #1
 8005478:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800547a:	4b11      	ldr	r3, [pc, #68]	; (80054c0 <vTaskStartScheduler+0xc8>)
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005480:	f001 f8be 	bl	8006600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005484:	e00e      	b.n	80054a4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548c:	d10a      	bne.n	80054a4 <vTaskStartScheduler+0xac>
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	60fb      	str	r3, [r7, #12]
}
 80054a0:	bf00      	nop
 80054a2:	e7fe      	b.n	80054a2 <vTaskStartScheduler+0xaa>
}
 80054a4:	bf00      	nop
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	08006e14 	.word	0x08006e14
 80054b0:	08005add 	.word	0x08005add
 80054b4:	20000dfc 	.word	0x20000dfc
 80054b8:	20000df8 	.word	0x20000df8
 80054bc:	20000de4 	.word	0x20000de4
 80054c0:	20000ddc 	.word	0x20000ddc

080054c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054c8:	4b04      	ldr	r3, [pc, #16]	; (80054dc <vTaskSuspendAll+0x18>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3301      	adds	r3, #1
 80054ce:	4a03      	ldr	r2, [pc, #12]	; (80054dc <vTaskSuspendAll+0x18>)
 80054d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054d2:	bf00      	nop
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	20000e00 	.word	0x20000e00

080054e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054ea:	2300      	movs	r3, #0
 80054ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054ee:	4b42      	ldr	r3, [pc, #264]	; (80055f8 <xTaskResumeAll+0x118>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10a      	bne.n	800550c <xTaskResumeAll+0x2c>
	__asm volatile
 80054f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	603b      	str	r3, [r7, #0]
}
 8005508:	bf00      	nop
 800550a:	e7fe      	b.n	800550a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800550c:	f001 f91a 	bl	8006744 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005510:	4b39      	ldr	r3, [pc, #228]	; (80055f8 <xTaskResumeAll+0x118>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3b01      	subs	r3, #1
 8005516:	4a38      	ldr	r2, [pc, #224]	; (80055f8 <xTaskResumeAll+0x118>)
 8005518:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800551a:	4b37      	ldr	r3, [pc, #220]	; (80055f8 <xTaskResumeAll+0x118>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d162      	bne.n	80055e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005522:	4b36      	ldr	r3, [pc, #216]	; (80055fc <xTaskResumeAll+0x11c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d05e      	beq.n	80055e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800552a:	e02f      	b.n	800558c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800552c:	4b34      	ldr	r3, [pc, #208]	; (8005600 <xTaskResumeAll+0x120>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	3318      	adds	r3, #24
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff f871 	bl	8004620 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	3304      	adds	r3, #4
 8005542:	4618      	mov	r0, r3
 8005544:	f7ff f86c 	bl	8004620 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554c:	4b2d      	ldr	r3, [pc, #180]	; (8005604 <xTaskResumeAll+0x124>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	429a      	cmp	r2, r3
 8005552:	d903      	bls.n	800555c <xTaskResumeAll+0x7c>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005558:	4a2a      	ldr	r2, [pc, #168]	; (8005604 <xTaskResumeAll+0x124>)
 800555a:	6013      	str	r3, [r2, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005560:	4613      	mov	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4a27      	ldr	r2, [pc, #156]	; (8005608 <xTaskResumeAll+0x128>)
 800556a:	441a      	add	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3304      	adds	r3, #4
 8005570:	4619      	mov	r1, r3
 8005572:	4610      	mov	r0, r2
 8005574:	f7fe fff7 	bl	8004566 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557c:	4b23      	ldr	r3, [pc, #140]	; (800560c <xTaskResumeAll+0x12c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005582:	429a      	cmp	r2, r3
 8005584:	d302      	bcc.n	800558c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005586:	4b22      	ldr	r3, [pc, #136]	; (8005610 <xTaskResumeAll+0x130>)
 8005588:	2201      	movs	r2, #1
 800558a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800558c:	4b1c      	ldr	r3, [pc, #112]	; (8005600 <xTaskResumeAll+0x120>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1cb      	bne.n	800552c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800559a:	f000 fb55 	bl	8005c48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800559e:	4b1d      	ldr	r3, [pc, #116]	; (8005614 <xTaskResumeAll+0x134>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d010      	beq.n	80055cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055aa:	f000 f847 	bl	800563c <xTaskIncrementTick>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80055b4:	4b16      	ldr	r3, [pc, #88]	; (8005610 <xTaskResumeAll+0x130>)
 80055b6:	2201      	movs	r2, #1
 80055b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3b01      	subs	r3, #1
 80055be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f1      	bne.n	80055aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80055c6:	4b13      	ldr	r3, [pc, #76]	; (8005614 <xTaskResumeAll+0x134>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055cc:	4b10      	ldr	r3, [pc, #64]	; (8005610 <xTaskResumeAll+0x130>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d009      	beq.n	80055e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055d4:	2301      	movs	r3, #1
 80055d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055d8:	4b0f      	ldr	r3, [pc, #60]	; (8005618 <xTaskResumeAll+0x138>)
 80055da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055e8:	f001 f8dc 	bl	80067a4 <vPortExitCritical>

	return xAlreadyYielded;
 80055ec:	68bb      	ldr	r3, [r7, #8]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	20000e00 	.word	0x20000e00
 80055fc:	20000dd8 	.word	0x20000dd8
 8005600:	20000d98 	.word	0x20000d98
 8005604:	20000de0 	.word	0x20000de0
 8005608:	20000908 	.word	0x20000908
 800560c:	20000904 	.word	0x20000904
 8005610:	20000dec 	.word	0x20000dec
 8005614:	20000de8 	.word	0x20000de8
 8005618:	e000ed04 	.word	0xe000ed04

0800561c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005622:	4b05      	ldr	r3, [pc, #20]	; (8005638 <xTaskGetTickCount+0x1c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005628:	687b      	ldr	r3, [r7, #4]
}
 800562a:	4618      	mov	r0, r3
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	20000ddc 	.word	0x20000ddc

0800563c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005642:	2300      	movs	r3, #0
 8005644:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005646:	4b4f      	ldr	r3, [pc, #316]	; (8005784 <xTaskIncrementTick+0x148>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	f040 808f 	bne.w	800576e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005650:	4b4d      	ldr	r3, [pc, #308]	; (8005788 <xTaskIncrementTick+0x14c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3301      	adds	r3, #1
 8005656:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005658:	4a4b      	ldr	r2, [pc, #300]	; (8005788 <xTaskIncrementTick+0x14c>)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d120      	bne.n	80056a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005664:	4b49      	ldr	r3, [pc, #292]	; (800578c <xTaskIncrementTick+0x150>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00a      	beq.n	8005684 <xTaskIncrementTick+0x48>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	603b      	str	r3, [r7, #0]
}
 8005680:	bf00      	nop
 8005682:	e7fe      	b.n	8005682 <xTaskIncrementTick+0x46>
 8005684:	4b41      	ldr	r3, [pc, #260]	; (800578c <xTaskIncrementTick+0x150>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	4b41      	ldr	r3, [pc, #260]	; (8005790 <xTaskIncrementTick+0x154>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a3f      	ldr	r2, [pc, #252]	; (800578c <xTaskIncrementTick+0x150>)
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	4a3f      	ldr	r2, [pc, #252]	; (8005790 <xTaskIncrementTick+0x154>)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	4b3e      	ldr	r3, [pc, #248]	; (8005794 <xTaskIncrementTick+0x158>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3301      	adds	r3, #1
 800569e:	4a3d      	ldr	r2, [pc, #244]	; (8005794 <xTaskIncrementTick+0x158>)
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	f000 fad1 	bl	8005c48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056a6:	4b3c      	ldr	r3, [pc, #240]	; (8005798 <xTaskIncrementTick+0x15c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d349      	bcc.n	8005744 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056b0:	4b36      	ldr	r3, [pc, #216]	; (800578c <xTaskIncrementTick+0x150>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d104      	bne.n	80056c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ba:	4b37      	ldr	r3, [pc, #220]	; (8005798 <xTaskIncrementTick+0x15c>)
 80056bc:	f04f 32ff 	mov.w	r2, #4294967295
 80056c0:	601a      	str	r2, [r3, #0]
					break;
 80056c2:	e03f      	b.n	8005744 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056c4:	4b31      	ldr	r3, [pc, #196]	; (800578c <xTaskIncrementTick+0x150>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d203      	bcs.n	80056e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056dc:	4a2e      	ldr	r2, [pc, #184]	; (8005798 <xTaskIncrementTick+0x15c>)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056e2:	e02f      	b.n	8005744 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	3304      	adds	r3, #4
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fe ff99 	bl	8004620 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d004      	beq.n	8005700 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	3318      	adds	r3, #24
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fe ff90 	bl	8004620 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005704:	4b25      	ldr	r3, [pc, #148]	; (800579c <xTaskIncrementTick+0x160>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d903      	bls.n	8005714 <xTaskIncrementTick+0xd8>
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	4a22      	ldr	r2, [pc, #136]	; (800579c <xTaskIncrementTick+0x160>)
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4a1f      	ldr	r2, [pc, #124]	; (80057a0 <xTaskIncrementTick+0x164>)
 8005722:	441a      	add	r2, r3
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	3304      	adds	r3, #4
 8005728:	4619      	mov	r1, r3
 800572a:	4610      	mov	r0, r2
 800572c:	f7fe ff1b 	bl	8004566 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005734:	4b1b      	ldr	r3, [pc, #108]	; (80057a4 <xTaskIncrementTick+0x168>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573a:	429a      	cmp	r2, r3
 800573c:	d3b8      	bcc.n	80056b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800573e:	2301      	movs	r3, #1
 8005740:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005742:	e7b5      	b.n	80056b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005744:	4b17      	ldr	r3, [pc, #92]	; (80057a4 <xTaskIncrementTick+0x168>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574a:	4915      	ldr	r1, [pc, #84]	; (80057a0 <xTaskIncrementTick+0x164>)
 800574c:	4613      	mov	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d901      	bls.n	8005760 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800575c:	2301      	movs	r3, #1
 800575e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005760:	4b11      	ldr	r3, [pc, #68]	; (80057a8 <xTaskIncrementTick+0x16c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d007      	beq.n	8005778 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005768:	2301      	movs	r3, #1
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	e004      	b.n	8005778 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800576e:	4b0f      	ldr	r3, [pc, #60]	; (80057ac <xTaskIncrementTick+0x170>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3301      	adds	r3, #1
 8005774:	4a0d      	ldr	r2, [pc, #52]	; (80057ac <xTaskIncrementTick+0x170>)
 8005776:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005778:	697b      	ldr	r3, [r7, #20]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	20000e00 	.word	0x20000e00
 8005788:	20000ddc 	.word	0x20000ddc
 800578c:	20000d90 	.word	0x20000d90
 8005790:	20000d94 	.word	0x20000d94
 8005794:	20000df0 	.word	0x20000df0
 8005798:	20000df8 	.word	0x20000df8
 800579c:	20000de0 	.word	0x20000de0
 80057a0:	20000908 	.word	0x20000908
 80057a4:	20000904 	.word	0x20000904
 80057a8:	20000dec 	.word	0x20000dec
 80057ac:	20000de8 	.word	0x20000de8

080057b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057b6:	4b28      	ldr	r3, [pc, #160]	; (8005858 <vTaskSwitchContext+0xa8>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057be:	4b27      	ldr	r3, [pc, #156]	; (800585c <vTaskSwitchContext+0xac>)
 80057c0:	2201      	movs	r2, #1
 80057c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057c4:	e041      	b.n	800584a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80057c6:	4b25      	ldr	r3, [pc, #148]	; (800585c <vTaskSwitchContext+0xac>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057cc:	4b24      	ldr	r3, [pc, #144]	; (8005860 <vTaskSwitchContext+0xb0>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	e010      	b.n	80057f6 <vTaskSwitchContext+0x46>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10a      	bne.n	80057f0 <vTaskSwitchContext+0x40>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	607b      	str	r3, [r7, #4]
}
 80057ec:	bf00      	nop
 80057ee:	e7fe      	b.n	80057ee <vTaskSwitchContext+0x3e>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	491b      	ldr	r1, [pc, #108]	; (8005864 <vTaskSwitchContext+0xb4>)
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4613      	mov	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	440b      	add	r3, r1
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0e4      	beq.n	80057d4 <vTaskSwitchContext+0x24>
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	4613      	mov	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4a13      	ldr	r2, [pc, #76]	; (8005864 <vTaskSwitchContext+0xb4>)
 8005816:	4413      	add	r3, r2
 8005818:	60bb      	str	r3, [r7, #8]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	605a      	str	r2, [r3, #4]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	3308      	adds	r3, #8
 800582c:	429a      	cmp	r2, r3
 800582e:	d104      	bne.n	800583a <vTaskSwitchContext+0x8a>
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	605a      	str	r2, [r3, #4]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	4a09      	ldr	r2, [pc, #36]	; (8005868 <vTaskSwitchContext+0xb8>)
 8005842:	6013      	str	r3, [r2, #0]
 8005844:	4a06      	ldr	r2, [pc, #24]	; (8005860 <vTaskSwitchContext+0xb0>)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6013      	str	r3, [r2, #0]
}
 800584a:	bf00      	nop
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	20000e00 	.word	0x20000e00
 800585c:	20000dec 	.word	0x20000dec
 8005860:	20000de0 	.word	0x20000de0
 8005864:	20000908 	.word	0x20000908
 8005868:	20000904 	.word	0x20000904

0800586c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10a      	bne.n	8005892 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	60fb      	str	r3, [r7, #12]
}
 800588e:	bf00      	nop
 8005890:	e7fe      	b.n	8005890 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005892:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <vTaskPlaceOnEventList+0x44>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3318      	adds	r3, #24
 8005898:	4619      	mov	r1, r3
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7fe fe87 	bl	80045ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058a0:	2101      	movs	r1, #1
 80058a2:	6838      	ldr	r0, [r7, #0]
 80058a4:	f000 fa7c 	bl	8005da0 <prvAddCurrentTaskToDelayedList>
}
 80058a8:	bf00      	nop
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	20000904 	.word	0x20000904

080058b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10a      	bne.n	80058dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80058c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ca:	f383 8811 	msr	BASEPRI, r3
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	617b      	str	r3, [r7, #20]
}
 80058d8:	bf00      	nop
 80058da:	e7fe      	b.n	80058da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058dc:	4b0a      	ldr	r3, [pc, #40]	; (8005908 <vTaskPlaceOnEventListRestricted+0x54>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3318      	adds	r3, #24
 80058e2:	4619      	mov	r1, r3
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f7fe fe3e 	bl	8004566 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80058f0:	f04f 33ff 	mov.w	r3, #4294967295
 80058f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	68b8      	ldr	r0, [r7, #8]
 80058fa:	f000 fa51 	bl	8005da0 <prvAddCurrentTaskToDelayedList>
	}
 80058fe:	bf00      	nop
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	20000904 	.word	0x20000904

0800590c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10a      	bne.n	8005938 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	60fb      	str	r3, [r7, #12]
}
 8005934:	bf00      	nop
 8005936:	e7fe      	b.n	8005936 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	3318      	adds	r3, #24
 800593c:	4618      	mov	r0, r3
 800593e:	f7fe fe6f 	bl	8004620 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005942:	4b1e      	ldr	r3, [pc, #120]	; (80059bc <xTaskRemoveFromEventList+0xb0>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d11d      	bne.n	8005986 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	3304      	adds	r3, #4
 800594e:	4618      	mov	r0, r3
 8005950:	f7fe fe66 	bl	8004620 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005958:	4b19      	ldr	r3, [pc, #100]	; (80059c0 <xTaskRemoveFromEventList+0xb4>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	429a      	cmp	r2, r3
 800595e:	d903      	bls.n	8005968 <xTaskRemoveFromEventList+0x5c>
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	4a16      	ldr	r2, [pc, #88]	; (80059c0 <xTaskRemoveFromEventList+0xb4>)
 8005966:	6013      	str	r3, [r2, #0]
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596c:	4613      	mov	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4a13      	ldr	r2, [pc, #76]	; (80059c4 <xTaskRemoveFromEventList+0xb8>)
 8005976:	441a      	add	r2, r3
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	3304      	adds	r3, #4
 800597c:	4619      	mov	r1, r3
 800597e:	4610      	mov	r0, r2
 8005980:	f7fe fdf1 	bl	8004566 <vListInsertEnd>
 8005984:	e005      	b.n	8005992 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	3318      	adds	r3, #24
 800598a:	4619      	mov	r1, r3
 800598c:	480e      	ldr	r0, [pc, #56]	; (80059c8 <xTaskRemoveFromEventList+0xbc>)
 800598e:	f7fe fdea 	bl	8004566 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005996:	4b0d      	ldr	r3, [pc, #52]	; (80059cc <xTaskRemoveFromEventList+0xc0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	429a      	cmp	r2, r3
 800599e:	d905      	bls.n	80059ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059a0:	2301      	movs	r3, #1
 80059a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059a4:	4b0a      	ldr	r3, [pc, #40]	; (80059d0 <xTaskRemoveFromEventList+0xc4>)
 80059a6:	2201      	movs	r2, #1
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	e001      	b.n	80059b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80059ac:	2300      	movs	r3, #0
 80059ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80059b0:	697b      	ldr	r3, [r7, #20]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20000e00 	.word	0x20000e00
 80059c0:	20000de0 	.word	0x20000de0
 80059c4:	20000908 	.word	0x20000908
 80059c8:	20000d98 	.word	0x20000d98
 80059cc:	20000904 	.word	0x20000904
 80059d0:	20000dec 	.word	0x20000dec

080059d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059dc:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <vTaskInternalSetTimeOutState+0x24>)
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059e4:	4b05      	ldr	r3, [pc, #20]	; (80059fc <vTaskInternalSetTimeOutState+0x28>)
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	605a      	str	r2, [r3, #4]
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	20000df0 	.word	0x20000df0
 80059fc:	20000ddc 	.word	0x20000ddc

08005a00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10a      	bne.n	8005a26 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	613b      	str	r3, [r7, #16]
}
 8005a22:	bf00      	nop
 8005a24:	e7fe      	b.n	8005a24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	60fb      	str	r3, [r7, #12]
}
 8005a3e:	bf00      	nop
 8005a40:	e7fe      	b.n	8005a40 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005a42:	f000 fe7f 	bl	8006744 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a46:	4b1d      	ldr	r3, [pc, #116]	; (8005abc <xTaskCheckForTimeOut+0xbc>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5e:	d102      	bne.n	8005a66 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a60:	2300      	movs	r3, #0
 8005a62:	61fb      	str	r3, [r7, #28]
 8005a64:	e023      	b.n	8005aae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4b15      	ldr	r3, [pc, #84]	; (8005ac0 <xTaskCheckForTimeOut+0xc0>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d007      	beq.n	8005a82 <xTaskCheckForTimeOut+0x82>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d302      	bcc.n	8005a82 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	61fb      	str	r3, [r7, #28]
 8005a80:	e015      	b.n	8005aae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d20b      	bcs.n	8005aa4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	1ad2      	subs	r2, r2, r3
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7ff ff9b 	bl	80059d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61fb      	str	r3, [r7, #28]
 8005aa2:	e004      	b.n	8005aae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005aae:	f000 fe79 	bl	80067a4 <vPortExitCritical>

	return xReturn;
 8005ab2:	69fb      	ldr	r3, [r7, #28]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3720      	adds	r7, #32
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	20000ddc 	.word	0x20000ddc
 8005ac0:	20000df0 	.word	0x20000df0

08005ac4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ac8:	4b03      	ldr	r3, [pc, #12]	; (8005ad8 <vTaskMissedYield+0x14>)
 8005aca:	2201      	movs	r2, #1
 8005acc:	601a      	str	r2, [r3, #0]
}
 8005ace:	bf00      	nop
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	20000dec 	.word	0x20000dec

08005adc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ae4:	f000 f852 	bl	8005b8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ae8:	4b06      	ldr	r3, [pc, #24]	; (8005b04 <prvIdleTask+0x28>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d9f9      	bls.n	8005ae4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005af0:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <prvIdleTask+0x2c>)
 8005af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b00:	e7f0      	b.n	8005ae4 <prvIdleTask+0x8>
 8005b02:	bf00      	nop
 8005b04:	20000908 	.word	0x20000908
 8005b08:	e000ed04 	.word	0xe000ed04

08005b0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b12:	2300      	movs	r3, #0
 8005b14:	607b      	str	r3, [r7, #4]
 8005b16:	e00c      	b.n	8005b32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4a12      	ldr	r2, [pc, #72]	; (8005b6c <prvInitialiseTaskLists+0x60>)
 8005b24:	4413      	add	r3, r2
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fe fcf0 	bl	800450c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	607b      	str	r3, [r7, #4]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b37      	cmp	r3, #55	; 0x37
 8005b36:	d9ef      	bls.n	8005b18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b38:	480d      	ldr	r0, [pc, #52]	; (8005b70 <prvInitialiseTaskLists+0x64>)
 8005b3a:	f7fe fce7 	bl	800450c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b3e:	480d      	ldr	r0, [pc, #52]	; (8005b74 <prvInitialiseTaskLists+0x68>)
 8005b40:	f7fe fce4 	bl	800450c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b44:	480c      	ldr	r0, [pc, #48]	; (8005b78 <prvInitialiseTaskLists+0x6c>)
 8005b46:	f7fe fce1 	bl	800450c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b4a:	480c      	ldr	r0, [pc, #48]	; (8005b7c <prvInitialiseTaskLists+0x70>)
 8005b4c:	f7fe fcde 	bl	800450c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b50:	480b      	ldr	r0, [pc, #44]	; (8005b80 <prvInitialiseTaskLists+0x74>)
 8005b52:	f7fe fcdb 	bl	800450c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b56:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <prvInitialiseTaskLists+0x78>)
 8005b58:	4a05      	ldr	r2, [pc, #20]	; (8005b70 <prvInitialiseTaskLists+0x64>)
 8005b5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b5c:	4b0a      	ldr	r3, [pc, #40]	; (8005b88 <prvInitialiseTaskLists+0x7c>)
 8005b5e:	4a05      	ldr	r2, [pc, #20]	; (8005b74 <prvInitialiseTaskLists+0x68>)
 8005b60:	601a      	str	r2, [r3, #0]
}
 8005b62:	bf00      	nop
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000908 	.word	0x20000908
 8005b70:	20000d68 	.word	0x20000d68
 8005b74:	20000d7c 	.word	0x20000d7c
 8005b78:	20000d98 	.word	0x20000d98
 8005b7c:	20000dac 	.word	0x20000dac
 8005b80:	20000dc4 	.word	0x20000dc4
 8005b84:	20000d90 	.word	0x20000d90
 8005b88:	20000d94 	.word	0x20000d94

08005b8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b92:	e019      	b.n	8005bc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b94:	f000 fdd6 	bl	8006744 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b98:	4b10      	ldr	r3, [pc, #64]	; (8005bdc <prvCheckTasksWaitingTermination+0x50>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fe fd3b 	bl	8004620 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005baa:	4b0d      	ldr	r3, [pc, #52]	; (8005be0 <prvCheckTasksWaitingTermination+0x54>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	4a0b      	ldr	r2, [pc, #44]	; (8005be0 <prvCheckTasksWaitingTermination+0x54>)
 8005bb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bb4:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <prvCheckTasksWaitingTermination+0x58>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	4a0a      	ldr	r2, [pc, #40]	; (8005be4 <prvCheckTasksWaitingTermination+0x58>)
 8005bbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bbe:	f000 fdf1 	bl	80067a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f810 	bl	8005be8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bc8:	4b06      	ldr	r3, [pc, #24]	; (8005be4 <prvCheckTasksWaitingTermination+0x58>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1e1      	bne.n	8005b94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bd0:	bf00      	nop
 8005bd2:	bf00      	nop
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000dac 	.word	0x20000dac
 8005be0:	20000dd8 	.word	0x20000dd8
 8005be4:	20000dc0 	.word	0x20000dc0

08005be8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d108      	bne.n	8005c0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 ff8e 	bl	8006b20 <vPortFree>
				vPortFree( pxTCB );
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 ff8b 	bl	8006b20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c0a:	e018      	b.n	8005c3e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d103      	bne.n	8005c1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 ff82 	bl	8006b20 <vPortFree>
	}
 8005c1c:	e00f      	b.n	8005c3e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d00a      	beq.n	8005c3e <prvDeleteTCB+0x56>
	__asm volatile
 8005c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	60fb      	str	r3, [r7, #12]
}
 8005c3a:	bf00      	nop
 8005c3c:	e7fe      	b.n	8005c3c <prvDeleteTCB+0x54>
	}
 8005c3e:	bf00      	nop
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c4e:	4b0c      	ldr	r3, [pc, #48]	; (8005c80 <prvResetNextTaskUnblockTime+0x38>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d104      	bne.n	8005c62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c58:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <prvResetNextTaskUnblockTime+0x3c>)
 8005c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c60:	e008      	b.n	8005c74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c62:	4b07      	ldr	r3, [pc, #28]	; (8005c80 <prvResetNextTaskUnblockTime+0x38>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	4a04      	ldr	r2, [pc, #16]	; (8005c84 <prvResetNextTaskUnblockTime+0x3c>)
 8005c72:	6013      	str	r3, [r2, #0]
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	20000d90 	.word	0x20000d90
 8005c84:	20000df8 	.word	0x20000df8

08005c88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c8e:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <xTaskGetSchedulerState+0x34>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d102      	bne.n	8005c9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c96:	2301      	movs	r3, #1
 8005c98:	607b      	str	r3, [r7, #4]
 8005c9a:	e008      	b.n	8005cae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c9c:	4b08      	ldr	r3, [pc, #32]	; (8005cc0 <xTaskGetSchedulerState+0x38>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d102      	bne.n	8005caa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	607b      	str	r3, [r7, #4]
 8005ca8:	e001      	b.n	8005cae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005caa:	2300      	movs	r3, #0
 8005cac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005cae:	687b      	ldr	r3, [r7, #4]
	}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	20000de4 	.word	0x20000de4
 8005cc0:	20000e00 	.word	0x20000e00

08005cc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d056      	beq.n	8005d88 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005cda:	4b2e      	ldr	r3, [pc, #184]	; (8005d94 <xTaskPriorityDisinherit+0xd0>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d00a      	beq.n	8005cfa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	60fb      	str	r3, [r7, #12]
}
 8005cf6:	bf00      	nop
 8005cf8:	e7fe      	b.n	8005cf8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10a      	bne.n	8005d18 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d06:	f383 8811 	msr	BASEPRI, r3
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	60bb      	str	r3, [r7, #8]
}
 8005d14:	bf00      	nop
 8005d16:	e7fe      	b.n	8005d16 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d1c:	1e5a      	subs	r2, r3, #1
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d02c      	beq.n	8005d88 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d128      	bne.n	8005d88 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	3304      	adds	r3, #4
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fe fc70 	bl	8004620 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d58:	4b0f      	ldr	r3, [pc, #60]	; (8005d98 <xTaskPriorityDisinherit+0xd4>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d903      	bls.n	8005d68 <xTaskPriorityDisinherit+0xa4>
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	4a0c      	ldr	r2, [pc, #48]	; (8005d98 <xTaskPriorityDisinherit+0xd4>)
 8005d66:	6013      	str	r3, [r2, #0]
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4a09      	ldr	r2, [pc, #36]	; (8005d9c <xTaskPriorityDisinherit+0xd8>)
 8005d76:	441a      	add	r2, r3
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4610      	mov	r0, r2
 8005d80:	f7fe fbf1 	bl	8004566 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d84:	2301      	movs	r3, #1
 8005d86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d88:	697b      	ldr	r3, [r7, #20]
	}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	20000904 	.word	0x20000904
 8005d98:	20000de0 	.word	0x20000de0
 8005d9c:	20000908 	.word	0x20000908

08005da0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005daa:	4b21      	ldr	r3, [pc, #132]	; (8005e30 <prvAddCurrentTaskToDelayedList+0x90>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005db0:	4b20      	ldr	r3, [pc, #128]	; (8005e34 <prvAddCurrentTaskToDelayedList+0x94>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3304      	adds	r3, #4
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fe fc32 	bl	8004620 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc2:	d10a      	bne.n	8005dda <prvAddCurrentTaskToDelayedList+0x3a>
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d007      	beq.n	8005dda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dca:	4b1a      	ldr	r3, [pc, #104]	; (8005e34 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3304      	adds	r3, #4
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4819      	ldr	r0, [pc, #100]	; (8005e38 <prvAddCurrentTaskToDelayedList+0x98>)
 8005dd4:	f7fe fbc7 	bl	8004566 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005dd8:	e026      	b.n	8005e28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4413      	add	r3, r2
 8005de0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005de2:	4b14      	ldr	r3, [pc, #80]	; (8005e34 <prvAddCurrentTaskToDelayedList+0x94>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d209      	bcs.n	8005e06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005df2:	4b12      	ldr	r3, [pc, #72]	; (8005e3c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	4b0f      	ldr	r3, [pc, #60]	; (8005e34 <prvAddCurrentTaskToDelayedList+0x94>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4610      	mov	r0, r2
 8005e00:	f7fe fbd5 	bl	80045ae <vListInsert>
}
 8005e04:	e010      	b.n	8005e28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e06:	4b0e      	ldr	r3, [pc, #56]	; (8005e40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	4b0a      	ldr	r3, [pc, #40]	; (8005e34 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	4619      	mov	r1, r3
 8005e12:	4610      	mov	r0, r2
 8005e14:	f7fe fbcb 	bl	80045ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e18:	4b0a      	ldr	r3, [pc, #40]	; (8005e44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d202      	bcs.n	8005e28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e22:	4a08      	ldr	r2, [pc, #32]	; (8005e44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	6013      	str	r3, [r2, #0]
}
 8005e28:	bf00      	nop
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20000ddc 	.word	0x20000ddc
 8005e34:	20000904 	.word	0x20000904
 8005e38:	20000dc4 	.word	0x20000dc4
 8005e3c:	20000d94 	.word	0x20000d94
 8005e40:	20000d90 	.word	0x20000d90
 8005e44:	20000df8 	.word	0x20000df8

08005e48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b08a      	sub	sp, #40	; 0x28
 8005e4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e52:	f000 fb07 	bl	8006464 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e56:	4b1c      	ldr	r3, [pc, #112]	; (8005ec8 <xTimerCreateTimerTask+0x80>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d021      	beq.n	8005ea2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e66:	1d3a      	adds	r2, r7, #4
 8005e68:	f107 0108 	add.w	r1, r7, #8
 8005e6c:	f107 030c 	add.w	r3, r7, #12
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fe fb31 	bl	80044d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e76:	6879      	ldr	r1, [r7, #4]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	9202      	str	r2, [sp, #8]
 8005e7e:	9301      	str	r3, [sp, #4]
 8005e80:	2302      	movs	r3, #2
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	2300      	movs	r3, #0
 8005e86:	460a      	mov	r2, r1
 8005e88:	4910      	ldr	r1, [pc, #64]	; (8005ecc <xTimerCreateTimerTask+0x84>)
 8005e8a:	4811      	ldr	r0, [pc, #68]	; (8005ed0 <xTimerCreateTimerTask+0x88>)
 8005e8c:	f7ff f8de 	bl	800504c <xTaskCreateStatic>
 8005e90:	4603      	mov	r3, r0
 8005e92:	4a10      	ldr	r2, [pc, #64]	; (8005ed4 <xTimerCreateTimerTask+0x8c>)
 8005e94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e96:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <xTimerCreateTimerTask+0x8c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10a      	bne.n	8005ebe <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	613b      	str	r3, [r7, #16]
}
 8005eba:	bf00      	nop
 8005ebc:	e7fe      	b.n	8005ebc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005ebe:	697b      	ldr	r3, [r7, #20]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3718      	adds	r7, #24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	20000e34 	.word	0x20000e34
 8005ecc:	08006e1c 	.word	0x08006e1c
 8005ed0:	0800600d 	.word	0x0800600d
 8005ed4:	20000e38 	.word	0x20000e38

08005ed8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b08a      	sub	sp, #40	; 0x28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10a      	bne.n	8005f06 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	623b      	str	r3, [r7, #32]
}
 8005f02:	bf00      	nop
 8005f04:	e7fe      	b.n	8005f04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f06:	4b1a      	ldr	r3, [pc, #104]	; (8005f70 <xTimerGenericCommand+0x98>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d02a      	beq.n	8005f64 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2b05      	cmp	r3, #5
 8005f1e:	dc18      	bgt.n	8005f52 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f20:	f7ff feb2 	bl	8005c88 <xTaskGetSchedulerState>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d109      	bne.n	8005f3e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f2a:	4b11      	ldr	r3, [pc, #68]	; (8005f70 <xTimerGenericCommand+0x98>)
 8005f2c:	6818      	ldr	r0, [r3, #0]
 8005f2e:	f107 0110 	add.w	r1, r7, #16
 8005f32:	2300      	movs	r3, #0
 8005f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f36:	f7fe fca1 	bl	800487c <xQueueGenericSend>
 8005f3a:	6278      	str	r0, [r7, #36]	; 0x24
 8005f3c:	e012      	b.n	8005f64 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f3e:	4b0c      	ldr	r3, [pc, #48]	; (8005f70 <xTimerGenericCommand+0x98>)
 8005f40:	6818      	ldr	r0, [r3, #0]
 8005f42:	f107 0110 	add.w	r1, r7, #16
 8005f46:	2300      	movs	r3, #0
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f7fe fc97 	bl	800487c <xQueueGenericSend>
 8005f4e:	6278      	str	r0, [r7, #36]	; 0x24
 8005f50:	e008      	b.n	8005f64 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f52:	4b07      	ldr	r3, [pc, #28]	; (8005f70 <xTimerGenericCommand+0x98>)
 8005f54:	6818      	ldr	r0, [r3, #0]
 8005f56:	f107 0110 	add.w	r1, r7, #16
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	f7fe fd8b 	bl	8004a78 <xQueueGenericSendFromISR>
 8005f62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3728      	adds	r7, #40	; 0x28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000e34 	.word	0x20000e34

08005f74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f7e:	4b22      	ldr	r3, [pc, #136]	; (8006008 <prvProcessExpiredTimer+0x94>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fe fb47 	bl	8004620 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d022      	beq.n	8005fe6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	699a      	ldr	r2, [r3, #24]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	18d1      	adds	r1, r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	6978      	ldr	r0, [r7, #20]
 8005fae:	f000 f8d1 	bl	8006154 <prvInsertTimerInActiveList>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01f      	beq.n	8005ff8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fb8:	2300      	movs	r3, #0
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	6978      	ldr	r0, [r7, #20]
 8005fc4:	f7ff ff88 	bl	8005ed8 <xTimerGenericCommand>
 8005fc8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d113      	bne.n	8005ff8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	60fb      	str	r3, [r7, #12]
}
 8005fe2:	bf00      	nop
 8005fe4:	e7fe      	b.n	8005fe4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fec:	f023 0301 	bic.w	r3, r3, #1
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	6978      	ldr	r0, [r7, #20]
 8005ffe:	4798      	blx	r3
}
 8006000:	bf00      	nop
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	20000e2c 	.word	0x20000e2c

0800600c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006014:	f107 0308 	add.w	r3, r7, #8
 8006018:	4618      	mov	r0, r3
 800601a:	f000 f857 	bl	80060cc <prvGetNextExpireTime>
 800601e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	4619      	mov	r1, r3
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f803 	bl	8006030 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800602a:	f000 f8d5 	bl	80061d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800602e:	e7f1      	b.n	8006014 <prvTimerTask+0x8>

08006030 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800603a:	f7ff fa43 	bl	80054c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800603e:	f107 0308 	add.w	r3, r7, #8
 8006042:	4618      	mov	r0, r3
 8006044:	f000 f866 	bl	8006114 <prvSampleTimeNow>
 8006048:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d130      	bne.n	80060b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10a      	bne.n	800606c <prvProcessTimerOrBlockTask+0x3c>
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	429a      	cmp	r2, r3
 800605c:	d806      	bhi.n	800606c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800605e:	f7ff fa3f 	bl	80054e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006062:	68f9      	ldr	r1, [r7, #12]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff ff85 	bl	8005f74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800606a:	e024      	b.n	80060b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d008      	beq.n	8006084 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006072:	4b13      	ldr	r3, [pc, #76]	; (80060c0 <prvProcessTimerOrBlockTask+0x90>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <prvProcessTimerOrBlockTask+0x50>
 800607c:	2301      	movs	r3, #1
 800607e:	e000      	b.n	8006082 <prvProcessTimerOrBlockTask+0x52>
 8006080:	2300      	movs	r3, #0
 8006082:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006084:	4b0f      	ldr	r3, [pc, #60]	; (80060c4 <prvProcessTimerOrBlockTask+0x94>)
 8006086:	6818      	ldr	r0, [r3, #0]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	4619      	mov	r1, r3
 8006092:	f7fe ffa7 	bl	8004fe4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006096:	f7ff fa23 	bl	80054e0 <xTaskResumeAll>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10a      	bne.n	80060b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80060a0:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <prvProcessTimerOrBlockTask+0x98>)
 80060a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	f3bf 8f6f 	isb	sy
}
 80060b0:	e001      	b.n	80060b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80060b2:	f7ff fa15 	bl	80054e0 <xTaskResumeAll>
}
 80060b6:	bf00      	nop
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20000e30 	.word	0x20000e30
 80060c4:	20000e34 	.word	0x20000e34
 80060c8:	e000ed04 	.word	0xe000ed04

080060cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80060d4:	4b0e      	ldr	r3, [pc, #56]	; (8006110 <prvGetNextExpireTime+0x44>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <prvGetNextExpireTime+0x16>
 80060de:	2201      	movs	r2, #1
 80060e0:	e000      	b.n	80060e4 <prvGetNextExpireTime+0x18>
 80060e2:	2200      	movs	r2, #0
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d105      	bne.n	80060fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060f0:	4b07      	ldr	r3, [pc, #28]	; (8006110 <prvGetNextExpireTime+0x44>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	60fb      	str	r3, [r7, #12]
 80060fa:	e001      	b.n	8006100 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006100:	68fb      	ldr	r3, [r7, #12]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	20000e2c 	.word	0x20000e2c

08006114 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800611c:	f7ff fa7e 	bl	800561c <xTaskGetTickCount>
 8006120:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006122:	4b0b      	ldr	r3, [pc, #44]	; (8006150 <prvSampleTimeNow+0x3c>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	429a      	cmp	r2, r3
 800612a:	d205      	bcs.n	8006138 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800612c:	f000 f936 	bl	800639c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	e002      	b.n	800613e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800613e:	4a04      	ldr	r2, [pc, #16]	; (8006150 <prvSampleTimeNow+0x3c>)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006144:	68fb      	ldr	r3, [r7, #12]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20000e3c 	.word	0x20000e3c

08006154 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006162:	2300      	movs	r3, #0
 8006164:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	429a      	cmp	r2, r3
 8006178:	d812      	bhi.n	80061a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	1ad2      	subs	r2, r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	429a      	cmp	r2, r3
 8006186:	d302      	bcc.n	800618e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006188:	2301      	movs	r3, #1
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	e01b      	b.n	80061c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800618e:	4b10      	ldr	r3, [pc, #64]	; (80061d0 <prvInsertTimerInActiveList+0x7c>)
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3304      	adds	r3, #4
 8006196:	4619      	mov	r1, r3
 8006198:	4610      	mov	r0, r2
 800619a:	f7fe fa08 	bl	80045ae <vListInsert>
 800619e:	e012      	b.n	80061c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d206      	bcs.n	80061b6 <prvInsertTimerInActiveList+0x62>
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d302      	bcc.n	80061b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80061b0:	2301      	movs	r3, #1
 80061b2:	617b      	str	r3, [r7, #20]
 80061b4:	e007      	b.n	80061c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061b6:	4b07      	ldr	r3, [pc, #28]	; (80061d4 <prvInsertTimerInActiveList+0x80>)
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	3304      	adds	r3, #4
 80061be:	4619      	mov	r1, r3
 80061c0:	4610      	mov	r0, r2
 80061c2:	f7fe f9f4 	bl	80045ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 80061c6:	697b      	ldr	r3, [r7, #20]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20000e30 	.word	0x20000e30
 80061d4:	20000e2c 	.word	0x20000e2c

080061d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08e      	sub	sp, #56	; 0x38
 80061dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061de:	e0ca      	b.n	8006376 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	da18      	bge.n	8006218 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80061e6:	1d3b      	adds	r3, r7, #4
 80061e8:	3304      	adds	r3, #4
 80061ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80061ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10a      	bne.n	8006208 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	61fb      	str	r3, [r7, #28]
}
 8006204:	bf00      	nop
 8006206:	e7fe      	b.n	8006206 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800620e:	6850      	ldr	r0, [r2, #4]
 8006210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006212:	6892      	ldr	r2, [r2, #8]
 8006214:	4611      	mov	r1, r2
 8006216:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	f2c0 80aa 	blt.w	8006374 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d004      	beq.n	8006236 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622e:	3304      	adds	r3, #4
 8006230:	4618      	mov	r0, r3
 8006232:	f7fe f9f5 	bl	8004620 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006236:	463b      	mov	r3, r7
 8006238:	4618      	mov	r0, r3
 800623a:	f7ff ff6b 	bl	8006114 <prvSampleTimeNow>
 800623e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b09      	cmp	r3, #9
 8006244:	f200 8097 	bhi.w	8006376 <prvProcessReceivedCommands+0x19e>
 8006248:	a201      	add	r2, pc, #4	; (adr r2, 8006250 <prvProcessReceivedCommands+0x78>)
 800624a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624e:	bf00      	nop
 8006250:	08006279 	.word	0x08006279
 8006254:	08006279 	.word	0x08006279
 8006258:	08006279 	.word	0x08006279
 800625c:	080062ed 	.word	0x080062ed
 8006260:	08006301 	.word	0x08006301
 8006264:	0800634b 	.word	0x0800634b
 8006268:	08006279 	.word	0x08006279
 800626c:	08006279 	.word	0x08006279
 8006270:	080062ed 	.word	0x080062ed
 8006274:	08006301 	.word	0x08006301
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800627e:	f043 0301 	orr.w	r3, r3, #1
 8006282:	b2da      	uxtb	r2, r3
 8006284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006286:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	18d1      	adds	r1, r2, r3
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006298:	f7ff ff5c 	bl	8006154 <prvInsertTimerInActiveList>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d069      	beq.n	8006376 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062b0:	f003 0304 	and.w	r3, r3, #4
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d05e      	beq.n	8006376 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	441a      	add	r2, r3
 80062c0:	2300      	movs	r3, #0
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	2300      	movs	r3, #0
 80062c6:	2100      	movs	r1, #0
 80062c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ca:	f7ff fe05 	bl	8005ed8 <xTimerGenericCommand>
 80062ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d14f      	bne.n	8006376 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	61bb      	str	r3, [r7, #24]
}
 80062e8:	bf00      	nop
 80062ea:	e7fe      	b.n	80062ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062f2:	f023 0301 	bic.w	r3, r3, #1
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80062fe:	e03a      	b.n	8006376 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006306:	f043 0301 	orr.w	r3, r3, #1
 800630a:	b2da      	uxtb	r2, r3
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006316:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10a      	bne.n	8006336 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	617b      	str	r3, [r7, #20]
}
 8006332:	bf00      	nop
 8006334:	e7fe      	b.n	8006334 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006338:	699a      	ldr	r2, [r3, #24]
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	18d1      	adds	r1, r2, r3
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006344:	f7ff ff06 	bl	8006154 <prvInsertTimerInActiveList>
					break;
 8006348:	e015      	b.n	8006376 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d103      	bne.n	8006360 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800635a:	f000 fbe1 	bl	8006b20 <vPortFree>
 800635e:	e00a      	b.n	8006376 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006366:	f023 0301 	bic.w	r3, r3, #1
 800636a:	b2da      	uxtb	r2, r3
 800636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006372:	e000      	b.n	8006376 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006374:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006376:	4b08      	ldr	r3, [pc, #32]	; (8006398 <prvProcessReceivedCommands+0x1c0>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	1d39      	adds	r1, r7, #4
 800637c:	2200      	movs	r2, #0
 800637e:	4618      	mov	r0, r3
 8006380:	f7fe fc16 	bl	8004bb0 <xQueueReceive>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	f47f af2a 	bne.w	80061e0 <prvProcessReceivedCommands+0x8>
	}
}
 800638c:	bf00      	nop
 800638e:	bf00      	nop
 8006390:	3730      	adds	r7, #48	; 0x30
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20000e34 	.word	0x20000e34

0800639c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b088      	sub	sp, #32
 80063a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063a2:	e048      	b.n	8006436 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063a4:	4b2d      	ldr	r3, [pc, #180]	; (800645c <prvSwitchTimerLists+0xc0>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ae:	4b2b      	ldr	r3, [pc, #172]	; (800645c <prvSwitchTimerLists+0xc0>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	3304      	adds	r3, #4
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fe f92f 	bl	8004620 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d02e      	beq.n	8006436 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	4413      	add	r3, r2
 80063e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d90e      	bls.n	8006408 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063f6:	4b19      	ldr	r3, [pc, #100]	; (800645c <prvSwitchTimerLists+0xc0>)
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3304      	adds	r3, #4
 80063fe:	4619      	mov	r1, r3
 8006400:	4610      	mov	r0, r2
 8006402:	f7fe f8d4 	bl	80045ae <vListInsert>
 8006406:	e016      	b.n	8006436 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006408:	2300      	movs	r3, #0
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	2300      	movs	r3, #0
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	2100      	movs	r1, #0
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f7ff fd60 	bl	8005ed8 <xTimerGenericCommand>
 8006418:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10a      	bne.n	8006436 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	603b      	str	r3, [r7, #0]
}
 8006432:	bf00      	nop
 8006434:	e7fe      	b.n	8006434 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006436:	4b09      	ldr	r3, [pc, #36]	; (800645c <prvSwitchTimerLists+0xc0>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1b1      	bne.n	80063a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006440:	4b06      	ldr	r3, [pc, #24]	; (800645c <prvSwitchTimerLists+0xc0>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006446:	4b06      	ldr	r3, [pc, #24]	; (8006460 <prvSwitchTimerLists+0xc4>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a04      	ldr	r2, [pc, #16]	; (800645c <prvSwitchTimerLists+0xc0>)
 800644c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800644e:	4a04      	ldr	r2, [pc, #16]	; (8006460 <prvSwitchTimerLists+0xc4>)
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	6013      	str	r3, [r2, #0]
}
 8006454:	bf00      	nop
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	20000e2c 	.word	0x20000e2c
 8006460:	20000e30 	.word	0x20000e30

08006464 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800646a:	f000 f96b 	bl	8006744 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800646e:	4b15      	ldr	r3, [pc, #84]	; (80064c4 <prvCheckForValidListAndQueue+0x60>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d120      	bne.n	80064b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006476:	4814      	ldr	r0, [pc, #80]	; (80064c8 <prvCheckForValidListAndQueue+0x64>)
 8006478:	f7fe f848 	bl	800450c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800647c:	4813      	ldr	r0, [pc, #76]	; (80064cc <prvCheckForValidListAndQueue+0x68>)
 800647e:	f7fe f845 	bl	800450c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006482:	4b13      	ldr	r3, [pc, #76]	; (80064d0 <prvCheckForValidListAndQueue+0x6c>)
 8006484:	4a10      	ldr	r2, [pc, #64]	; (80064c8 <prvCheckForValidListAndQueue+0x64>)
 8006486:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006488:	4b12      	ldr	r3, [pc, #72]	; (80064d4 <prvCheckForValidListAndQueue+0x70>)
 800648a:	4a10      	ldr	r2, [pc, #64]	; (80064cc <prvCheckForValidListAndQueue+0x68>)
 800648c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800648e:	2300      	movs	r3, #0
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	4b11      	ldr	r3, [pc, #68]	; (80064d8 <prvCheckForValidListAndQueue+0x74>)
 8006494:	4a11      	ldr	r2, [pc, #68]	; (80064dc <prvCheckForValidListAndQueue+0x78>)
 8006496:	2110      	movs	r1, #16
 8006498:	200a      	movs	r0, #10
 800649a:	f7fe f953 	bl	8004744 <xQueueGenericCreateStatic>
 800649e:	4603      	mov	r3, r0
 80064a0:	4a08      	ldr	r2, [pc, #32]	; (80064c4 <prvCheckForValidListAndQueue+0x60>)
 80064a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80064a4:	4b07      	ldr	r3, [pc, #28]	; (80064c4 <prvCheckForValidListAndQueue+0x60>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80064ac:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <prvCheckForValidListAndQueue+0x60>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	490b      	ldr	r1, [pc, #44]	; (80064e0 <prvCheckForValidListAndQueue+0x7c>)
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fe fd6c 	bl	8004f90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064b8:	f000 f974 	bl	80067a4 <vPortExitCritical>
}
 80064bc:	bf00      	nop
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	20000e34 	.word	0x20000e34
 80064c8:	20000e04 	.word	0x20000e04
 80064cc:	20000e18 	.word	0x20000e18
 80064d0:	20000e2c 	.word	0x20000e2c
 80064d4:	20000e30 	.word	0x20000e30
 80064d8:	20000ee0 	.word	0x20000ee0
 80064dc:	20000e40 	.word	0x20000e40
 80064e0:	08006e24 	.word	0x08006e24

080064e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	3b04      	subs	r3, #4
 80064f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80064fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3b04      	subs	r3, #4
 8006502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f023 0201 	bic.w	r2, r3, #1
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	3b04      	subs	r3, #4
 8006512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006514:	4a0c      	ldr	r2, [pc, #48]	; (8006548 <pxPortInitialiseStack+0x64>)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	3b14      	subs	r3, #20
 800651e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	3b04      	subs	r3, #4
 800652a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f06f 0202 	mvn.w	r2, #2
 8006532:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3b20      	subs	r3, #32
 8006538:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800653a:	68fb      	ldr	r3, [r7, #12]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr
 8006548:	0800654d 	.word	0x0800654d

0800654c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006552:	2300      	movs	r3, #0
 8006554:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006556:	4b12      	ldr	r3, [pc, #72]	; (80065a0 <prvTaskExitError+0x54>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655e:	d00a      	beq.n	8006576 <prvTaskExitError+0x2a>
	__asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	60fb      	str	r3, [r7, #12]
}
 8006572:	bf00      	nop
 8006574:	e7fe      	b.n	8006574 <prvTaskExitError+0x28>
	__asm volatile
 8006576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657a:	f383 8811 	msr	BASEPRI, r3
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	60bb      	str	r3, [r7, #8]
}
 8006588:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800658a:	bf00      	nop
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0fc      	beq.n	800658c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006592:	bf00      	nop
 8006594:	bf00      	nop
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	2000000c 	.word	0x2000000c
	...

080065b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065b0:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <pxCurrentTCBConst2>)
 80065b2:	6819      	ldr	r1, [r3, #0]
 80065b4:	6808      	ldr	r0, [r1, #0]
 80065b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ba:	f380 8809 	msr	PSP, r0
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f04f 0000 	mov.w	r0, #0
 80065c6:	f380 8811 	msr	BASEPRI, r0
 80065ca:	4770      	bx	lr
 80065cc:	f3af 8000 	nop.w

080065d0 <pxCurrentTCBConst2>:
 80065d0:	20000904 	.word	0x20000904
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80065d4:	bf00      	nop
 80065d6:	bf00      	nop

080065d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80065d8:	4808      	ldr	r0, [pc, #32]	; (80065fc <prvPortStartFirstTask+0x24>)
 80065da:	6800      	ldr	r0, [r0, #0]
 80065dc:	6800      	ldr	r0, [r0, #0]
 80065de:	f380 8808 	msr	MSP, r0
 80065e2:	f04f 0000 	mov.w	r0, #0
 80065e6:	f380 8814 	msr	CONTROL, r0
 80065ea:	b662      	cpsie	i
 80065ec:	b661      	cpsie	f
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	df00      	svc	0
 80065f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80065fa:	bf00      	nop
 80065fc:	e000ed08 	.word	0xe000ed08

08006600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006606:	4b46      	ldr	r3, [pc, #280]	; (8006720 <xPortStartScheduler+0x120>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a46      	ldr	r2, [pc, #280]	; (8006724 <xPortStartScheduler+0x124>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d10a      	bne.n	8006626 <xPortStartScheduler+0x26>
	__asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	613b      	str	r3, [r7, #16]
}
 8006622:	bf00      	nop
 8006624:	e7fe      	b.n	8006624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006626:	4b3e      	ldr	r3, [pc, #248]	; (8006720 <xPortStartScheduler+0x120>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a3f      	ldr	r2, [pc, #252]	; (8006728 <xPortStartScheduler+0x128>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d10a      	bne.n	8006646 <xPortStartScheduler+0x46>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	60fb      	str	r3, [r7, #12]
}
 8006642:	bf00      	nop
 8006644:	e7fe      	b.n	8006644 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006646:	4b39      	ldr	r3, [pc, #228]	; (800672c <xPortStartScheduler+0x12c>)
 8006648:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	b2db      	uxtb	r3, r3
 8006650:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	22ff      	movs	r2, #255	; 0xff
 8006656:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	b2db      	uxtb	r3, r3
 800665e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006660:	78fb      	ldrb	r3, [r7, #3]
 8006662:	b2db      	uxtb	r3, r3
 8006664:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006668:	b2da      	uxtb	r2, r3
 800666a:	4b31      	ldr	r3, [pc, #196]	; (8006730 <xPortStartScheduler+0x130>)
 800666c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800666e:	4b31      	ldr	r3, [pc, #196]	; (8006734 <xPortStartScheduler+0x134>)
 8006670:	2207      	movs	r2, #7
 8006672:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006674:	e009      	b.n	800668a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006676:	4b2f      	ldr	r3, [pc, #188]	; (8006734 <xPortStartScheduler+0x134>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3b01      	subs	r3, #1
 800667c:	4a2d      	ldr	r2, [pc, #180]	; (8006734 <xPortStartScheduler+0x134>)
 800667e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006680:	78fb      	ldrb	r3, [r7, #3]
 8006682:	b2db      	uxtb	r3, r3
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	b2db      	uxtb	r3, r3
 8006688:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800668a:	78fb      	ldrb	r3, [r7, #3]
 800668c:	b2db      	uxtb	r3, r3
 800668e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006692:	2b80      	cmp	r3, #128	; 0x80
 8006694:	d0ef      	beq.n	8006676 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006696:	4b27      	ldr	r3, [pc, #156]	; (8006734 <xPortStartScheduler+0x134>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f1c3 0307 	rsb	r3, r3, #7
 800669e:	2b04      	cmp	r3, #4
 80066a0:	d00a      	beq.n	80066b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	60bb      	str	r3, [r7, #8]
}
 80066b4:	bf00      	nop
 80066b6:	e7fe      	b.n	80066b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066b8:	4b1e      	ldr	r3, [pc, #120]	; (8006734 <xPortStartScheduler+0x134>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	021b      	lsls	r3, r3, #8
 80066be:	4a1d      	ldr	r2, [pc, #116]	; (8006734 <xPortStartScheduler+0x134>)
 80066c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066c2:	4b1c      	ldr	r3, [pc, #112]	; (8006734 <xPortStartScheduler+0x134>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066ca:	4a1a      	ldr	r2, [pc, #104]	; (8006734 <xPortStartScheduler+0x134>)
 80066cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066d6:	4b18      	ldr	r3, [pc, #96]	; (8006738 <xPortStartScheduler+0x138>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a17      	ldr	r2, [pc, #92]	; (8006738 <xPortStartScheduler+0x138>)
 80066dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066e2:	4b15      	ldr	r3, [pc, #84]	; (8006738 <xPortStartScheduler+0x138>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a14      	ldr	r2, [pc, #80]	; (8006738 <xPortStartScheduler+0x138>)
 80066e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80066ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066ee:	f000 f8dd 	bl	80068ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066f2:	4b12      	ldr	r3, [pc, #72]	; (800673c <xPortStartScheduler+0x13c>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80066f8:	f000 f8fc 	bl	80068f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066fc:	4b10      	ldr	r3, [pc, #64]	; (8006740 <xPortStartScheduler+0x140>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a0f      	ldr	r2, [pc, #60]	; (8006740 <xPortStartScheduler+0x140>)
 8006702:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006706:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006708:	f7ff ff66 	bl	80065d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800670c:	f7ff f850 	bl	80057b0 <vTaskSwitchContext>
	prvTaskExitError();
 8006710:	f7ff ff1c 	bl	800654c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	e000ed00 	.word	0xe000ed00
 8006724:	410fc271 	.word	0x410fc271
 8006728:	410fc270 	.word	0x410fc270
 800672c:	e000e400 	.word	0xe000e400
 8006730:	20000f30 	.word	0x20000f30
 8006734:	20000f34 	.word	0x20000f34
 8006738:	e000ed20 	.word	0xe000ed20
 800673c:	2000000c 	.word	0x2000000c
 8006740:	e000ef34 	.word	0xe000ef34

08006744 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	607b      	str	r3, [r7, #4]
}
 800675c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800675e:	4b0f      	ldr	r3, [pc, #60]	; (800679c <vPortEnterCritical+0x58>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3301      	adds	r3, #1
 8006764:	4a0d      	ldr	r2, [pc, #52]	; (800679c <vPortEnterCritical+0x58>)
 8006766:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006768:	4b0c      	ldr	r3, [pc, #48]	; (800679c <vPortEnterCritical+0x58>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d10f      	bne.n	8006790 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006770:	4b0b      	ldr	r3, [pc, #44]	; (80067a0 <vPortEnterCritical+0x5c>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <vPortEnterCritical+0x4c>
	__asm volatile
 800677a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677e:	f383 8811 	msr	BASEPRI, r3
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	603b      	str	r3, [r7, #0]
}
 800678c:	bf00      	nop
 800678e:	e7fe      	b.n	800678e <vPortEnterCritical+0x4a>
	}
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	2000000c 	.word	0x2000000c
 80067a0:	e000ed04 	.word	0xe000ed04

080067a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067aa:	4b12      	ldr	r3, [pc, #72]	; (80067f4 <vPortExitCritical+0x50>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10a      	bne.n	80067c8 <vPortExitCritical+0x24>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	607b      	str	r3, [r7, #4]
}
 80067c4:	bf00      	nop
 80067c6:	e7fe      	b.n	80067c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80067c8:	4b0a      	ldr	r3, [pc, #40]	; (80067f4 <vPortExitCritical+0x50>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	3b01      	subs	r3, #1
 80067ce:	4a09      	ldr	r2, [pc, #36]	; (80067f4 <vPortExitCritical+0x50>)
 80067d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067d2:	4b08      	ldr	r3, [pc, #32]	; (80067f4 <vPortExitCritical+0x50>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d105      	bne.n	80067e6 <vPortExitCritical+0x42>
 80067da:	2300      	movs	r3, #0
 80067dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	f383 8811 	msr	BASEPRI, r3
}
 80067e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80067e6:	bf00      	nop
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	2000000c 	.word	0x2000000c
	...

08006800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006800:	f3ef 8009 	mrs	r0, PSP
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	4b15      	ldr	r3, [pc, #84]	; (8006860 <pxCurrentTCBConst>)
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	f01e 0f10 	tst.w	lr, #16
 8006810:	bf08      	it	eq
 8006812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800681a:	6010      	str	r0, [r2, #0]
 800681c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006824:	f380 8811 	msr	BASEPRI, r0
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f7fe ffbe 	bl	80057b0 <vTaskSwitchContext>
 8006834:	f04f 0000 	mov.w	r0, #0
 8006838:	f380 8811 	msr	BASEPRI, r0
 800683c:	bc09      	pop	{r0, r3}
 800683e:	6819      	ldr	r1, [r3, #0]
 8006840:	6808      	ldr	r0, [r1, #0]
 8006842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006846:	f01e 0f10 	tst.w	lr, #16
 800684a:	bf08      	it	eq
 800684c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006850:	f380 8809 	msr	PSP, r0
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	f3af 8000 	nop.w

08006860 <pxCurrentTCBConst>:
 8006860:	20000904 	.word	0x20000904
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop

08006868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
	__asm volatile
 800686e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	607b      	str	r3, [r7, #4]
}
 8006880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006882:	f7fe fedb 	bl	800563c <xTaskIncrementTick>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800688c:	4b06      	ldr	r3, [pc, #24]	; (80068a8 <xPortSysTickHandler+0x40>)
 800688e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	2300      	movs	r3, #0
 8006896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	f383 8811 	msr	BASEPRI, r3
}
 800689e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068a0:	bf00      	nop
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	e000ed04 	.word	0xe000ed04

080068ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068ac:	b480      	push	{r7}
 80068ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068b0:	4b0b      	ldr	r3, [pc, #44]	; (80068e0 <vPortSetupTimerInterrupt+0x34>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068b6:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <vPortSetupTimerInterrupt+0x38>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068bc:	4b0a      	ldr	r3, [pc, #40]	; (80068e8 <vPortSetupTimerInterrupt+0x3c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a0a      	ldr	r2, [pc, #40]	; (80068ec <vPortSetupTimerInterrupt+0x40>)
 80068c2:	fba2 2303 	umull	r2, r3, r2, r3
 80068c6:	099b      	lsrs	r3, r3, #6
 80068c8:	4a09      	ldr	r2, [pc, #36]	; (80068f0 <vPortSetupTimerInterrupt+0x44>)
 80068ca:	3b01      	subs	r3, #1
 80068cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068ce:	4b04      	ldr	r3, [pc, #16]	; (80068e0 <vPortSetupTimerInterrupt+0x34>)
 80068d0:	2207      	movs	r2, #7
 80068d2:	601a      	str	r2, [r3, #0]
}
 80068d4:	bf00      	nop
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	e000e010 	.word	0xe000e010
 80068e4:	e000e018 	.word	0xe000e018
 80068e8:	20000000 	.word	0x20000000
 80068ec:	10624dd3 	.word	0x10624dd3
 80068f0:	e000e014 	.word	0xe000e014

080068f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80068f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006904 <vPortEnableVFP+0x10>
 80068f8:	6801      	ldr	r1, [r0, #0]
 80068fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80068fe:	6001      	str	r1, [r0, #0]
 8006900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006902:	bf00      	nop
 8006904:	e000ed88 	.word	0xe000ed88

08006908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800690e:	f3ef 8305 	mrs	r3, IPSR
 8006912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2b0f      	cmp	r3, #15
 8006918:	d914      	bls.n	8006944 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800691a:	4a17      	ldr	r2, [pc, #92]	; (8006978 <vPortValidateInterruptPriority+0x70>)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4413      	add	r3, r2
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006924:	4b15      	ldr	r3, [pc, #84]	; (800697c <vPortValidateInterruptPriority+0x74>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	7afa      	ldrb	r2, [r7, #11]
 800692a:	429a      	cmp	r2, r3
 800692c:	d20a      	bcs.n	8006944 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	607b      	str	r3, [r7, #4]
}
 8006940:	bf00      	nop
 8006942:	e7fe      	b.n	8006942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006944:	4b0e      	ldr	r3, [pc, #56]	; (8006980 <vPortValidateInterruptPriority+0x78>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800694c:	4b0d      	ldr	r3, [pc, #52]	; (8006984 <vPortValidateInterruptPriority+0x7c>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	429a      	cmp	r2, r3
 8006952:	d90a      	bls.n	800696a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	603b      	str	r3, [r7, #0]
}
 8006966:	bf00      	nop
 8006968:	e7fe      	b.n	8006968 <vPortValidateInterruptPriority+0x60>
	}
 800696a:	bf00      	nop
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	e000e3f0 	.word	0xe000e3f0
 800697c:	20000f30 	.word	0x20000f30
 8006980:	e000ed0c 	.word	0xe000ed0c
 8006984:	20000f34 	.word	0x20000f34

08006988 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b08a      	sub	sp, #40	; 0x28
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006990:	2300      	movs	r3, #0
 8006992:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006994:	f7fe fd96 	bl	80054c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006998:	4b5b      	ldr	r3, [pc, #364]	; (8006b08 <pvPortMalloc+0x180>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069a0:	f000 f920 	bl	8006be4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069a4:	4b59      	ldr	r3, [pc, #356]	; (8006b0c <pvPortMalloc+0x184>)
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4013      	ands	r3, r2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f040 8093 	bne.w	8006ad8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d01d      	beq.n	80069f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80069b8:	2208      	movs	r2, #8
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4413      	add	r3, r2
 80069be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f003 0307 	and.w	r3, r3, #7
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d014      	beq.n	80069f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f023 0307 	bic.w	r3, r3, #7
 80069d0:	3308      	adds	r3, #8
 80069d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00a      	beq.n	80069f4 <pvPortMalloc+0x6c>
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	617b      	str	r3, [r7, #20]
}
 80069f0:	bf00      	nop
 80069f2:	e7fe      	b.n	80069f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d06e      	beq.n	8006ad8 <pvPortMalloc+0x150>
 80069fa:	4b45      	ldr	r3, [pc, #276]	; (8006b10 <pvPortMalloc+0x188>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d869      	bhi.n	8006ad8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a04:	4b43      	ldr	r3, [pc, #268]	; (8006b14 <pvPortMalloc+0x18c>)
 8006a06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a08:	4b42      	ldr	r3, [pc, #264]	; (8006b14 <pvPortMalloc+0x18c>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a0e:	e004      	b.n	8006a1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d903      	bls.n	8006a2c <pvPortMalloc+0xa4>
 8006a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1f1      	bne.n	8006a10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a2c:	4b36      	ldr	r3, [pc, #216]	; (8006b08 <pvPortMalloc+0x180>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d050      	beq.n	8006ad8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2208      	movs	r2, #8
 8006a3c:	4413      	add	r3, r2
 8006a3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	6a3b      	ldr	r3, [r7, #32]
 8006a46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	1ad2      	subs	r2, r2, r3
 8006a50:	2308      	movs	r3, #8
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d91f      	bls.n	8006a98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00a      	beq.n	8006a80 <pvPortMalloc+0xf8>
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	613b      	str	r3, [r7, #16]
}
 8006a7c:	bf00      	nop
 8006a7e:	e7fe      	b.n	8006a7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	1ad2      	subs	r2, r2, r3
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a92:	69b8      	ldr	r0, [r7, #24]
 8006a94:	f000 f908 	bl	8006ca8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a98:	4b1d      	ldr	r3, [pc, #116]	; (8006b10 <pvPortMalloc+0x188>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	4a1b      	ldr	r2, [pc, #108]	; (8006b10 <pvPortMalloc+0x188>)
 8006aa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006aa6:	4b1a      	ldr	r3, [pc, #104]	; (8006b10 <pvPortMalloc+0x188>)
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	4b1b      	ldr	r3, [pc, #108]	; (8006b18 <pvPortMalloc+0x190>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d203      	bcs.n	8006aba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ab2:	4b17      	ldr	r3, [pc, #92]	; (8006b10 <pvPortMalloc+0x188>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a18      	ldr	r2, [pc, #96]	; (8006b18 <pvPortMalloc+0x190>)
 8006ab8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	4b13      	ldr	r3, [pc, #76]	; (8006b0c <pvPortMalloc+0x184>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	2200      	movs	r2, #0
 8006acc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ace:	4b13      	ldr	r3, [pc, #76]	; (8006b1c <pvPortMalloc+0x194>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	4a11      	ldr	r2, [pc, #68]	; (8006b1c <pvPortMalloc+0x194>)
 8006ad6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ad8:	f7fe fd02 	bl	80054e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	f003 0307 	and.w	r3, r3, #7
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <pvPortMalloc+0x174>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	60fb      	str	r3, [r7, #12]
}
 8006af8:	bf00      	nop
 8006afa:	e7fe      	b.n	8006afa <pvPortMalloc+0x172>
	return pvReturn;
 8006afc:	69fb      	ldr	r3, [r7, #28]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3728      	adds	r7, #40	; 0x28
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20004b40 	.word	0x20004b40
 8006b0c:	20004b54 	.word	0x20004b54
 8006b10:	20004b44 	.word	0x20004b44
 8006b14:	20004b38 	.word	0x20004b38
 8006b18:	20004b48 	.word	0x20004b48
 8006b1c:	20004b4c 	.word	0x20004b4c

08006b20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d04d      	beq.n	8006bce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b32:	2308      	movs	r3, #8
 8006b34:	425b      	negs	r3, r3
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	4413      	add	r3, r2
 8006b3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	4b24      	ldr	r3, [pc, #144]	; (8006bd8 <vPortFree+0xb8>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4013      	ands	r3, r2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10a      	bne.n	8006b64 <vPortFree+0x44>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	60fb      	str	r3, [r7, #12]
}
 8006b60:	bf00      	nop
 8006b62:	e7fe      	b.n	8006b62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00a      	beq.n	8006b82 <vPortFree+0x62>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	60bb      	str	r3, [r7, #8]
}
 8006b7e:	bf00      	nop
 8006b80:	e7fe      	b.n	8006b80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	4b14      	ldr	r3, [pc, #80]	; (8006bd8 <vPortFree+0xb8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d01e      	beq.n	8006bce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d11a      	bne.n	8006bce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	4b0e      	ldr	r3, [pc, #56]	; (8006bd8 <vPortFree+0xb8>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	43db      	mvns	r3, r3
 8006ba2:	401a      	ands	r2, r3
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ba8:	f7fe fc8c 	bl	80054c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	4b0a      	ldr	r3, [pc, #40]	; (8006bdc <vPortFree+0xbc>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	4a09      	ldr	r2, [pc, #36]	; (8006bdc <vPortFree+0xbc>)
 8006bb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bba:	6938      	ldr	r0, [r7, #16]
 8006bbc:	f000 f874 	bl	8006ca8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006bc0:	4b07      	ldr	r3, [pc, #28]	; (8006be0 <vPortFree+0xc0>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	4a06      	ldr	r2, [pc, #24]	; (8006be0 <vPortFree+0xc0>)
 8006bc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006bca:	f7fe fc89 	bl	80054e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bce:	bf00      	nop
 8006bd0:	3718      	adds	r7, #24
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20004b54 	.word	0x20004b54
 8006bdc:	20004b44 	.word	0x20004b44
 8006be0:	20004b50 	.word	0x20004b50

08006be4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006bea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006bee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006bf0:	4b27      	ldr	r3, [pc, #156]	; (8006c90 <prvHeapInit+0xac>)
 8006bf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f003 0307 	and.w	r3, r3, #7
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00c      	beq.n	8006c18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	3307      	adds	r3, #7
 8006c02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f023 0307 	bic.w	r3, r3, #7
 8006c0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	4a1f      	ldr	r2, [pc, #124]	; (8006c90 <prvHeapInit+0xac>)
 8006c14:	4413      	add	r3, r2
 8006c16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c1c:	4a1d      	ldr	r2, [pc, #116]	; (8006c94 <prvHeapInit+0xb0>)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c22:	4b1c      	ldr	r3, [pc, #112]	; (8006c94 <prvHeapInit+0xb0>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c30:	2208      	movs	r2, #8
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	1a9b      	subs	r3, r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 0307 	bic.w	r3, r3, #7
 8006c3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4a15      	ldr	r2, [pc, #84]	; (8006c98 <prvHeapInit+0xb4>)
 8006c44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c46:	4b14      	ldr	r3, [pc, #80]	; (8006c98 <prvHeapInit+0xb4>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c4e:	4b12      	ldr	r3, [pc, #72]	; (8006c98 <prvHeapInit+0xb4>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2200      	movs	r2, #0
 8006c54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	1ad2      	subs	r2, r2, r3
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c64:	4b0c      	ldr	r3, [pc, #48]	; (8006c98 <prvHeapInit+0xb4>)
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	4a0a      	ldr	r2, [pc, #40]	; (8006c9c <prvHeapInit+0xb8>)
 8006c72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	4a09      	ldr	r2, [pc, #36]	; (8006ca0 <prvHeapInit+0xbc>)
 8006c7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c7c:	4b09      	ldr	r3, [pc, #36]	; (8006ca4 <prvHeapInit+0xc0>)
 8006c7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c82:	601a      	str	r2, [r3, #0]
}
 8006c84:	bf00      	nop
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	20000f38 	.word	0x20000f38
 8006c94:	20004b38 	.word	0x20004b38
 8006c98:	20004b40 	.word	0x20004b40
 8006c9c:	20004b48 	.word	0x20004b48
 8006ca0:	20004b44 	.word	0x20004b44
 8006ca4:	20004b54 	.word	0x20004b54

08006ca8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cb0:	4b28      	ldr	r3, [pc, #160]	; (8006d54 <prvInsertBlockIntoFreeList+0xac>)
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	e002      	b.n	8006cbc <prvInsertBlockIntoFreeList+0x14>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d8f7      	bhi.n	8006cb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d108      	bne.n	8006cea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	441a      	add	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	441a      	add	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d118      	bne.n	8006d30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	4b15      	ldr	r3, [pc, #84]	; (8006d58 <prvInsertBlockIntoFreeList+0xb0>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d00d      	beq.n	8006d26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	441a      	add	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	e008      	b.n	8006d38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d26:	4b0c      	ldr	r3, [pc, #48]	; (8006d58 <prvInsertBlockIntoFreeList+0xb0>)
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	e003      	b.n	8006d38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d002      	beq.n	8006d46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d46:	bf00      	nop
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	20004b38 	.word	0x20004b38
 8006d58:	20004b40 	.word	0x20004b40

08006d5c <__libc_init_array>:
 8006d5c:	b570      	push	{r4, r5, r6, lr}
 8006d5e:	4d0d      	ldr	r5, [pc, #52]	; (8006d94 <__libc_init_array+0x38>)
 8006d60:	4c0d      	ldr	r4, [pc, #52]	; (8006d98 <__libc_init_array+0x3c>)
 8006d62:	1b64      	subs	r4, r4, r5
 8006d64:	10a4      	asrs	r4, r4, #2
 8006d66:	2600      	movs	r6, #0
 8006d68:	42a6      	cmp	r6, r4
 8006d6a:	d109      	bne.n	8006d80 <__libc_init_array+0x24>
 8006d6c:	4d0b      	ldr	r5, [pc, #44]	; (8006d9c <__libc_init_array+0x40>)
 8006d6e:	4c0c      	ldr	r4, [pc, #48]	; (8006da0 <__libc_init_array+0x44>)
 8006d70:	f000 f82e 	bl	8006dd0 <_init>
 8006d74:	1b64      	subs	r4, r4, r5
 8006d76:	10a4      	asrs	r4, r4, #2
 8006d78:	2600      	movs	r6, #0
 8006d7a:	42a6      	cmp	r6, r4
 8006d7c:	d105      	bne.n	8006d8a <__libc_init_array+0x2e>
 8006d7e:	bd70      	pop	{r4, r5, r6, pc}
 8006d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d84:	4798      	blx	r3
 8006d86:	3601      	adds	r6, #1
 8006d88:	e7ee      	b.n	8006d68 <__libc_init_array+0xc>
 8006d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d8e:	4798      	blx	r3
 8006d90:	3601      	adds	r6, #1
 8006d92:	e7f2      	b.n	8006d7a <__libc_init_array+0x1e>
 8006d94:	08006eb8 	.word	0x08006eb8
 8006d98:	08006eb8 	.word	0x08006eb8
 8006d9c:	08006eb8 	.word	0x08006eb8
 8006da0:	08006ebc 	.word	0x08006ebc

08006da4 <memcpy>:
 8006da4:	440a      	add	r2, r1
 8006da6:	4291      	cmp	r1, r2
 8006da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dac:	d100      	bne.n	8006db0 <memcpy+0xc>
 8006dae:	4770      	bx	lr
 8006db0:	b510      	push	{r4, lr}
 8006db2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006db6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dba:	4291      	cmp	r1, r2
 8006dbc:	d1f9      	bne.n	8006db2 <memcpy+0xe>
 8006dbe:	bd10      	pop	{r4, pc}

08006dc0 <memset>:
 8006dc0:	4402      	add	r2, r0
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d100      	bne.n	8006dca <memset+0xa>
 8006dc8:	4770      	bx	lr
 8006dca:	f803 1b01 	strb.w	r1, [r3], #1
 8006dce:	e7f9      	b.n	8006dc4 <memset+0x4>

08006dd0 <_init>:
 8006dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd2:	bf00      	nop
 8006dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dd6:	bc08      	pop	{r3}
 8006dd8:	469e      	mov	lr, r3
 8006dda:	4770      	bx	lr

08006ddc <_fini>:
 8006ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dde:	bf00      	nop
 8006de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de2:	bc08      	pop	{r3}
 8006de4:	469e      	mov	lr, r3
 8006de6:	4770      	bx	lr
