
stm32f411_bot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08007a90  08007a90  00017a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c54  08007c54  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007c54  08007c54  00017c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c5c  08007c5c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c5c  08007c5c  00017c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c60  08007c60  00017c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c10  20000074  08007cd8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c84  08007cd8  00024c84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f899  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a23  00000000  00000000  0003f93d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a08  00000000  00000000  00043360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018d8  00000000  00000000  00044d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003bf5  00000000  00000000  00046640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d0b4  00000000  00000000  0004a235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7d33  00000000  00000000  000672e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f01c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007314  00000000  00000000  0010f06c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007a78 	.word	0x08007a78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08007a78 	.word	0x08007a78

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fe60 	bl	80011ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f84a 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 fa26 	bl	8000940 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004f4:	f000 f9fa 	bl	80008ec <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80004f8:	f000 f8a2 	bl	8000640 <MX_ADC1_Init>
  MX_I2C1_Init();
 80004fc:	f000 f8f2 	bl	80006e4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000500:	f000 f91e 	bl	8000740 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000504:	f000 f952 	bl	80007ac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000508:	4a12      	ldr	r2, [pc, #72]	; (8000554 <main+0x70>)
 800050a:	2100      	movs	r1, #0
 800050c:	4812      	ldr	r0, [pc, #72]	; (8000558 <main+0x74>)
 800050e:	f004 fc87 	bl	8004e20 <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a11      	ldr	r2, [pc, #68]	; (800055c <main+0x78>)
 8000516:	6013      	str	r3, [r2, #0]
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8000518:	4a11      	ldr	r2, [pc, #68]	; (8000560 <main+0x7c>)
 800051a:	2100      	movs	r1, #0
 800051c:	4811      	ldr	r0, [pc, #68]	; (8000564 <main+0x80>)
 800051e:	f004 fc7f 	bl	8004e20 <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a10      	ldr	r2, [pc, #64]	; (8000568 <main+0x84>)
 8000526:	6013      	str	r3, [r2, #0]
  accelTaskHandle = osThreadNew(StartAccelTask, NULL, &accelTask_attributes);
 8000528:	4a10      	ldr	r2, [pc, #64]	; (800056c <main+0x88>)
 800052a:	2100      	movs	r1, #0
 800052c:	4810      	ldr	r0, [pc, #64]	; (8000570 <main+0x8c>)
 800052e:	f004 fc77 	bl	8004e20 <osThreadNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <main+0x90>)
 8000536:	6013      	str	r3, [r2, #0]
  consoleTaskHandle = osThreadNew(StartConsoleTask, NULL, &consoleTask_attributes);
 8000538:	4a0f      	ldr	r2, [pc, #60]	; (8000578 <main+0x94>)
 800053a:	2100      	movs	r1, #0
 800053c:	480f      	ldr	r0, [pc, #60]	; (800057c <main+0x98>)
 800053e:	f004 fc6f 	bl	8004e20 <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <main+0x9c>)
 8000546:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000548:	f004 fc20 	bl	8004d8c <osKernelInitialize>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 800054c:	f004 fc42 	bl	8004dd4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000550:	e7fe      	b.n	8000550 <main+0x6c>
 8000552:	bf00      	nop
 8000554:	08007b4c 	.word	0x08007b4c
 8000558:	080009e1 	.word	0x080009e1
 800055c:	20000210 	.word	0x20000210
 8000560:	08007b70 	.word	0x08007b70
 8000564:	080009f1 	.word	0x080009f1
 8000568:	20000214 	.word	0x20000214
 800056c:	08007b94 	.word	0x08007b94
 8000570:	08000a31 	.word	0x08000a31
 8000574:	20000218 	.word	0x20000218
 8000578:	08007bb8 	.word	0x08007bb8
 800057c:	08000ad9 	.word	0x08000ad9
 8000580:	2000021c 	.word	0x2000021c

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	; 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f007 f9a6 	bl	80078e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b22      	ldr	r3, [pc, #136]	; (8000638 <SystemClock_Config+0xb4>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a21      	ldr	r2, [pc, #132]	; (8000638 <SystemClock_Config+0xb4>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <SystemClock_Config+0xb4>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <SystemClock_Config+0xb8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a1b      	ldr	r2, [pc, #108]	; (800063c <SystemClock_Config+0xb8>)
 80005ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b19      	ldr	r3, [pc, #100]	; (800063c <SystemClock_Config+0xb8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e0:	2302      	movs	r3, #2
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e4:	2301      	movs	r3, #1
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e8:	2310      	movs	r3, #16
 80005ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ec:	2300      	movs	r3, #0
 80005ee:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 0320 	add.w	r3, r7, #32
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 fe7d 	bl	80022f4 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000600:	f000 fb40 	bl	8000c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000608:	2300      	movs	r3, #0
 800060a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f002 f8e0 	bl	80027e4 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800062a:	f000 fb2b 	bl	8000c84 <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3750      	adds	r7, #80	; 0x50
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000646:	463b      	mov	r3, r7
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000652:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <MX_ADC1_Init+0x98>)
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <MX_ADC1_Init+0x9c>)
 8000656:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_ADC1_Init+0x98>)
 800065a:	2200      	movs	r2, #0
 800065c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800065e:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <MX_ADC1_Init+0x98>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000664:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <MX_ADC1_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800066a:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_ADC1_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000670:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <MX_ADC1_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000678:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <MX_ADC1_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800067e:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <MX_ADC1_Init+0x98>)
 8000680:	4a17      	ldr	r2, [pc, #92]	; (80006e0 <MX_ADC1_Init+0xa0>)
 8000682:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_ADC1_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_ADC1_Init+0x98>)
 800068c:	2201      	movs	r2, #1
 800068e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_ADC1_Init+0x98>)
 8000692:	2200      	movs	r2, #0
 8000694:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_ADC1_Init+0x98>)
 800069a:	2201      	movs	r2, #1
 800069c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800069e:	480e      	ldr	r0, [pc, #56]	; (80006d8 <MX_ADC1_Init+0x98>)
 80006a0:	f000 fdc6 	bl	8001230 <HAL_ADC_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006aa:	f000 faeb 	bl	8000c84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ae:	2301      	movs	r3, #1
 80006b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ba:	463b      	mov	r3, r7
 80006bc:	4619      	mov	r1, r3
 80006be:	4806      	ldr	r0, [pc, #24]	; (80006d8 <MX_ADC1_Init+0x98>)
 80006c0:	f000 ff7a 	bl	80015b8 <HAL_ADC_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006ca:	f000 fadb 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000090 	.word	0x20000090
 80006dc:	40012000 	.word	0x40012000
 80006e0:	0f000001 	.word	0x0f000001

080006e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_I2C1_Init+0x50>)
 80006ea:	4a13      	ldr	r2, [pc, #76]	; (8000738 <MX_I2C1_Init+0x54>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_I2C1_Init+0x50>)
 80006f0:	4a12      	ldr	r2, [pc, #72]	; (800073c <MX_I2C1_Init+0x58>)
 80006f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_I2C1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_I2C1_Init+0x50>)
 8000702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000706:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_I2C1_Init+0x50>)
 8000722:	f001 fca3 	bl	800206c <HAL_I2C_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800072c:	f000 faaa 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000d8 	.word	0x200000d8
 8000738:	40005400 	.word	0x40005400
 800073c:	000186a0 	.word	0x000186a0

08000740 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000746:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <MX_SPI1_Init+0x68>)
 8000748:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_SPI1_Init+0x64>)
 800074c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000750:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_SPI1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_SPI1_Init+0x64>)
 800076c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000770:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_SPI1_Init+0x64>)
 800078c:	220a      	movs	r2, #10
 800078e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000792:	f002 fa39 	bl	8002c08 <HAL_SPI_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800079c:	f000 fa72 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000012c 	.word	0x2000012c
 80007a8:	40013000 	.word	0x40013000

080007ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b096      	sub	sp, #88	; 0x58
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
 80007da:	615a      	str	r2, [r3, #20]
 80007dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2220      	movs	r2, #32
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f007 f87d 	bl	80078e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007ea:	4b3e      	ldr	r3, [pc, #248]	; (80008e4 <MX_TIM1_Init+0x138>)
 80007ec:	4a3e      	ldr	r2, [pc, #248]	; (80008e8 <MX_TIM1_Init+0x13c>)
 80007ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007f0:	4b3c      	ldr	r3, [pc, #240]	; (80008e4 <MX_TIM1_Init+0x138>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f6:	4b3b      	ldr	r3, [pc, #236]	; (80008e4 <MX_TIM1_Init+0x138>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007fc:	4b39      	ldr	r3, [pc, #228]	; (80008e4 <MX_TIM1_Init+0x138>)
 80007fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000802:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000804:	4b37      	ldr	r3, [pc, #220]	; (80008e4 <MX_TIM1_Init+0x138>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800080a:	4b36      	ldr	r3, [pc, #216]	; (80008e4 <MX_TIM1_Init+0x138>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000810:	4b34      	ldr	r3, [pc, #208]	; (80008e4 <MX_TIM1_Init+0x138>)
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000816:	4833      	ldr	r0, [pc, #204]	; (80008e4 <MX_TIM1_Init+0x138>)
 8000818:	f002 fa7f 	bl	8002d1a <HAL_TIM_Base_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000822:	f000 fa2f 	bl	8000c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800082c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000830:	4619      	mov	r1, r3
 8000832:	482c      	ldr	r0, [pc, #176]	; (80008e4 <MX_TIM1_Init+0x138>)
 8000834:	f002 fd46 	bl	80032c4 <HAL_TIM_ConfigClockSource>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800083e:	f000 fa21 	bl	8000c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000842:	4828      	ldr	r0, [pc, #160]	; (80008e4 <MX_TIM1_Init+0x138>)
 8000844:	f002 fb1a 	bl	8002e7c <HAL_TIM_PWM_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800084e:	f000 fa19 	bl	8000c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000852:	2300      	movs	r3, #0
 8000854:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800085a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800085e:	4619      	mov	r1, r3
 8000860:	4820      	ldr	r0, [pc, #128]	; (80008e4 <MX_TIM1_Init+0x138>)
 8000862:	f003 f8c5 	bl	80039f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800086c:	f000 fa0a 	bl	8000c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000870:	2360      	movs	r3, #96	; 0x60
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000878:	2300      	movs	r3, #0
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800087c:	2300      	movs	r3, #0
 800087e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000884:	2300      	movs	r3, #0
 8000886:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000888:	2300      	movs	r3, #0
 800088a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800088c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000890:	2200      	movs	r2, #0
 8000892:	4619      	mov	r1, r3
 8000894:	4813      	ldr	r0, [pc, #76]	; (80008e4 <MX_TIM1_Init+0x138>)
 8000896:	f002 fc53 	bl	8003140 <HAL_TIM_PWM_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80008a0:	f000 f9f0 	bl	8000c84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	4619      	mov	r1, r3
 80008c6:	4807      	ldr	r0, [pc, #28]	; (80008e4 <MX_TIM1_Init+0x138>)
 80008c8:	f003 f900 	bl	8003acc <HAL_TIMEx_ConfigBreakDeadTime>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80008d2:	f000 f9d7 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008d6:	4803      	ldr	r0, [pc, #12]	; (80008e4 <MX_TIM1_Init+0x138>)
 80008d8:	f000 fb02 	bl	8000ee0 <HAL_TIM_MspPostInit>

}
 80008dc:	bf00      	nop
 80008de:	3758      	adds	r7, #88	; 0x58
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000184 	.word	0x20000184
 80008e8:	40010000 	.word	0x40010000

080008ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <MX_USART1_UART_Init+0x50>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 8000924:	f003 f938 	bl	8003b98 <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800092e:	f000 f9a9 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200001cc 	.word	0x200001cc
 800093c:	40011000 	.word	0x40011000

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <MX_GPIO_Init+0x94>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a1d      	ldr	r2, [pc, #116]	; (80009d4 <MX_GPIO_Init+0x94>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_GPIO_Init+0x94>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_GPIO_Init+0x94>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a16      	ldr	r2, [pc, #88]	; (80009d4 <MX_GPIO_Init+0x94>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_GPIO_Init+0x94>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led_r_Pin|led_g_Pin|led_b_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2107      	movs	r1, #7
 8000992:	4811      	ldr	r0, [pc, #68]	; (80009d8 <MX_GPIO_Init+0x98>)
 8000994:	f001 fb36 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : xtilt_pwm_in_Pin ytilt_pwm_in_Pin */
  GPIO_InitStruct.Pin = xtilt_pwm_in_Pin|ytilt_pwm_in_Pin;
 8000998:	2318      	movs	r3, #24
 800099a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	2300      	movs	r3, #0
 800099e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4619      	mov	r1, r3
 80009aa:	480c      	ldr	r0, [pc, #48]	; (80009dc <MX_GPIO_Init+0x9c>)
 80009ac:	f001 f9a6 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : led_r_Pin led_g_Pin led_b_Pin */
  GPIO_InitStruct.Pin = led_r_Pin|led_g_Pin|led_b_Pin;
 80009b0:	2307      	movs	r3, #7
 80009b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	4619      	mov	r1, r3
 80009c6:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_GPIO_Init+0x98>)
 80009c8:	f001 f998 	bl	8001cfc <HAL_GPIO_Init>

}
 80009cc:	bf00      	nop
 80009ce:	3720      	adds	r7, #32
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020400 	.word	0x40020400
 80009dc:	40020000 	.word	0x40020000

080009e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009e8:	2001      	movs	r0, #1
 80009ea:	f004 faab 	bl	8004f44 <osDelay>
 80009ee:	e7fb      	b.n	80009e8 <StartDefaultTask+0x8>

080009f0 <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(100);
 80009f8:	2064      	movs	r0, #100	; 0x64
 80009fa:	f004 faa3 	bl	8004f44 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, led_r_Pin);
 80009fe:	2101      	movs	r1, #1
 8000a00:	480a      	ldr	r0, [pc, #40]	; (8000a2c <StartDisplayTask+0x3c>)
 8000a02:	f001 fb18 	bl	8002036 <HAL_GPIO_TogglePin>
	  osDelay(100);
 8000a06:	2064      	movs	r0, #100	; 0x64
 8000a08:	f004 fa9c 	bl	8004f44 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, led_g_Pin);
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	4807      	ldr	r0, [pc, #28]	; (8000a2c <StartDisplayTask+0x3c>)
 8000a10:	f001 fb11 	bl	8002036 <HAL_GPIO_TogglePin>
	  osDelay(100);
 8000a14:	2064      	movs	r0, #100	; 0x64
 8000a16:	f004 fa95 	bl	8004f44 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, led_b_Pin);
 8000a1a:	2104      	movs	r1, #4
 8000a1c:	4803      	ldr	r0, [pc, #12]	; (8000a2c <StartDisplayTask+0x3c>)
 8000a1e:	f001 fb0a 	bl	8002036 <HAL_GPIO_TogglePin>
	  osDelay(100);
 8000a22:	2064      	movs	r0, #100	; 0x64
 8000a24:	f004 fa8e 	bl	8004f44 <osDelay>
	  osDelay(100);
 8000a28:	e7e6      	b.n	80009f8 <StartDisplayTask+0x8>
 8000a2a:	bf00      	nop
 8000a2c:	40020400 	.word	0x40020400

08000a30 <StartAccelTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccelTask */
void StartAccelTask(void *argument)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b0e6      	sub	sp, #408	; 0x198
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000a3a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000a3e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartAccelTask */
	uint32_t tempValues[100] = {0};
 8000a40:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000a44:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a4e:	461a      	mov	r2, r3
 8000a50:	2100      	movs	r1, #0
 8000a52:	f006 ff47 	bl	80078e4 <memset>
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000a56:	2001      	movs	r0, #1
 8000a58:	f004 fa74 	bl	8004f44 <osDelay>
		HAL_ADC_Start(&hadc1);
 8000a5c:	480e      	ldr	r0, [pc, #56]	; (8000a98 <StartAccelTask+0x68>)
 8000a5e:	f000 fc2b 	bl	80012b8 <HAL_ADC_Start>
		osDelay(1);
 8000a62:	2001      	movs	r0, #1
 8000a64:	f004 fa6e 	bl	8004f44 <osDelay>
		HAL_ADC_PollForConversion(&hadc1, 1);
 8000a68:	2101      	movs	r1, #1
 8000a6a:	480b      	ldr	r0, [pc, #44]	; (8000a98 <StartAccelTask+0x68>)
 8000a6c:	f000 fd0b 	bl	8001486 <HAL_ADC_PollForConversion>
		osDelay(1);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f004 fa67 	bl	8004f44 <osDelay>
		tempValues[0] = HAL_ADC_GetValue(&hadc1);
 8000a76:	4808      	ldr	r0, [pc, #32]	; (8000a98 <StartAccelTask+0x68>)
 8000a78:	f000 fd90 	bl	800159c <HAL_ADC_GetValue>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000a82:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000a86:	601a      	str	r2, [r3, #0]
		osDelay(1);
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f004 fa5b 	bl	8004f44 <osDelay>
		HAL_ADC_Stop(&hadc1);
 8000a8e:	4802      	ldr	r0, [pc, #8]	; (8000a98 <StartAccelTask+0x68>)
 8000a90:	f000 fcc6 	bl	8001420 <HAL_ADC_Stop>
		osDelay(1);
 8000a94:	e7df      	b.n	8000a56 <StartAccelTask+0x26>
 8000a96:	bf00      	nop
 8000a98:	20000090 	.word	0x20000090

08000a9c <clear_buffers.0>:
	uint8_t uart_char[1];
	uint8_t header[] = "--------------------\r\nRobotics Platform CLI\r\n--------------------\n\n";
	uint8_t prompt[] = "\rEnter command: ";
	uint8_t warning[] = "Invalid command.\n";
	uint8_t i = 0;
	void clear_buffers(){
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	f8c7 c004 	str.w	ip, [r7, #4]
		uart_char[0] = 0x00;
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	721a      	strb	r2, [r3, #8]
		for(uint8_t j=0; j<=sizeof(uart_buffer); j++){
 8000aac:	2200      	movs	r2, #0
 8000aae:	73fa      	strb	r2, [r7, #15]
 8000ab0:	e006      	b.n	8000ac0 <clear_buffers.0+0x24>
			uart_buffer[j] = 0x00;
 8000ab2:	7bfa      	ldrb	r2, [r7, #15]
 8000ab4:	6859      	ldr	r1, [r3, #4]
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	5488      	strb	r0, [r1, r2]
		for(uint8_t j=0; j<=sizeof(uart_buffer); j++){
 8000aba:	7bfa      	ldrb	r2, [r7, #15]
 8000abc:	3201      	adds	r2, #1
 8000abe:	73fa      	strb	r2, [r7, #15]
 8000ac0:	7bfa      	ldrb	r2, [r7, #15]
 8000ac2:	6819      	ldr	r1, [r3, #0]
 8000ac4:	4291      	cmp	r1, r2
 8000ac6:	d2f4      	bcs.n	8000ab2 <clear_buffers.0+0x16>
		}
	}
 8000ac8:	bf00      	nop
 8000aca:	bf00      	nop
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <StartConsoleTask>:
{
 8000ad8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000adc:	b0a4      	sub	sp, #144	; 0x90
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
void StartConsoleTask(void *argument)
 8000ae2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000ae6:	617b      	str	r3, [r7, #20]
	uint32_t buffer_size = 100;
 8000ae8:	2364      	movs	r3, #100	; 0x64
 8000aea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	uint8_t uart_buffer[buffer_size];
 8000aee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	2200      	movs	r2, #0
 8000b00:	4698      	mov	r8, r3
 8000b02:	4691      	mov	r9, r2
 8000b04:	f04f 0200 	mov.w	r2, #0
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b10:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b14:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	461c      	mov	r4, r3
 8000b1e:	4615      	mov	r5, r2
 8000b20:	f04f 0200 	mov.w	r2, #0
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	00eb      	lsls	r3, r5, #3
 8000b2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b2e:	00e2      	lsls	r2, r4, #3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	3307      	adds	r3, #7
 8000b34:	08db      	lsrs	r3, r3, #3
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	ebad 0d03 	sub.w	sp, sp, r3
 8000b3c:	466b      	mov	r3, sp
 8000b3e:	3300      	adds	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
	uint8_t header[] = "--------------------\r\nRobotics Platform CLI\r\n--------------------\n\n";
 8000b42:	4a43      	ldr	r2, [pc, #268]	; (8000c50 <StartConsoleTask+0x178>)
 8000b44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b48:	4611      	mov	r1, r2
 8000b4a:	2244      	movs	r2, #68	; 0x44
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f006 febb 	bl	80078c8 <memcpy>
	uint8_t prompt[] = "\rEnter command: ";
 8000b52:	4b40      	ldr	r3, [pc, #256]	; (8000c54 <StartConsoleTask+0x17c>)
 8000b54:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000b58:	461d      	mov	r5, r3
 8000b5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b5e:	682b      	ldr	r3, [r5, #0]
 8000b60:	7023      	strb	r3, [r4, #0]
	uint8_t warning[] = "Invalid command.\n";
 8000b62:	4b3d      	ldr	r3, [pc, #244]	; (8000c58 <StartConsoleTask+0x180>)
 8000b64:	f107 0418 	add.w	r4, r7, #24
 8000b68:	461d      	mov	r5, r3
 8000b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b6e:	682b      	ldr	r3, [r5, #0]
 8000b70:	8023      	strh	r3, [r4, #0]
	uint8_t i = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	clear_buffers();
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	469c      	mov	ip, r3
 8000b7e:	f7ff ff8d 	bl	8000a9c <clear_buffers.0>
	HAL_UART_Transmit(&huart1, header, sizeof(header), 500);
 8000b82:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000b86:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b8a:	2244      	movs	r2, #68	; 0x44
 8000b8c:	4833      	ldr	r0, [pc, #204]	; (8000c5c <StartConsoleTask+0x184>)
 8000b8e:	f003 f850 	bl	8003c32 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), 500);
 8000b92:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000b96:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b9a:	2211      	movs	r2, #17
 8000b9c:	482f      	ldr	r0, [pc, #188]	; (8000c5c <StartConsoleTask+0x184>)
 8000b9e:	f003 f848 	bl	8003c32 <HAL_UART_Transmit>
	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive(&huart1, uart_char, 1, 500);
 8000ba2:	f107 0308 	add.w	r3, r7, #8
 8000ba6:	f103 0108 	add.w	r1, r3, #8
 8000baa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bae:	2201      	movs	r2, #1
 8000bb0:	482a      	ldr	r0, [pc, #168]	; (8000c5c <StartConsoleTask+0x184>)
 8000bb2:	f003 f8d0 	bl	8003d56 <HAL_UART_Receive>
		uart_buffer[i] = uart_char[0];
 8000bb6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000bba:	7c39      	ldrb	r1, [r7, #16]
 8000bbc:	68fa      	ldr	r2, [r7, #12]
 8000bbe:	54d1      	strb	r1, [r2, r3]
		osDelay(10);
 8000bc0:	200a      	movs	r0, #10
 8000bc2:	f004 f9bf 	bl	8004f44 <osDelay>
		if((uart_buffer[i] == '\r' && sizeof(uart_buffer)>1) || i == sizeof(uart_buffer)-2){
 8000bc6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	5cd3      	ldrb	r3, [r2, r3]
 8000bce:	2b0d      	cmp	r3, #13
 8000bd0:	d102      	bne.n	8000bd8 <StartConsoleTask+0x100>
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d805      	bhi.n	8000be4 <StartConsoleTask+0x10c>
 8000bd8:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	3b02      	subs	r3, #2
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d12b      	bne.n	8000c3c <StartConsoleTask+0x164>
				//	uart_buffer[i+1] = '\n';
				//	uart_buffer[i+2] = '\r';
				//	HAL_UART_Transmit(&huart1, uart_buffer, sizeof(uart_buffer), 500);
				//}
				//else{
					uart_buffer[i+1] = '\n';
 8000be4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000be8:	3301      	adds	r3, #1
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	210a      	movs	r1, #10
 8000bee:	54d1      	strb	r1, [r2, r3]
					uart_buffer[i+2] = '\r';
 8000bf0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000bf4:	3302      	adds	r3, #2
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	210d      	movs	r1, #13
 8000bfa:	54d1      	strb	r1, [r2, r3]
					HAL_UART_Transmit(&huart1, uart_buffer, sizeof(uart_buffer), 500);
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	68f9      	ldr	r1, [r7, #12]
 8000c02:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c06:	4815      	ldr	r0, [pc, #84]	; (8000c5c <StartConsoleTask+0x184>)
 8000c08:	f003 f813 	bl	8003c32 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, warning, sizeof(warning), 500);
 8000c0c:	f107 0118 	add.w	r1, r7, #24
 8000c10:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c14:	2212      	movs	r2, #18
 8000c16:	4811      	ldr	r0, [pc, #68]	; (8000c5c <StartConsoleTask+0x184>)
 8000c18:	f003 f80b 	bl	8003c32 <HAL_UART_Transmit>
				//}
				clear_buffers();
 8000c1c:	f107 0308 	add.w	r3, r7, #8
 8000c20:	469c      	mov	ip, r3
 8000c22:	f7ff ff3b 	bl	8000a9c <clear_buffers.0>
				i = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), 500);
 8000c2c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000c30:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c34:	2211      	movs	r2, #17
 8000c36:	4809      	ldr	r0, [pc, #36]	; (8000c5c <StartConsoleTask+0x184>)
 8000c38:	f002 fffb 	bl	8003c32 <HAL_UART_Transmit>
		}
		i++;
 8000c3c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000c40:	3301      	adds	r3, #1
 8000c42:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		osDelay(10);
 8000c46:	200a      	movs	r0, #10
 8000c48:	f004 f97c 	bl	8004f44 <osDelay>
		HAL_UART_Receive(&huart1, uart_char, 1, 500);
 8000c4c:	e7a9      	b.n	8000ba2 <StartConsoleTask+0xca>
 8000c4e:	bf00      	nop
 8000c50:	08007ac8 	.word	0x08007ac8
 8000c54:	08007b0c 	.word	0x08007b0c
 8000c58:	08007b20 	.word	0x08007b20
 8000c5c:	200001cc 	.word	0x200001cc

08000c60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d101      	bne.n	8000c76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c72:	f000 fabd 	bl	80011f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40014800 	.word	0x40014800

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <Error_Handler+0x8>
	...

08000c90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_MspInit+0x54>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	4a11      	ldr	r2, [pc, #68]	; (8000ce4 <HAL_MspInit+0x54>)
 8000ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <HAL_MspInit+0x54>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <HAL_MspInit+0x54>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <HAL_MspInit+0x54>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_MspInit+0x54>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	210f      	movs	r1, #15
 8000cd2:	f06f 0001 	mvn.w	r0, #1
 8000cd6:	f000 ff55 	bl	8001b84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a17      	ldr	r2, [pc, #92]	; (8000d64 <HAL_ADC_MspInit+0x7c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d127      	bne.n	8000d5a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <HAL_ADC_MspInit+0x80>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a15      	ldr	r2, [pc, #84]	; (8000d68 <HAL_ADC_MspInit+0x80>)
 8000d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <HAL_ADC_MspInit+0x80>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <HAL_ADC_MspInit+0x80>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a0e      	ldr	r2, [pc, #56]	; (8000d68 <HAL_ADC_MspInit+0x80>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <HAL_ADC_MspInit+0x80>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = temp_adc_in_Pin;
 8000d42:	2302      	movs	r3, #2
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d46:	2303      	movs	r3, #3
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(temp_adc_in_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <HAL_ADC_MspInit+0x84>)
 8000d56:	f000 ffd1 	bl	8001cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d5a:	bf00      	nop
 8000d5c:	3728      	adds	r7, #40	; 0x28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40012000 	.word	0x40012000
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020000 	.word	0x40020000

08000d70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a19      	ldr	r2, [pc, #100]	; (8000df4 <HAL_I2C_MspInit+0x84>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d12b      	bne.n	8000dea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <HAL_I2C_MspInit+0x88>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a17      	ldr	r2, [pc, #92]	; (8000df8 <HAL_I2C_MspInit+0x88>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_I2C_MspInit+0x88>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dae:	23c0      	movs	r3, #192	; 0xc0
 8000db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db2:	2312      	movs	r3, #18
 8000db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480c      	ldr	r0, [pc, #48]	; (8000dfc <HAL_I2C_MspInit+0x8c>)
 8000dca:	f000 ff97 	bl	8001cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <HAL_I2C_MspInit+0x88>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <HAL_I2C_MspInit+0x88>)
 8000dd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_I2C_MspInit+0x88>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	3728      	adds	r7, #40	; 0x28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40005400 	.word	0x40005400
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020400 	.word	0x40020400

08000e00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a19      	ldr	r2, [pc, #100]	; (8000e84 <HAL_SPI_MspInit+0x84>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d12b      	bne.n	8000e7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a10      	ldr	r2, [pc, #64]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e5a:	23e0      	movs	r3, #224	; 0xe0
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	; (8000e8c <HAL_SPI_MspInit+0x8c>)
 8000e76:	f000 ff41 	bl	8001cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	; 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40013000 	.word	0x40013000
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020000 	.word	0x40020000

08000e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <HAL_TIM_Base_MspInit+0x48>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d115      	bne.n	8000ece <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <HAL_TIM_Base_MspInit+0x4c>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <HAL_TIM_Base_MspInit+0x4c>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_TIM_Base_MspInit+0x4c>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	210f      	movs	r1, #15
 8000ec2:	201a      	movs	r0, #26
 8000ec4:	f000 fe5e 	bl	8001b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000ec8:	201a      	movs	r0, #26
 8000eca:	f000 fe77 	bl	8001bbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40010000 	.word	0x40010000
 8000edc:	40023800 	.word	0x40023800

08000ee0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <HAL_TIM_MspPostInit+0x68>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d11e      	bne.n	8000f40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <HAL_TIM_MspPostInit+0x6c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <HAL_TIM_MspPostInit+0x6c>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_TIM_MspPostInit+0x6c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f30:	2301      	movs	r3, #1
 8000f32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <HAL_TIM_MspPostInit+0x70>)
 8000f3c:	f000 fede 	bl	8001cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f40:	bf00      	nop
 8000f42:	3720      	adds	r7, #32
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40010000 	.word	0x40010000
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020000 	.word	0x40020000

08000f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	; 0x28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <HAL_UART_MspInit+0x94>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d134      	bne.n	8000fe0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <HAL_UART_MspInit+0x98>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	4a1b      	ldr	r2, [pc, #108]	; (8000fec <HAL_UART_MspInit+0x98>)
 8000f80:	f043 0310 	orr.w	r3, r3, #16
 8000f84:	6453      	str	r3, [r2, #68]	; 0x44
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <HAL_UART_MspInit+0x98>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	f003 0310 	and.w	r3, r3, #16
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_UART_MspInit+0x98>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a14      	ldr	r2, [pc, #80]	; (8000fec <HAL_UART_MspInit+0x98>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_UART_MspInit+0x98>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <HAL_UART_MspInit+0x9c>)
 8000fcc:	f000 fe96 	bl	8001cfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2105      	movs	r1, #5
 8000fd4:	2025      	movs	r0, #37	; 0x25
 8000fd6:	f000 fdd5 	bl	8001b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fda:	2025      	movs	r0, #37	; 0x25
 8000fdc:	f000 fdee 	bl	8001bbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	3728      	adds	r7, #40	; 0x28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40011000 	.word	0x40011000
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020000 	.word	0x40020000

08000ff4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08c      	sub	sp, #48	; 0x30
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <HAL_InitTick+0xd0>)
 800100a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100c:	4a2d      	ldr	r2, [pc, #180]	; (80010c4 <HAL_InitTick+0xd0>)
 800100e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001012:	6453      	str	r3, [r2, #68]	; 0x44
 8001014:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <HAL_InitTick+0xd0>)
 8001016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001020:	f107 020c 	add.w	r2, r7, #12
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4611      	mov	r1, r2
 800102a:	4618      	mov	r0, r3
 800102c:	f001 fdba 	bl	8002ba4 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001030:	f001 fda4 	bl	8002b7c <HAL_RCC_GetPCLK2Freq>
 8001034:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001038:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <HAL_InitTick+0xd4>)
 800103a:	fba2 2303 	umull	r2, r3, r2, r3
 800103e:	0c9b      	lsrs	r3, r3, #18
 8001040:	3b01      	subs	r3, #1
 8001042:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001044:	4b21      	ldr	r3, [pc, #132]	; (80010cc <HAL_InitTick+0xd8>)
 8001046:	4a22      	ldr	r2, [pc, #136]	; (80010d0 <HAL_InitTick+0xdc>)
 8001048:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800104a:	4b20      	ldr	r3, [pc, #128]	; (80010cc <HAL_InitTick+0xd8>)
 800104c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001050:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001052:	4a1e      	ldr	r2, [pc, #120]	; (80010cc <HAL_InitTick+0xd8>)
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001056:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001058:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <HAL_InitTick+0xd8>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105e:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <HAL_InitTick+0xd8>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001064:	4b19      	ldr	r3, [pc, #100]	; (80010cc <HAL_InitTick+0xd8>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 800106a:	4818      	ldr	r0, [pc, #96]	; (80010cc <HAL_InitTick+0xd8>)
 800106c:	f001 fe55 	bl	8002d1a <HAL_TIM_Base_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001076:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800107a:	2b00      	cmp	r3, #0
 800107c:	d11b      	bne.n	80010b6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 800107e:	4813      	ldr	r0, [pc, #76]	; (80010cc <HAL_InitTick+0xd8>)
 8001080:	f001 fe9a 	bl	8002db8 <HAL_TIM_Base_Start_IT>
 8001084:	4603      	mov	r3, r0
 8001086:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800108a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800108e:	2b00      	cmp	r3, #0
 8001090:	d111      	bne.n	80010b6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001092:	201a      	movs	r0, #26
 8001094:	f000 fd92 	bl	8001bbc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b0f      	cmp	r3, #15
 800109c:	d808      	bhi.n	80010b0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 800109e:	2200      	movs	r2, #0
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	201a      	movs	r0, #26
 80010a4:	f000 fd6e 	bl	8001b84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010a8:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <HAL_InitTick+0xe0>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	e002      	b.n	80010b6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80010b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3730      	adds	r7, #48	; 0x30
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	431bde83 	.word	0x431bde83
 80010cc:	20000220 	.word	0x20000220
 80010d0:	40014800 	.word	0x40014800
 80010d4:	20000004 	.word	0x20000004

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <NMI_Handler+0x4>

080010de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <HardFault_Handler+0x4>

080010e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <MemManage_Handler+0x4>

080010ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <BusFault_Handler+0x4>

080010f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <UsageFault_Handler+0x4>

080010f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001108:	4803      	ldr	r0, [pc, #12]	; (8001118 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800110a:	f001 ff10 	bl	8002f2e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800110e:	4803      	ldr	r0, [pc, #12]	; (800111c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001110:	f001 ff0d 	bl	8002f2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000184 	.word	0x20000184
 800111c:	20000220 	.word	0x20000220

08001120 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <USART1_IRQHandler+0x10>)
 8001126:	f002 feb9 	bl	8003e9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200001cc 	.word	0x200001cc

08001134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <SystemInit+0x20>)
 800113a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <SystemInit+0x20>)
 8001140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001158:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001190 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800115c:	480d      	ldr	r0, [pc, #52]	; (8001194 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800115e:	490e      	ldr	r1, [pc, #56]	; (8001198 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001160:	4a0e      	ldr	r2, [pc, #56]	; (800119c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800116c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001172:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001174:	4c0b      	ldr	r4, [pc, #44]	; (80011a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001182:	f7ff ffd7 	bl	8001134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001186:	f006 fb79 	bl	800787c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118a:	f7ff f9ab 	bl	80004e4 <main>
  bx  lr    
 800118e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001190:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001198:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800119c:	08007c64 	.word	0x08007c64
  ldr r2, =_sbss
 80011a0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80011a4:	20004c84 	.word	0x20004c84

080011a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC_IRQHandler>
	...

080011ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0d      	ldr	r2, [pc, #52]	; (80011ec <HAL_Init+0x40>)
 80011b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_Init+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <HAL_Init+0x40>)
 80011c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a07      	ldr	r2, [pc, #28]	; (80011ec <HAL_Init+0x40>)
 80011ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f000 fcca 	bl	8001b6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011da:	200f      	movs	r0, #15
 80011dc:	f7ff ff0a 	bl	8000ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e0:	f7ff fd56 	bl	8000c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023c00 	.word	0x40023c00

080011f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x20>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_IncTick+0x24>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	4a04      	ldr	r2, [pc, #16]	; (8001214 <HAL_IncTick+0x24>)
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000008 	.word	0x20000008
 8001214:	20000268 	.word	0x20000268

08001218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <HAL_GetTick+0x14>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000268 	.word	0x20000268

08001230 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e033      	b.n	80012ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	2b00      	cmp	r3, #0
 800124c:	d109      	bne.n	8001262 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff fd4a 	bl	8000ce8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	2b00      	cmp	r3, #0
 800126c:	d118      	bne.n	80012a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001276:	f023 0302 	bic.w	r3, r3, #2
 800127a:	f043 0202 	orr.w	r2, r3, #2
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 faca 	bl	800181c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f023 0303 	bic.w	r3, r3, #3
 8001296:	f043 0201 	orr.w	r2, r3, #1
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
 800129e:	e001      	b.n	80012a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d101      	bne.n	80012d2 <HAL_ADC_Start+0x1a>
 80012ce:	2302      	movs	r3, #2
 80012d0:	e097      	b.n	8001402 <HAL_ADC_Start+0x14a>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d018      	beq.n	800131a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0201 	orr.w	r2, r2, #1
 80012f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012f8:	4b45      	ldr	r3, [pc, #276]	; (8001410 <HAL_ADC_Start+0x158>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a45      	ldr	r2, [pc, #276]	; (8001414 <HAL_ADC_Start+0x15c>)
 80012fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001302:	0c9a      	lsrs	r2, r3, #18
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800130c:	e002      	b.n	8001314 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	3b01      	subs	r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f9      	bne.n	800130e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b01      	cmp	r3, #1
 8001326:	d15f      	bne.n	80013e8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001330:	f023 0301 	bic.w	r3, r3, #1
 8001334:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001346:	2b00      	cmp	r3, #0
 8001348:	d007      	beq.n	800135a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001352:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001366:	d106      	bne.n	8001376 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136c:	f023 0206 	bic.w	r2, r3, #6
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	645a      	str	r2, [r3, #68]	; 0x44
 8001374:	e002      	b.n	800137c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001384:	4b24      	ldr	r3, [pc, #144]	; (8001418 <HAL_ADC_Start+0x160>)
 8001386:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001390:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 031f 	and.w	r3, r3, #31
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10f      	bne.n	80013be <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d129      	bne.n	8001400 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	e020      	b.n	8001400 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a16      	ldr	r2, [pc, #88]	; (800141c <HAL_ADC_Start+0x164>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d11b      	bne.n	8001400 <HAL_ADC_Start+0x148>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d114      	bne.n	8001400 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	e00b      	b.n	8001400 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	f043 0210 	orr.w	r2, r3, #16
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f8:	f043 0201 	orr.w	r2, r3, #1
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000000 	.word	0x20000000
 8001414:	431bde83 	.word	0x431bde83
 8001418:	40012300 	.word	0x40012300
 800141c:	40012000 	.word	0x40012000

08001420 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800142e:	2b01      	cmp	r3, #1
 8001430:	d101      	bne.n	8001436 <HAL_ADC_Stop+0x16>
 8001432:	2302      	movs	r3, #2
 8001434:	e021      	b.n	800147a <HAL_ADC_Stop+0x5a>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 0201 	bic.w	r2, r2, #1
 800144c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	d109      	bne.n	8001470 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001464:	f023 0301 	bic.w	r3, r3, #1
 8001468:	f043 0201 	orr.w	r2, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b084      	sub	sp, #16
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800149e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a2:	d113      	bne.n	80014cc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014b2:	d10b      	bne.n	80014cc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	f043 0220 	orr.w	r2, r3, #32
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e063      	b.n	8001594 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80014cc:	f7ff fea4 	bl	8001218 <HAL_GetTick>
 80014d0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014d2:	e021      	b.n	8001518 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014da:	d01d      	beq.n	8001518 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d007      	beq.n	80014f2 <HAL_ADC_PollForConversion+0x6c>
 80014e2:	f7ff fe99 	bl	8001218 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d212      	bcs.n	8001518 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d00b      	beq.n	8001518 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	f043 0204 	orr.w	r2, r3, #4
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e03d      	b.n	8001594 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b02      	cmp	r3, #2
 8001524:	d1d6      	bne.n	80014d4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f06f 0212 	mvn.w	r2, #18
 800152e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d123      	bne.n	8001592 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800154e:	2b00      	cmp	r3, #0
 8001550:	d11f      	bne.n	8001592 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800156a:	2b00      	cmp	r3, #0
 800156c:	d111      	bne.n	8001592 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d105      	bne.n	8001592 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f043 0201 	orr.w	r2, r3, #1
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d101      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x1c>
 80015d0:	2302      	movs	r3, #2
 80015d2:	e113      	b.n	80017fc <HAL_ADC_ConfigChannel+0x244>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b09      	cmp	r3, #9
 80015e2:	d925      	bls.n	8001630 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68d9      	ldr	r1, [r3, #12]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	461a      	mov	r2, r3
 80015f2:	4613      	mov	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	3b1e      	subs	r3, #30
 80015fa:	2207      	movs	r2, #7
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43da      	mvns	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	400a      	ands	r2, r1
 8001608:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68d9      	ldr	r1, [r3, #12]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	b29b      	uxth	r3, r3
 800161a:	4618      	mov	r0, r3
 800161c:	4603      	mov	r3, r0
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4403      	add	r3, r0
 8001622:	3b1e      	subs	r3, #30
 8001624:	409a      	lsls	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	e022      	b.n	8001676 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6919      	ldr	r1, [r3, #16]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	b29b      	uxth	r3, r3
 800163c:	461a      	mov	r2, r3
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	2207      	movs	r2, #7
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43da      	mvns	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	400a      	ands	r2, r1
 8001652:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6919      	ldr	r1, [r3, #16]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	4618      	mov	r0, r3
 8001666:	4603      	mov	r3, r0
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4403      	add	r3, r0
 800166c:	409a      	lsls	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b06      	cmp	r3, #6
 800167c:	d824      	bhi.n	80016c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	3b05      	subs	r3, #5
 8001690:	221f      	movs	r2, #31
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43da      	mvns	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	400a      	ands	r2, r1
 800169e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	4618      	mov	r0, r3
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	3b05      	subs	r3, #5
 80016ba:	fa00 f203 	lsl.w	r2, r0, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	635a      	str	r2, [r3, #52]	; 0x34
 80016c6:	e04c      	b.n	8001762 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b0c      	cmp	r3, #12
 80016ce:	d824      	bhi.n	800171a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	3b23      	subs	r3, #35	; 0x23
 80016e2:	221f      	movs	r2, #31
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43da      	mvns	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	400a      	ands	r2, r1
 80016f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	3b23      	subs	r3, #35	; 0x23
 800170c:	fa00 f203 	lsl.w	r2, r0, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	631a      	str	r2, [r3, #48]	; 0x30
 8001718:	e023      	b.n	8001762 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	3b41      	subs	r3, #65	; 0x41
 800172c:	221f      	movs	r2, #31
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	400a      	ands	r2, r1
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	b29b      	uxth	r3, r3
 8001748:	4618      	mov	r0, r3
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	3b41      	subs	r3, #65	; 0x41
 8001756:	fa00 f203 	lsl.w	r2, r0, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001762:	4b29      	ldr	r3, [pc, #164]	; (8001808 <HAL_ADC_ConfigChannel+0x250>)
 8001764:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a28      	ldr	r2, [pc, #160]	; (800180c <HAL_ADC_ConfigChannel+0x254>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d10f      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x1d8>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b12      	cmp	r3, #18
 8001776:	d10b      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a1d      	ldr	r2, [pc, #116]	; (800180c <HAL_ADC_ConfigChannel+0x254>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d12b      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x23a>
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a1c      	ldr	r2, [pc, #112]	; (8001810 <HAL_ADC_ConfigChannel+0x258>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d003      	beq.n	80017ac <HAL_ADC_ConfigChannel+0x1f4>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b11      	cmp	r3, #17
 80017aa:	d122      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a11      	ldr	r2, [pc, #68]	; (8001810 <HAL_ADC_ConfigChannel+0x258>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d111      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <HAL_ADC_ConfigChannel+0x25c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a11      	ldr	r2, [pc, #68]	; (8001818 <HAL_ADC_ConfigChannel+0x260>)
 80017d4:	fba2 2303 	umull	r2, r3, r2, r3
 80017d8:	0c9a      	lsrs	r2, r3, #18
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017e4:	e002      	b.n	80017ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f9      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	40012300 	.word	0x40012300
 800180c:	40012000 	.word	0x40012000
 8001810:	10000012 	.word	0x10000012
 8001814:	20000000 	.word	0x20000000
 8001818:	431bde83 	.word	0x431bde83

0800181c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001824:	4b79      	ldr	r3, [pc, #484]	; (8001a0c <ADC_Init+0x1f0>)
 8001826:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	431a      	orrs	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001850:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6859      	ldr	r1, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	021a      	lsls	r2, r3, #8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001874:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6859      	ldr	r1, [r3, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001896:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6899      	ldr	r1, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ae:	4a58      	ldr	r2, [pc, #352]	; (8001a10 <ADC_Init+0x1f4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d022      	beq.n	80018fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6899      	ldr	r1, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6899      	ldr	r1, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	e00f      	b.n	800191a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001908:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001918:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0202 	bic.w	r2, r2, #2
 8001928:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6899      	ldr	r1, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	7e1b      	ldrb	r3, [r3, #24]
 8001934:	005a      	lsls	r2, r3, #1
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d01b      	beq.n	8001980 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001956:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001966:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6859      	ldr	r1, [r3, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	3b01      	subs	r3, #1
 8001974:	035a      	lsls	r2, r3, #13
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	e007      	b.n	8001990 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800198e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800199e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	051a      	lsls	r2, r3, #20
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6899      	ldr	r1, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019d2:	025a      	lsls	r2, r3, #9
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6899      	ldr	r1, [r3, #8]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	029a      	lsls	r2, r3, #10
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	609a      	str	r2, [r3, #8]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	40012300 	.word	0x40012300
 8001a10:	0f000001 	.word	0x0f000001

08001a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a30:	4013      	ands	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a46:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	60d3      	str	r3, [r2, #12]
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <__NVIC_GetPriorityGrouping+0x18>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	f003 0307 	and.w	r3, r3, #7
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	db0b      	blt.n	8001aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	f003 021f 	and.w	r2, r3, #31
 8001a90:	4907      	ldr	r1, [pc, #28]	; (8001ab0 <__NVIC_EnableIRQ+0x38>)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	2001      	movs	r0, #1
 8001a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000e100 	.word	0xe000e100

08001ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	6039      	str	r1, [r7, #0]
 8001abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	db0a      	blt.n	8001ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	490c      	ldr	r1, [pc, #48]	; (8001b00 <__NVIC_SetPriority+0x4c>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	0112      	lsls	r2, r2, #4
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001adc:	e00a      	b.n	8001af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4908      	ldr	r1, [pc, #32]	; (8001b04 <__NVIC_SetPriority+0x50>)
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	3b04      	subs	r3, #4
 8001aec:	0112      	lsls	r2, r2, #4
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	440b      	add	r3, r1
 8001af2:	761a      	strb	r2, [r3, #24]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000e100 	.word	0xe000e100
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f1c3 0307 	rsb	r3, r3, #7
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	bf28      	it	cs
 8001b26:	2304      	movcs	r3, #4
 8001b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	d902      	bls.n	8001b38 <NVIC_EncodePriority+0x30>
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3b03      	subs	r3, #3
 8001b36:	e000      	b.n	8001b3a <NVIC_EncodePriority+0x32>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43da      	mvns	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b50:	f04f 31ff 	mov.w	r1, #4294967295
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	43d9      	mvns	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	4313      	orrs	r3, r2
         );
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3724      	adds	r7, #36	; 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ff4c 	bl	8001a14 <__NVIC_SetPriorityGrouping>
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b96:	f7ff ff61 	bl	8001a5c <__NVIC_GetPriorityGrouping>
 8001b9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	68b9      	ldr	r1, [r7, #8]
 8001ba0:	6978      	ldr	r0, [r7, #20]
 8001ba2:	f7ff ffb1 	bl	8001b08 <NVIC_EncodePriority>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bac:	4611      	mov	r1, r2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ff80 	bl	8001ab4 <__NVIC_SetPriority>
}
 8001bb4:	bf00      	nop
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff ff54 	bl	8001a78 <__NVIC_EnableIRQ>
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001be6:	f7ff fb17 	bl	8001218 <HAL_GetTick>
 8001bea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d008      	beq.n	8001c0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2280      	movs	r2, #128	; 0x80
 8001bfc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e052      	b.n	8001cb0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0216 	bic.w	r2, r2, #22
 8001c18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	695a      	ldr	r2, [r3, #20]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d103      	bne.n	8001c3a <HAL_DMA_Abort+0x62>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d007      	beq.n	8001c4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0208 	bic.w	r2, r2, #8
 8001c48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0201 	bic.w	r2, r2, #1
 8001c58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c5a:	e013      	b.n	8001c84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c5c:	f7ff fadc 	bl	8001218 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b05      	cmp	r3, #5
 8001c68:	d90c      	bls.n	8001c84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2203      	movs	r2, #3
 8001c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e015      	b.n	8001cb0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1e4      	bne.n	8001c5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c96:	223f      	movs	r2, #63	; 0x3f
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d004      	beq.n	8001cd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00c      	b.n	8001cf0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2205      	movs	r2, #5
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0201 	bic.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	e159      	b.n	8001fcc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d18:	2201      	movs	r2, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	f040 8148 	bne.w	8001fc6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d005      	beq.n	8001d4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d130      	bne.n	8001db0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	2203      	movs	r2, #3
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d84:	2201      	movs	r2, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 0201 	and.w	r2, r3, #1
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d017      	beq.n	8001dec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d123      	bne.n	8001e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	08da      	lsrs	r2, r3, #3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3208      	adds	r2, #8
 8001e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	220f      	movs	r2, #15
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	08da      	lsrs	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3208      	adds	r2, #8
 8001e3a:	69b9      	ldr	r1, [r7, #24]
 8001e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0203 	and.w	r2, r3, #3
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 80a2 	beq.w	8001fc6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b57      	ldr	r3, [pc, #348]	; (8001fe4 <HAL_GPIO_Init+0x2e8>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	4a56      	ldr	r2, [pc, #344]	; (8001fe4 <HAL_GPIO_Init+0x2e8>)
 8001e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e90:	6453      	str	r3, [r2, #68]	; 0x44
 8001e92:	4b54      	ldr	r3, [pc, #336]	; (8001fe4 <HAL_GPIO_Init+0x2e8>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e9e:	4a52      	ldr	r2, [pc, #328]	; (8001fe8 <HAL_GPIO_Init+0x2ec>)
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	220f      	movs	r2, #15
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a49      	ldr	r2, [pc, #292]	; (8001fec <HAL_GPIO_Init+0x2f0>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d019      	beq.n	8001efe <HAL_GPIO_Init+0x202>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a48      	ldr	r2, [pc, #288]	; (8001ff0 <HAL_GPIO_Init+0x2f4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d013      	beq.n	8001efa <HAL_GPIO_Init+0x1fe>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a47      	ldr	r2, [pc, #284]	; (8001ff4 <HAL_GPIO_Init+0x2f8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d00d      	beq.n	8001ef6 <HAL_GPIO_Init+0x1fa>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a46      	ldr	r2, [pc, #280]	; (8001ff8 <HAL_GPIO_Init+0x2fc>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d007      	beq.n	8001ef2 <HAL_GPIO_Init+0x1f6>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a45      	ldr	r2, [pc, #276]	; (8001ffc <HAL_GPIO_Init+0x300>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d101      	bne.n	8001eee <HAL_GPIO_Init+0x1f2>
 8001eea:	2304      	movs	r3, #4
 8001eec:	e008      	b.n	8001f00 <HAL_GPIO_Init+0x204>
 8001eee:	2307      	movs	r3, #7
 8001ef0:	e006      	b.n	8001f00 <HAL_GPIO_Init+0x204>
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e004      	b.n	8001f00 <HAL_GPIO_Init+0x204>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e002      	b.n	8001f00 <HAL_GPIO_Init+0x204>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_GPIO_Init+0x204>
 8001efe:	2300      	movs	r3, #0
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	f002 0203 	and.w	r2, r2, #3
 8001f06:	0092      	lsls	r2, r2, #2
 8001f08:	4093      	lsls	r3, r2
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f10:	4935      	ldr	r1, [pc, #212]	; (8001fe8 <HAL_GPIO_Init+0x2ec>)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	089b      	lsrs	r3, r3, #2
 8001f16:	3302      	adds	r3, #2
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f1e:	4b38      	ldr	r3, [pc, #224]	; (8002000 <HAL_GPIO_Init+0x304>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f42:	4a2f      	ldr	r2, [pc, #188]	; (8002000 <HAL_GPIO_Init+0x304>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f48:	4b2d      	ldr	r3, [pc, #180]	; (8002000 <HAL_GPIO_Init+0x304>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f6c:	4a24      	ldr	r2, [pc, #144]	; (8002000 <HAL_GPIO_Init+0x304>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f72:	4b23      	ldr	r3, [pc, #140]	; (8002000 <HAL_GPIO_Init+0x304>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f96:	4a1a      	ldr	r2, [pc, #104]	; (8002000 <HAL_GPIO_Init+0x304>)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f9c:	4b18      	ldr	r3, [pc, #96]	; (8002000 <HAL_GPIO_Init+0x304>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fc0:	4a0f      	ldr	r2, [pc, #60]	; (8002000 <HAL_GPIO_Init+0x304>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	2b0f      	cmp	r3, #15
 8001fd0:	f67f aea2 	bls.w	8001d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	3724      	adds	r7, #36	; 0x24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40013800 	.word	0x40013800
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	40020c00 	.word	0x40020c00
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40013c00 	.word	0x40013c00

08002004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
 8002010:	4613      	mov	r3, r2
 8002012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002014:	787b      	ldrb	r3, [r7, #1]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800201a:	887a      	ldrh	r2, [r7, #2]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002020:	e003      	b.n	800202a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002022:	887b      	ldrh	r3, [r7, #2]
 8002024:	041a      	lsls	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	619a      	str	r2, [r3, #24]
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002036:	b480      	push	{r7}
 8002038:	b085      	sub	sp, #20
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	460b      	mov	r3, r1
 8002040:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002048:	887a      	ldrh	r2, [r7, #2]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4013      	ands	r3, r2
 800204e:	041a      	lsls	r2, r3, #16
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	43d9      	mvns	r1, r3
 8002054:	887b      	ldrh	r3, [r7, #2]
 8002056:	400b      	ands	r3, r1
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	619a      	str	r2, [r3, #24]
}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e12b      	b.n	80022d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d106      	bne.n	8002098 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7fe fe6c 	bl	8000d70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2224      	movs	r2, #36	; 0x24
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0201 	bic.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020d0:	f000 fd40 	bl	8002b54 <HAL_RCC_GetPCLK1Freq>
 80020d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4a81      	ldr	r2, [pc, #516]	; (80022e0 <HAL_I2C_Init+0x274>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d807      	bhi.n	80020f0 <HAL_I2C_Init+0x84>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4a80      	ldr	r2, [pc, #512]	; (80022e4 <HAL_I2C_Init+0x278>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	bf94      	ite	ls
 80020e8:	2301      	movls	r3, #1
 80020ea:	2300      	movhi	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	e006      	b.n	80020fe <HAL_I2C_Init+0x92>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4a7d      	ldr	r2, [pc, #500]	; (80022e8 <HAL_I2C_Init+0x27c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	bf94      	ite	ls
 80020f8:	2301      	movls	r3, #1
 80020fa:	2300      	movhi	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e0e7      	b.n	80022d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4a78      	ldr	r2, [pc, #480]	; (80022ec <HAL_I2C_Init+0x280>)
 800210a:	fba2 2303 	umull	r2, r3, r2, r3
 800210e:	0c9b      	lsrs	r3, r3, #18
 8002110:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	430a      	orrs	r2, r1
 8002124:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4a6a      	ldr	r2, [pc, #424]	; (80022e0 <HAL_I2C_Init+0x274>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d802      	bhi.n	8002140 <HAL_I2C_Init+0xd4>
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	3301      	adds	r3, #1
 800213e:	e009      	b.n	8002154 <HAL_I2C_Init+0xe8>
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	4a69      	ldr	r2, [pc, #420]	; (80022f0 <HAL_I2C_Init+0x284>)
 800214c:	fba2 2303 	umull	r2, r3, r2, r3
 8002150:	099b      	lsrs	r3, r3, #6
 8002152:	3301      	adds	r3, #1
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	430b      	orrs	r3, r1
 800215a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002166:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	495c      	ldr	r1, [pc, #368]	; (80022e0 <HAL_I2C_Init+0x274>)
 8002170:	428b      	cmp	r3, r1
 8002172:	d819      	bhi.n	80021a8 <HAL_I2C_Init+0x13c>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	1e59      	subs	r1, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002182:	1c59      	adds	r1, r3, #1
 8002184:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002188:	400b      	ands	r3, r1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00a      	beq.n	80021a4 <HAL_I2C_Init+0x138>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1e59      	subs	r1, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	fbb1 f3f3 	udiv	r3, r1, r3
 800219c:	3301      	adds	r3, #1
 800219e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a2:	e051      	b.n	8002248 <HAL_I2C_Init+0x1dc>
 80021a4:	2304      	movs	r3, #4
 80021a6:	e04f      	b.n	8002248 <HAL_I2C_Init+0x1dc>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d111      	bne.n	80021d4 <HAL_I2C_Init+0x168>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1e58      	subs	r0, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	440b      	add	r3, r1
 80021be:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c2:	3301      	adds	r3, #1
 80021c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bf0c      	ite	eq
 80021cc:	2301      	moveq	r3, #1
 80021ce:	2300      	movne	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	e012      	b.n	80021fa <HAL_I2C_Init+0x18e>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	1e58      	subs	r0, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6859      	ldr	r1, [r3, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	0099      	lsls	r1, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ea:	3301      	adds	r3, #1
 80021ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	bf0c      	ite	eq
 80021f4:	2301      	moveq	r3, #1
 80021f6:	2300      	movne	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_I2C_Init+0x196>
 80021fe:	2301      	movs	r3, #1
 8002200:	e022      	b.n	8002248 <HAL_I2C_Init+0x1dc>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10e      	bne.n	8002228 <HAL_I2C_Init+0x1bc>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1e58      	subs	r0, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6859      	ldr	r1, [r3, #4]
 8002212:	460b      	mov	r3, r1
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	440b      	add	r3, r1
 8002218:	fbb0 f3f3 	udiv	r3, r0, r3
 800221c:	3301      	adds	r3, #1
 800221e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002226:	e00f      	b.n	8002248 <HAL_I2C_Init+0x1dc>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1e58      	subs	r0, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6859      	ldr	r1, [r3, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	0099      	lsls	r1, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	fbb0 f3f3 	udiv	r3, r0, r3
 800223e:	3301      	adds	r3, #1
 8002240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002244:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	6809      	ldr	r1, [r1, #0]
 800224c:	4313      	orrs	r3, r2
 800224e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69da      	ldr	r2, [r3, #28]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002276:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6911      	ldr	r1, [r2, #16]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68d2      	ldr	r2, [r2, #12]
 8002282:	4311      	orrs	r1, r2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	430b      	orrs	r3, r1
 800228a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2220      	movs	r2, #32
 80022c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	000186a0 	.word	0x000186a0
 80022e4:	001e847f 	.word	0x001e847f
 80022e8:	003d08ff 	.word	0x003d08ff
 80022ec:	431bde83 	.word	0x431bde83
 80022f0:	10624dd3 	.word	0x10624dd3

080022f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e267      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d075      	beq.n	80023fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002312:	4b88      	ldr	r3, [pc, #544]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b04      	cmp	r3, #4
 800231c:	d00c      	beq.n	8002338 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231e:	4b85      	ldr	r3, [pc, #532]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002326:	2b08      	cmp	r3, #8
 8002328:	d112      	bne.n	8002350 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800232a:	4b82      	ldr	r3, [pc, #520]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002336:	d10b      	bne.n	8002350 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	4b7e      	ldr	r3, [pc, #504]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d05b      	beq.n	80023fc <HAL_RCC_OscConfig+0x108>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d157      	bne.n	80023fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e242      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002358:	d106      	bne.n	8002368 <HAL_RCC_OscConfig+0x74>
 800235a:	4b76      	ldr	r3, [pc, #472]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a75      	ldr	r2, [pc, #468]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	e01d      	b.n	80023a4 <HAL_RCC_OscConfig+0xb0>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0x98>
 8002372:	4b70      	ldr	r3, [pc, #448]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a6f      	ldr	r2, [pc, #444]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4b6d      	ldr	r3, [pc, #436]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a6c      	ldr	r2, [pc, #432]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	e00b      	b.n	80023a4 <HAL_RCC_OscConfig+0xb0>
 800238c:	4b69      	ldr	r3, [pc, #420]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a68      	ldr	r2, [pc, #416]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	4b66      	ldr	r3, [pc, #408]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a65      	ldr	r2, [pc, #404]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 800239e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d013      	beq.n	80023d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7fe ff34 	bl	8001218 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b4:	f7fe ff30 	bl	8001218 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b64      	cmp	r3, #100	; 0x64
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e207      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c6:	4b5b      	ldr	r3, [pc, #364]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0xc0>
 80023d2:	e014      	b.n	80023fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7fe ff20 	bl	8001218 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023dc:	f7fe ff1c 	bl	8001218 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b64      	cmp	r3, #100	; 0x64
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e1f3      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ee:	4b51      	ldr	r3, [pc, #324]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0xe8>
 80023fa:	e000      	b.n	80023fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d063      	beq.n	80024d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800240a:	4b4a      	ldr	r3, [pc, #296]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00b      	beq.n	800242e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002416:	4b47      	ldr	r3, [pc, #284]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800241e:	2b08      	cmp	r3, #8
 8002420:	d11c      	bne.n	800245c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002422:	4b44      	ldr	r3, [pc, #272]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d116      	bne.n	800245c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242e:	4b41      	ldr	r3, [pc, #260]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d005      	beq.n	8002446 <HAL_RCC_OscConfig+0x152>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d001      	beq.n	8002446 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e1c7      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002446:	4b3b      	ldr	r3, [pc, #236]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4937      	ldr	r1, [pc, #220]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245a:	e03a      	b.n	80024d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d020      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002464:	4b34      	ldr	r3, [pc, #208]	; (8002538 <HAL_RCC_OscConfig+0x244>)
 8002466:	2201      	movs	r2, #1
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246a:	f7fe fed5 	bl	8001218 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002472:	f7fe fed1 	bl	8001218 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e1a8      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002484:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002490:	4b28      	ldr	r3, [pc, #160]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4925      	ldr	r1, [pc, #148]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	600b      	str	r3, [r1, #0]
 80024a4:	e015      	b.n	80024d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a6:	4b24      	ldr	r3, [pc, #144]	; (8002538 <HAL_RCC_OscConfig+0x244>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7fe feb4 	bl	8001218 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b4:	f7fe feb0 	bl	8001218 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e187      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c6:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d036      	beq.n	800254c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d016      	beq.n	8002514 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e6:	4b15      	ldr	r3, [pc, #84]	; (800253c <HAL_RCC_OscConfig+0x248>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ec:	f7fe fe94 	bl	8001218 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f4:	f7fe fe90 	bl	8001218 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e167      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002506:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x200>
 8002512:	e01b      	b.n	800254c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_RCC_OscConfig+0x248>)
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251a:	f7fe fe7d 	bl	8001218 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002520:	e00e      	b.n	8002540 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002522:	f7fe fe79 	bl	8001218 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d907      	bls.n	8002540 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e150      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
 8002534:	40023800 	.word	0x40023800
 8002538:	42470000 	.word	0x42470000
 800253c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002540:	4b88      	ldr	r3, [pc, #544]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 8002542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1ea      	bne.n	8002522 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 8097 	beq.w	8002688 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800255e:	4b81      	ldr	r3, [pc, #516]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10f      	bne.n	800258a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	4b7d      	ldr	r3, [pc, #500]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	4a7c      	ldr	r2, [pc, #496]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 8002574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002578:	6413      	str	r3, [r2, #64]	; 0x40
 800257a:	4b7a      	ldr	r3, [pc, #488]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002586:	2301      	movs	r3, #1
 8002588:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258a:	4b77      	ldr	r3, [pc, #476]	; (8002768 <HAL_RCC_OscConfig+0x474>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d118      	bne.n	80025c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002596:	4b74      	ldr	r3, [pc, #464]	; (8002768 <HAL_RCC_OscConfig+0x474>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a73      	ldr	r2, [pc, #460]	; (8002768 <HAL_RCC_OscConfig+0x474>)
 800259c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a2:	f7fe fe39 	bl	8001218 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025aa:	f7fe fe35 	bl	8001218 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e10c      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025bc:	4b6a      	ldr	r3, [pc, #424]	; (8002768 <HAL_RCC_OscConfig+0x474>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d106      	bne.n	80025de <HAL_RCC_OscConfig+0x2ea>
 80025d0:	4b64      	ldr	r3, [pc, #400]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	4a63      	ldr	r2, [pc, #396]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6713      	str	r3, [r2, #112]	; 0x70
 80025dc:	e01c      	b.n	8002618 <HAL_RCC_OscConfig+0x324>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b05      	cmp	r3, #5
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0x30c>
 80025e6:	4b5f      	ldr	r3, [pc, #380]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ea:	4a5e      	ldr	r2, [pc, #376]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 80025ec:	f043 0304 	orr.w	r3, r3, #4
 80025f0:	6713      	str	r3, [r2, #112]	; 0x70
 80025f2:	4b5c      	ldr	r3, [pc, #368]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f6:	4a5b      	ldr	r2, [pc, #364]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6713      	str	r3, [r2, #112]	; 0x70
 80025fe:	e00b      	b.n	8002618 <HAL_RCC_OscConfig+0x324>
 8002600:	4b58      	ldr	r3, [pc, #352]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002604:	4a57      	ldr	r2, [pc, #348]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 8002606:	f023 0301 	bic.w	r3, r3, #1
 800260a:	6713      	str	r3, [r2, #112]	; 0x70
 800260c:	4b55      	ldr	r3, [pc, #340]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	4a54      	ldr	r2, [pc, #336]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 8002612:	f023 0304 	bic.w	r3, r3, #4
 8002616:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d015      	beq.n	800264c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002620:	f7fe fdfa 	bl	8001218 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002626:	e00a      	b.n	800263e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002628:	f7fe fdf6 	bl	8001218 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f241 3288 	movw	r2, #5000	; 0x1388
 8002636:	4293      	cmp	r3, r2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e0cb      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263e:	4b49      	ldr	r3, [pc, #292]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0ee      	beq.n	8002628 <HAL_RCC_OscConfig+0x334>
 800264a:	e014      	b.n	8002676 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264c:	f7fe fde4 	bl	8001218 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002652:	e00a      	b.n	800266a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002654:	f7fe fde0 	bl	8001218 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e0b5      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266a:	4b3e      	ldr	r3, [pc, #248]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1ee      	bne.n	8002654 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002676:	7dfb      	ldrb	r3, [r7, #23]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d105      	bne.n	8002688 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267c:	4b39      	ldr	r3, [pc, #228]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	4a38      	ldr	r2, [pc, #224]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 8002682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002686:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80a1 	beq.w	80027d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002692:	4b34      	ldr	r3, [pc, #208]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b08      	cmp	r3, #8
 800269c:	d05c      	beq.n	8002758 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d141      	bne.n	800272a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a6:	4b31      	ldr	r3, [pc, #196]	; (800276c <HAL_RCC_OscConfig+0x478>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7fe fdb4 	bl	8001218 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b4:	f7fe fdb0 	bl	8001218 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e087      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c6:	4b27      	ldr	r3, [pc, #156]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69da      	ldr	r2, [r3, #28]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	019b      	lsls	r3, r3, #6
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	085b      	lsrs	r3, r3, #1
 80026ea:	3b01      	subs	r3, #1
 80026ec:	041b      	lsls	r3, r3, #16
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	061b      	lsls	r3, r3, #24
 80026f6:	491b      	ldr	r1, [pc, #108]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026fc:	4b1b      	ldr	r3, [pc, #108]	; (800276c <HAL_RCC_OscConfig+0x478>)
 80026fe:	2201      	movs	r2, #1
 8002700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002702:	f7fe fd89 	bl	8001218 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800270a:	f7fe fd85 	bl	8001218 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e05c      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271c:	4b11      	ldr	r3, [pc, #68]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x416>
 8002728:	e054      	b.n	80027d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <HAL_RCC_OscConfig+0x478>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe fd72 	bl	8001218 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002738:	f7fe fd6e 	bl	8001218 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e045      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x444>
 8002756:	e03d      	b.n	80027d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d107      	bne.n	8002770 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e038      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
 8002764:	40023800 	.word	0x40023800
 8002768:	40007000 	.word	0x40007000
 800276c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002770:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <HAL_RCC_OscConfig+0x4ec>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d028      	beq.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002788:	429a      	cmp	r2, r3
 800278a:	d121      	bne.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002796:	429a      	cmp	r2, r3
 8002798:	d11a      	bne.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027a0:	4013      	ands	r3, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d111      	bne.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	3b01      	subs	r3, #1
 80027ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d107      	bne.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40023800 	.word	0x40023800

080027e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0cc      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f8:	4b68      	ldr	r3, [pc, #416]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d90c      	bls.n	8002820 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b65      	ldr	r3, [pc, #404]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b63      	ldr	r3, [pc, #396]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0b8      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d020      	beq.n	800286e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002838:	4b59      	ldr	r3, [pc, #356]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	4a58      	ldr	r2, [pc, #352]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002842:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002850:	4b53      	ldr	r3, [pc, #332]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4a52      	ldr	r2, [pc, #328]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800285a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800285c:	4b50      	ldr	r3, [pc, #320]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	494d      	ldr	r1, [pc, #308]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	4313      	orrs	r3, r2
 800286c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d044      	beq.n	8002904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d107      	bne.n	8002892 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	4b47      	ldr	r3, [pc, #284]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d119      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e07f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d003      	beq.n	80028a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d107      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a2:	4b3f      	ldr	r3, [pc, #252]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e06f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b2:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e067      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c2:	4b37      	ldr	r3, [pc, #220]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f023 0203 	bic.w	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4934      	ldr	r1, [pc, #208]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d4:	f7fe fca0 	bl	8001218 <HAL_GetTick>
 80028d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028da:	e00a      	b.n	80028f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028dc:	f7fe fc9c 	bl	8001218 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e04f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 020c 	and.w	r2, r3, #12
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	429a      	cmp	r2, r3
 8002902:	d1eb      	bne.n	80028dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002904:	4b25      	ldr	r3, [pc, #148]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d20c      	bcs.n	800292c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b22      	ldr	r3, [pc, #136]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b20      	ldr	r3, [pc, #128]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e032      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002938:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4916      	ldr	r1, [pc, #88]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	490e      	ldr	r1, [pc, #56]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800296a:	f000 f821 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 800296e:	4602      	mov	r2, r0
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	490a      	ldr	r1, [pc, #40]	; (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	5ccb      	ldrb	r3, [r1, r3]
 800297e:	fa22 f303 	lsr.w	r3, r2, r3
 8002982:	4a09      	ldr	r2, [pc, #36]	; (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <HAL_RCC_ClockConfig+0x1c8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe fb32 	bl	8000ff4 <HAL_InitTick>

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40023c00 	.word	0x40023c00
 80029a0:	40023800 	.word	0x40023800
 80029a4:	08007bdc 	.word	0x08007bdc
 80029a8:	20000000 	.word	0x20000000
 80029ac:	20000004 	.word	0x20000004

080029b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029b4:	b090      	sub	sp, #64	; 0x40
 80029b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	637b      	str	r3, [r7, #52]	; 0x34
 80029bc:	2300      	movs	r3, #0
 80029be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029c0:	2300      	movs	r3, #0
 80029c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029c8:	4b59      	ldr	r3, [pc, #356]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 030c 	and.w	r3, r3, #12
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d00d      	beq.n	80029f0 <HAL_RCC_GetSysClockFreq+0x40>
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	f200 80a1 	bhi.w	8002b1c <HAL_RCC_GetSysClockFreq+0x16c>
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0x34>
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d003      	beq.n	80029ea <HAL_RCC_GetSysClockFreq+0x3a>
 80029e2:	e09b      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029e4:	4b53      	ldr	r3, [pc, #332]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x184>)
 80029e6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80029e8:	e09b      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ea:	4b53      	ldr	r3, [pc, #332]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x188>)
 80029ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029ee:	e098      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029f0:	4b4f      	ldr	r3, [pc, #316]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x180>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029fa:	4b4d      	ldr	r3, [pc, #308]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x180>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d028      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a06:	4b4a      	ldr	r3, [pc, #296]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	099b      	lsrs	r3, r3, #6
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	623b      	str	r3, [r7, #32]
 8002a10:	627a      	str	r2, [r7, #36]	; 0x24
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4b47      	ldr	r3, [pc, #284]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a1c:	fb03 f201 	mul.w	r2, r3, r1
 8002a20:	2300      	movs	r3, #0
 8002a22:	fb00 f303 	mul.w	r3, r0, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	4a43      	ldr	r2, [pc, #268]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a2a:	fba0 1202 	umull	r1, r2, r0, r2
 8002a2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a30:	460a      	mov	r2, r1
 8002a32:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a36:	4413      	add	r3, r2
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	61bb      	str	r3, [r7, #24]
 8002a40:	61fa      	str	r2, [r7, #28]
 8002a42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a4a:	f7fd fbc9 	bl	80001e0 <__aeabi_uldivmod>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4613      	mov	r3, r2
 8002a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a56:	e053      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a58:	4b35      	ldr	r3, [pc, #212]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	099b      	lsrs	r3, r3, #6
 8002a5e:	2200      	movs	r2, #0
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	617a      	str	r2, [r7, #20]
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a6a:	f04f 0b00 	mov.w	fp, #0
 8002a6e:	4652      	mov	r2, sl
 8002a70:	465b      	mov	r3, fp
 8002a72:	f04f 0000 	mov.w	r0, #0
 8002a76:	f04f 0100 	mov.w	r1, #0
 8002a7a:	0159      	lsls	r1, r3, #5
 8002a7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a80:	0150      	lsls	r0, r2, #5
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	ebb2 080a 	subs.w	r8, r2, sl
 8002a8a:	eb63 090b 	sbc.w	r9, r3, fp
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a9a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a9e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002aa2:	ebb2 0408 	subs.w	r4, r2, r8
 8002aa6:	eb63 0509 	sbc.w	r5, r3, r9
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	00eb      	lsls	r3, r5, #3
 8002ab4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ab8:	00e2      	lsls	r2, r4, #3
 8002aba:	4614      	mov	r4, r2
 8002abc:	461d      	mov	r5, r3
 8002abe:	eb14 030a 	adds.w	r3, r4, sl
 8002ac2:	603b      	str	r3, [r7, #0]
 8002ac4:	eb45 030b 	adc.w	r3, r5, fp
 8002ac8:	607b      	str	r3, [r7, #4]
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	f04f 0300 	mov.w	r3, #0
 8002ad2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ad6:	4629      	mov	r1, r5
 8002ad8:	028b      	lsls	r3, r1, #10
 8002ada:	4621      	mov	r1, r4
 8002adc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ae0:	4621      	mov	r1, r4
 8002ae2:	028a      	lsls	r2, r1, #10
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aea:	2200      	movs	r2, #0
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	60fa      	str	r2, [r7, #12]
 8002af0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002af4:	f7fd fb74 	bl	80001e0 <__aeabi_uldivmod>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4613      	mov	r3, r2
 8002afe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	0c1b      	lsrs	r3, r3, #16
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002b10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b1a:	e002      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b1c:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b1e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3740      	adds	r7, #64	; 0x40
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b2e:	bf00      	nop
 8002b30:	40023800 	.word	0x40023800
 8002b34:	00f42400 	.word	0x00f42400
 8002b38:	017d7840 	.word	0x017d7840

08002b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b40:	4b03      	ldr	r3, [pc, #12]	; (8002b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b42:	681b      	ldr	r3, [r3, #0]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	20000000 	.word	0x20000000

08002b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b58:	f7ff fff0 	bl	8002b3c <HAL_RCC_GetHCLKFreq>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	0a9b      	lsrs	r3, r3, #10
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	4903      	ldr	r1, [pc, #12]	; (8002b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b6a:	5ccb      	ldrb	r3, [r1, r3]
 8002b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40023800 	.word	0x40023800
 8002b78:	08007bec 	.word	0x08007bec

08002b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b80:	f7ff ffdc 	bl	8002b3c <HAL_RCC_GetHCLKFreq>
 8002b84:	4602      	mov	r2, r0
 8002b86:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	0b5b      	lsrs	r3, r3, #13
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	4903      	ldr	r1, [pc, #12]	; (8002ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b92:	5ccb      	ldrb	r3, [r1, r3]
 8002b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	08007bec 	.word	0x08007bec

08002ba4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	220f      	movs	r2, #15
 8002bb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bb4:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <HAL_RCC_GetClockConfig+0x5c>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0203 	and.w	r2, r3, #3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <HAL_RCC_GetClockConfig+0x5c>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <HAL_RCC_GetClockConfig+0x5c>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_RCC_GetClockConfig+0x5c>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	08db      	lsrs	r3, r3, #3
 8002bde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002be6:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <HAL_RCC_GetClockConfig+0x60>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0207 	and.w	r2, r3, #7
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	601a      	str	r2, [r3, #0]
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40023c00 	.word	0x40023c00

08002c08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e07b      	b.n	8002d12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d108      	bne.n	8002c34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c2a:	d009      	beq.n	8002c40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	61da      	str	r2, [r3, #28]
 8002c32:	e005      	b.n	8002c40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d106      	bne.n	8002c60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7fe f8d0 	bl	8000e00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc4:	ea42 0103 	orr.w	r1, r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	0c1b      	lsrs	r3, r3, #16
 8002cde:	f003 0104 	and.w	r1, r3, #4
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	f003 0210 	and.w	r2, r3, #16
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	69da      	ldr	r2, [r3, #28]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e041      	b.n	8002db0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d106      	bne.n	8002d46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7fe f8a5 	bl	8000e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3304      	adds	r3, #4
 8002d56:	4619      	mov	r1, r3
 8002d58:	4610      	mov	r0, r2
 8002d5a:	f000 fba3 	bl	80034a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d001      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e044      	b.n	8002e5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a1e      	ldr	r2, [pc, #120]	; (8002e68 <HAL_TIM_Base_Start_IT+0xb0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d018      	beq.n	8002e24 <HAL_TIM_Base_Start_IT+0x6c>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfa:	d013      	beq.n	8002e24 <HAL_TIM_Base_Start_IT+0x6c>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a1a      	ldr	r2, [pc, #104]	; (8002e6c <HAL_TIM_Base_Start_IT+0xb4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00e      	beq.n	8002e24 <HAL_TIM_Base_Start_IT+0x6c>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a19      	ldr	r2, [pc, #100]	; (8002e70 <HAL_TIM_Base_Start_IT+0xb8>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d009      	beq.n	8002e24 <HAL_TIM_Base_Start_IT+0x6c>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a17      	ldr	r2, [pc, #92]	; (8002e74 <HAL_TIM_Base_Start_IT+0xbc>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d004      	beq.n	8002e24 <HAL_TIM_Base_Start_IT+0x6c>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a16      	ldr	r2, [pc, #88]	; (8002e78 <HAL_TIM_Base_Start_IT+0xc0>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d111      	bne.n	8002e48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2b06      	cmp	r3, #6
 8002e34:	d010      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0201 	orr.w	r2, r2, #1
 8002e44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e46:	e007      	b.n	8002e58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40010000 	.word	0x40010000
 8002e6c:	40000400 	.word	0x40000400
 8002e70:	40000800 	.word	0x40000800
 8002e74:	40000c00 	.word	0x40000c00
 8002e78:	40014000 	.word	0x40014000

08002e7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e041      	b.n	8002f12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f839 	bl	8002f1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	f000 faf2 	bl	80034a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d122      	bne.n	8002f8a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d11b      	bne.n	8002f8a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f06f 0202 	mvn.w	r2, #2
 8002f5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fa78 	bl	8003466 <HAL_TIM_IC_CaptureCallback>
 8002f76:	e005      	b.n	8002f84 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 fa6a 	bl	8003452 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fa7b 	bl	800347a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d122      	bne.n	8002fde <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d11b      	bne.n	8002fde <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f06f 0204 	mvn.w	r2, #4
 8002fae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 fa4e 	bl	8003466 <HAL_TIM_IC_CaptureCallback>
 8002fca:	e005      	b.n	8002fd8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 fa40 	bl	8003452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fa51 	bl	800347a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d122      	bne.n	8003032 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d11b      	bne.n	8003032 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f06f 0208 	mvn.w	r2, #8
 8003002:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2204      	movs	r2, #4
 8003008:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 fa24 	bl	8003466 <HAL_TIM_IC_CaptureCallback>
 800301e:	e005      	b.n	800302c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fa16 	bl	8003452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fa27 	bl	800347a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	2b10      	cmp	r3, #16
 800303e:	d122      	bne.n	8003086 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	2b10      	cmp	r3, #16
 800304c:	d11b      	bne.n	8003086 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f06f 0210 	mvn.w	r2, #16
 8003056:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2208      	movs	r2, #8
 800305c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f9fa 	bl	8003466 <HAL_TIM_IC_CaptureCallback>
 8003072:	e005      	b.n	8003080 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f9ec 	bl	8003452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f9fd 	bl	800347a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	d10e      	bne.n	80030b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d107      	bne.n	80030b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f06f 0201 	mvn.w	r2, #1
 80030aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7fd fdd7 	bl	8000c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030bc:	2b80      	cmp	r3, #128	; 0x80
 80030be:	d10e      	bne.n	80030de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ca:	2b80      	cmp	r3, #128	; 0x80
 80030cc:	d107      	bne.n	80030de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fd53 	bl	8003b84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e8:	2b40      	cmp	r3, #64	; 0x40
 80030ea:	d10e      	bne.n	800310a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f6:	2b40      	cmp	r3, #64	; 0x40
 80030f8:	d107      	bne.n	800310a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f9c2 	bl	800348e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b20      	cmp	r3, #32
 8003116:	d10e      	bne.n	8003136 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b20      	cmp	r3, #32
 8003124:	d107      	bne.n	8003136 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f06f 0220 	mvn.w	r2, #32
 800312e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 fd1d 	bl	8003b70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800315a:	2302      	movs	r3, #2
 800315c:	e0ae      	b.n	80032bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b0c      	cmp	r3, #12
 800316a:	f200 809f 	bhi.w	80032ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800316e:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003174:	080031a9 	.word	0x080031a9
 8003178:	080032ad 	.word	0x080032ad
 800317c:	080032ad 	.word	0x080032ad
 8003180:	080032ad 	.word	0x080032ad
 8003184:	080031e9 	.word	0x080031e9
 8003188:	080032ad 	.word	0x080032ad
 800318c:	080032ad 	.word	0x080032ad
 8003190:	080032ad 	.word	0x080032ad
 8003194:	0800322b 	.word	0x0800322b
 8003198:	080032ad 	.word	0x080032ad
 800319c:	080032ad 	.word	0x080032ad
 80031a0:	080032ad 	.word	0x080032ad
 80031a4:	0800326b 	.word	0x0800326b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 f9f8 	bl	80035a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699a      	ldr	r2, [r3, #24]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0208 	orr.w	r2, r2, #8
 80031c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	699a      	ldr	r2, [r3, #24]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0204 	bic.w	r2, r2, #4
 80031d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6999      	ldr	r1, [r3, #24]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	691a      	ldr	r2, [r3, #16]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	619a      	str	r2, [r3, #24]
      break;
 80031e6:	e064      	b.n	80032b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68b9      	ldr	r1, [r7, #8]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fa3e 	bl	8003670 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699a      	ldr	r2, [r3, #24]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6999      	ldr	r1, [r3, #24]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	021a      	lsls	r2, r3, #8
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	619a      	str	r2, [r3, #24]
      break;
 8003228:	e043      	b.n	80032b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68b9      	ldr	r1, [r7, #8]
 8003230:	4618      	mov	r0, r3
 8003232:	f000 fa89 	bl	8003748 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69da      	ldr	r2, [r3, #28]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f042 0208 	orr.w	r2, r2, #8
 8003244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69da      	ldr	r2, [r3, #28]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0204 	bic.w	r2, r2, #4
 8003254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	69d9      	ldr	r1, [r3, #28]
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	61da      	str	r2, [r3, #28]
      break;
 8003268:	e023      	b.n	80032b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68b9      	ldr	r1, [r7, #8]
 8003270:	4618      	mov	r0, r3
 8003272:	f000 fad3 	bl	800381c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69da      	ldr	r2, [r3, #28]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	69da      	ldr	r2, [r3, #28]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	69d9      	ldr	r1, [r3, #28]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	021a      	lsls	r2, r3, #8
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	61da      	str	r2, [r3, #28]
      break;
 80032aa:	e002      	b.n	80032b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	75fb      	strb	r3, [r7, #23]
      break;
 80032b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_TIM_ConfigClockSource+0x1c>
 80032dc:	2302      	movs	r3, #2
 80032de:	e0b4      	b.n	800344a <HAL_TIM_ConfigClockSource+0x186>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003318:	d03e      	beq.n	8003398 <HAL_TIM_ConfigClockSource+0xd4>
 800331a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800331e:	f200 8087 	bhi.w	8003430 <HAL_TIM_ConfigClockSource+0x16c>
 8003322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003326:	f000 8086 	beq.w	8003436 <HAL_TIM_ConfigClockSource+0x172>
 800332a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332e:	d87f      	bhi.n	8003430 <HAL_TIM_ConfigClockSource+0x16c>
 8003330:	2b70      	cmp	r3, #112	; 0x70
 8003332:	d01a      	beq.n	800336a <HAL_TIM_ConfigClockSource+0xa6>
 8003334:	2b70      	cmp	r3, #112	; 0x70
 8003336:	d87b      	bhi.n	8003430 <HAL_TIM_ConfigClockSource+0x16c>
 8003338:	2b60      	cmp	r3, #96	; 0x60
 800333a:	d050      	beq.n	80033de <HAL_TIM_ConfigClockSource+0x11a>
 800333c:	2b60      	cmp	r3, #96	; 0x60
 800333e:	d877      	bhi.n	8003430 <HAL_TIM_ConfigClockSource+0x16c>
 8003340:	2b50      	cmp	r3, #80	; 0x50
 8003342:	d03c      	beq.n	80033be <HAL_TIM_ConfigClockSource+0xfa>
 8003344:	2b50      	cmp	r3, #80	; 0x50
 8003346:	d873      	bhi.n	8003430 <HAL_TIM_ConfigClockSource+0x16c>
 8003348:	2b40      	cmp	r3, #64	; 0x40
 800334a:	d058      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0x13a>
 800334c:	2b40      	cmp	r3, #64	; 0x40
 800334e:	d86f      	bhi.n	8003430 <HAL_TIM_ConfigClockSource+0x16c>
 8003350:	2b30      	cmp	r3, #48	; 0x30
 8003352:	d064      	beq.n	800341e <HAL_TIM_ConfigClockSource+0x15a>
 8003354:	2b30      	cmp	r3, #48	; 0x30
 8003356:	d86b      	bhi.n	8003430 <HAL_TIM_ConfigClockSource+0x16c>
 8003358:	2b20      	cmp	r3, #32
 800335a:	d060      	beq.n	800341e <HAL_TIM_ConfigClockSource+0x15a>
 800335c:	2b20      	cmp	r3, #32
 800335e:	d867      	bhi.n	8003430 <HAL_TIM_ConfigClockSource+0x16c>
 8003360:	2b00      	cmp	r3, #0
 8003362:	d05c      	beq.n	800341e <HAL_TIM_ConfigClockSource+0x15a>
 8003364:	2b10      	cmp	r3, #16
 8003366:	d05a      	beq.n	800341e <HAL_TIM_ConfigClockSource+0x15a>
 8003368:	e062      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6899      	ldr	r1, [r3, #8]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f000 fb19 	bl	80039b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800338c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	609a      	str	r2, [r3, #8]
      break;
 8003396:	e04f      	b.n	8003438 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	6899      	ldr	r1, [r3, #8]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f000 fb02 	bl	80039b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033ba:	609a      	str	r2, [r3, #8]
      break;
 80033bc:	e03c      	b.n	8003438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6859      	ldr	r1, [r3, #4]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	461a      	mov	r2, r3
 80033cc:	f000 fa76 	bl	80038bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2150      	movs	r1, #80	; 0x50
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 facf 	bl	800397a <TIM_ITRx_SetConfig>
      break;
 80033dc:	e02c      	b.n	8003438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	6859      	ldr	r1, [r3, #4]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	461a      	mov	r2, r3
 80033ec:	f000 fa95 	bl	800391a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2160      	movs	r1, #96	; 0x60
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fabf 	bl	800397a <TIM_ITRx_SetConfig>
      break;
 80033fc:	e01c      	b.n	8003438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6859      	ldr	r1, [r3, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	461a      	mov	r2, r3
 800340c:	f000 fa56 	bl	80038bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2140      	movs	r1, #64	; 0x40
 8003416:	4618      	mov	r0, r3
 8003418:	f000 faaf 	bl	800397a <TIM_ITRx_SetConfig>
      break;
 800341c:	e00c      	b.n	8003438 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4619      	mov	r1, r3
 8003428:	4610      	mov	r0, r2
 800342a:	f000 faa6 	bl	800397a <TIM_ITRx_SetConfig>
      break;
 800342e:	e003      	b.n	8003438 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	73fb      	strb	r3, [r7, #15]
      break;
 8003434:	e000      	b.n	8003438 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003436:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003448:	7bfb      	ldrb	r3, [r7, #15]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
	...

080034a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a34      	ldr	r2, [pc, #208]	; (8003588 <TIM_Base_SetConfig+0xe4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00f      	beq.n	80034dc <TIM_Base_SetConfig+0x38>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c2:	d00b      	beq.n	80034dc <TIM_Base_SetConfig+0x38>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a31      	ldr	r2, [pc, #196]	; (800358c <TIM_Base_SetConfig+0xe8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d007      	beq.n	80034dc <TIM_Base_SetConfig+0x38>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a30      	ldr	r2, [pc, #192]	; (8003590 <TIM_Base_SetConfig+0xec>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d003      	beq.n	80034dc <TIM_Base_SetConfig+0x38>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a2f      	ldr	r2, [pc, #188]	; (8003594 <TIM_Base_SetConfig+0xf0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d108      	bne.n	80034ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a25      	ldr	r2, [pc, #148]	; (8003588 <TIM_Base_SetConfig+0xe4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d01b      	beq.n	800352e <TIM_Base_SetConfig+0x8a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034fc:	d017      	beq.n	800352e <TIM_Base_SetConfig+0x8a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a22      	ldr	r2, [pc, #136]	; (800358c <TIM_Base_SetConfig+0xe8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d013      	beq.n	800352e <TIM_Base_SetConfig+0x8a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a21      	ldr	r2, [pc, #132]	; (8003590 <TIM_Base_SetConfig+0xec>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00f      	beq.n	800352e <TIM_Base_SetConfig+0x8a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a20      	ldr	r2, [pc, #128]	; (8003594 <TIM_Base_SetConfig+0xf0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00b      	beq.n	800352e <TIM_Base_SetConfig+0x8a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a1f      	ldr	r2, [pc, #124]	; (8003598 <TIM_Base_SetConfig+0xf4>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d007      	beq.n	800352e <TIM_Base_SetConfig+0x8a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a1e      	ldr	r2, [pc, #120]	; (800359c <TIM_Base_SetConfig+0xf8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d003      	beq.n	800352e <TIM_Base_SetConfig+0x8a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a1d      	ldr	r2, [pc, #116]	; (80035a0 <TIM_Base_SetConfig+0xfc>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d108      	bne.n	8003540 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	4313      	orrs	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a08      	ldr	r2, [pc, #32]	; (8003588 <TIM_Base_SetConfig+0xe4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d103      	bne.n	8003574 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	691a      	ldr	r2, [r3, #16]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	615a      	str	r2, [r3, #20]
}
 800357a:	bf00      	nop
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40010000 	.word	0x40010000
 800358c:	40000400 	.word	0x40000400
 8003590:	40000800 	.word	0x40000800
 8003594:	40000c00 	.word	0x40000c00
 8003598:	40014000 	.word	0x40014000
 800359c:	40014400 	.word	0x40014400
 80035a0:	40014800 	.word	0x40014800

080035a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	f023 0201 	bic.w	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0303 	bic.w	r3, r3, #3
 80035da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f023 0302 	bic.w	r3, r3, #2
 80035ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a1c      	ldr	r2, [pc, #112]	; (800366c <TIM_OC1_SetConfig+0xc8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d10c      	bne.n	800361a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f023 0308 	bic.w	r3, r3, #8
 8003606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	4313      	orrs	r3, r2
 8003610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f023 0304 	bic.w	r3, r3, #4
 8003618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a13      	ldr	r2, [pc, #76]	; (800366c <TIM_OC1_SetConfig+0xc8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d111      	bne.n	8003646 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003628:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003630:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	621a      	str	r2, [r3, #32]
}
 8003660:	bf00      	nop
 8003662:	371c      	adds	r7, #28
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	40010000 	.word	0x40010000

08003670 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	f023 0210 	bic.w	r2, r3, #16
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800369e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	021b      	lsls	r3, r3, #8
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f023 0320 	bic.w	r3, r3, #32
 80036ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a1e      	ldr	r2, [pc, #120]	; (8003744 <TIM_OC2_SetConfig+0xd4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d10d      	bne.n	80036ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a15      	ldr	r2, [pc, #84]	; (8003744 <TIM_OC2_SetConfig+0xd4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d113      	bne.n	800371c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003702:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	621a      	str	r2, [r3, #32]
}
 8003736:	bf00      	nop
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40010000 	.word	0x40010000

08003748 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 0303 	bic.w	r3, r3, #3
 800377e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	021b      	lsls	r3, r3, #8
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a1d      	ldr	r2, [pc, #116]	; (8003818 <TIM_OC3_SetConfig+0xd0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d10d      	bne.n	80037c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	021b      	lsls	r3, r3, #8
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a14      	ldr	r2, [pc, #80]	; (8003818 <TIM_OC3_SetConfig+0xd0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d113      	bne.n	80037f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	621a      	str	r2, [r3, #32]
}
 800380c:	bf00      	nop
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	40010000 	.word	0x40010000

0800381c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800384a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	021b      	lsls	r3, r3, #8
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4313      	orrs	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003866:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	031b      	lsls	r3, r3, #12
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a10      	ldr	r2, [pc, #64]	; (80038b8 <TIM_OC4_SetConfig+0x9c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d109      	bne.n	8003890 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003882:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	019b      	lsls	r3, r3, #6
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	621a      	str	r2, [r3, #32]
}
 80038aa:	bf00      	nop
 80038ac:	371c      	adds	r7, #28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40010000 	.word	0x40010000

080038bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	f023 0201 	bic.w	r2, r3, #1
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f023 030a 	bic.w	r3, r3, #10
 80038f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4313      	orrs	r3, r2
 8003900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	621a      	str	r2, [r3, #32]
}
 800390e:	bf00      	nop
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800391a:	b480      	push	{r7}
 800391c:	b087      	sub	sp, #28
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f023 0210 	bic.w	r2, r3, #16
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003944:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	031b      	lsls	r3, r3, #12
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4313      	orrs	r3, r2
 800394e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003956:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	621a      	str	r2, [r3, #32]
}
 800396e:	bf00      	nop
 8003970:	371c      	adds	r7, #28
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800397a:	b480      	push	{r7}
 800397c:	b085      	sub	sp, #20
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003990:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	f043 0307 	orr.w	r3, r3, #7
 800399c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	609a      	str	r2, [r3, #8]
}
 80039a4:	bf00      	nop
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	021a      	lsls	r2, r3, #8
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	431a      	orrs	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	609a      	str	r2, [r3, #8]
}
 80039e4:	bf00      	nop
 80039e6:	371c      	adds	r7, #28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e050      	b.n	8003aaa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a1c      	ldr	r2, [pc, #112]	; (8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d018      	beq.n	8003a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a54:	d013      	beq.n	8003a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a18      	ldr	r2, [pc, #96]	; (8003abc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00e      	beq.n	8003a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a16      	ldr	r2, [pc, #88]	; (8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d009      	beq.n	8003a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a15      	ldr	r2, [pc, #84]	; (8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d004      	beq.n	8003a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a13      	ldr	r2, [pc, #76]	; (8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d10c      	bne.n	8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40010000 	.word	0x40010000
 8003abc:	40000400 	.word	0x40000400
 8003ac0:	40000800 	.word	0x40000800
 8003ac4:	40000c00 	.word	0x40000c00
 8003ac8:	40014000 	.word	0x40014000

08003acc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e03d      	b.n	8003b64 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e03f      	b.n	8003c2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fd f9c8 	bl	8000f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2224      	movs	r2, #36	; 0x24
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fe1d 	bl	800481c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695a      	ldr	r2, [r3, #20]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b08a      	sub	sp, #40	; 0x28
 8003c36:	af02      	add	r7, sp, #8
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b20      	cmp	r3, #32
 8003c50:	d17c      	bne.n	8003d4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <HAL_UART_Transmit+0x2c>
 8003c58:	88fb      	ldrh	r3, [r7, #6]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e075      	b.n	8003d4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_UART_Transmit+0x3e>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e06e      	b.n	8003d4e <HAL_UART_Transmit+0x11c>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2221      	movs	r2, #33	; 0x21
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c86:	f7fd fac7 	bl	8001218 <HAL_GetTick>
 8003c8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	88fa      	ldrh	r2, [r7, #6]
 8003c90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	88fa      	ldrh	r2, [r7, #6]
 8003c96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca0:	d108      	bne.n	8003cb4 <HAL_UART_Transmit+0x82>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d104      	bne.n	8003cb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	e003      	b.n	8003cbc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003cc4:	e02a      	b.n	8003d1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2180      	movs	r1, #128	; 0x80
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 fb9b 	bl	800440c <UART_WaitOnFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e036      	b.n	8003d4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10b      	bne.n	8003cfe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	3302      	adds	r3, #2
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	e007      	b.n	8003d0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	781a      	ldrb	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1cf      	bne.n	8003cc6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2140      	movs	r1, #64	; 0x40
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 fb6b 	bl	800440c <UART_WaitOnFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e006      	b.n	8003d4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	e000      	b.n	8003d4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d4c:	2302      	movs	r3, #2
  }
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3720      	adds	r7, #32
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b08a      	sub	sp, #40	; 0x28
 8003d5a:	af02      	add	r7, sp, #8
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	603b      	str	r3, [r7, #0]
 8003d62:	4613      	mov	r3, r2
 8003d64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b20      	cmp	r3, #32
 8003d74:	f040 808c 	bne.w	8003e90 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <HAL_UART_Receive+0x2e>
 8003d7e:	88fb      	ldrh	r3, [r7, #6]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e084      	b.n	8003e92 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_UART_Receive+0x40>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e07d      	b.n	8003e92 <HAL_UART_Receive+0x13c>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2222      	movs	r2, #34	; 0x22
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003db2:	f7fd fa31 	bl	8001218 <HAL_GetTick>
 8003db6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	88fa      	ldrh	r2, [r7, #6]
 8003dbc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	88fa      	ldrh	r2, [r7, #6]
 8003dc2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dcc:	d108      	bne.n	8003de0 <HAL_UART_Receive+0x8a>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d104      	bne.n	8003de0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	61bb      	str	r3, [r7, #24]
 8003dde:	e003      	b.n	8003de8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003df0:	e043      	b.n	8003e7a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2120      	movs	r1, #32
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 fb05 	bl	800440c <UART_WaitOnFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e042      	b.n	8003e92 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10c      	bne.n	8003e2c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	3302      	adds	r3, #2
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	e01f      	b.n	8003e6c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e34:	d007      	beq.n	8003e46 <HAL_UART_Receive+0xf0>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10a      	bne.n	8003e54 <HAL_UART_Receive+0xfe>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d106      	bne.n	8003e54 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	701a      	strb	r2, [r3, #0]
 8003e52:	e008      	b.n	8003e66 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1b6      	bne.n	8003df2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e000      	b.n	8003e92 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003e90:	2302      	movs	r3, #2
  }
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3720      	adds	r7, #32
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b0ba      	sub	sp, #232	; 0xe8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003eda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10f      	bne.n	8003f02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d009      	beq.n	8003f02 <HAL_UART_IRQHandler+0x66>
 8003eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ef2:	f003 0320 	and.w	r3, r3, #32
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fbd3 	bl	80046a6 <UART_Receive_IT>
      return;
 8003f00:	e256      	b.n	80043b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 80de 	beq.w	80040c8 <HAL_UART_IRQHandler+0x22c>
 8003f0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d106      	bne.n	8003f26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 80d1 	beq.w	80040c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00b      	beq.n	8003f4a <HAL_UART_IRQHandler+0xae>
 8003f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f043 0201 	orr.w	r2, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00b      	beq.n	8003f6e <HAL_UART_IRQHandler+0xd2>
 8003f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d005      	beq.n	8003f6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	f043 0202 	orr.w	r2, r3, #2
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00b      	beq.n	8003f92 <HAL_UART_IRQHandler+0xf6>
 8003f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d005      	beq.n	8003f92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	f043 0204 	orr.w	r2, r3, #4
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d011      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x126>
 8003f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d105      	bne.n	8003fb6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	f043 0208 	orr.w	r2, r3, #8
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 81ed 	beq.w	80043a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d008      	beq.n	8003fea <HAL_UART_IRQHandler+0x14e>
 8003fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 fb5e 	bl	80046a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff4:	2b40      	cmp	r3, #64	; 0x40
 8003ff6:	bf0c      	ite	eq
 8003ff8:	2301      	moveq	r3, #1
 8003ffa:	2300      	movne	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d103      	bne.n	8004016 <HAL_UART_IRQHandler+0x17a>
 800400e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d04f      	beq.n	80040b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fa66 	bl	80044e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004026:	2b40      	cmp	r3, #64	; 0x40
 8004028:	d141      	bne.n	80040ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3314      	adds	r3, #20
 8004030:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004038:	e853 3f00 	ldrex	r3, [r3]
 800403c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004040:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004048:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3314      	adds	r3, #20
 8004052:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004056:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800405a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004062:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004066:	e841 2300 	strex	r3, r2, [r1]
 800406a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800406e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1d9      	bne.n	800402a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	2b00      	cmp	r3, #0
 800407c:	d013      	beq.n	80040a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004082:	4a7d      	ldr	r2, [pc, #500]	; (8004278 <HAL_UART_IRQHandler+0x3dc>)
 8004084:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408a:	4618      	mov	r0, r3
 800408c:	f7fd fe14 	bl	8001cb8 <HAL_DMA_Abort_IT>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d016      	beq.n	80040c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040a0:	4610      	mov	r0, r2
 80040a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a4:	e00e      	b.n	80040c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f99a 	bl	80043e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ac:	e00a      	b.n	80040c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f996 	bl	80043e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b4:	e006      	b.n	80040c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f992 	bl	80043e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80040c2:	e170      	b.n	80043a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c4:	bf00      	nop
    return;
 80040c6:	e16e      	b.n	80043a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	f040 814a 	bne.w	8004366 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040d6:	f003 0310 	and.w	r3, r3, #16
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 8143 	beq.w	8004366 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 813c 	beq.w	8004366 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	60bb      	str	r3, [r7, #8]
 8004102:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410e:	2b40      	cmp	r3, #64	; 0x40
 8004110:	f040 80b4 	bne.w	800427c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004120:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8140 	beq.w	80043aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800412e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004132:	429a      	cmp	r2, r3
 8004134:	f080 8139 	bcs.w	80043aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800413e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800414a:	f000 8088 	beq.w	800425e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	330c      	adds	r3, #12
 8004154:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004158:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004164:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800416c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	330c      	adds	r3, #12
 8004176:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800417a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800417e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004186:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800418a:	e841 2300 	strex	r3, r2, [r1]
 800418e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004192:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1d9      	bne.n	800414e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3314      	adds	r3, #20
 80041a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041a4:	e853 3f00 	ldrex	r3, [r3]
 80041a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041ac:	f023 0301 	bic.w	r3, r3, #1
 80041b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3314      	adds	r3, #20
 80041ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80041d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e1      	bne.n	800419a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3314      	adds	r3, #20
 80041dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3314      	adds	r3, #20
 80041f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004200:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004202:	e841 2300 	strex	r3, r2, [r1]
 8004206:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1e3      	bne.n	80041d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	330c      	adds	r3, #12
 8004222:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004226:	e853 3f00 	ldrex	r3, [r3]
 800422a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800422c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800422e:	f023 0310 	bic.w	r3, r3, #16
 8004232:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	330c      	adds	r3, #12
 800423c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004240:	65ba      	str	r2, [r7, #88]	; 0x58
 8004242:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004246:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800424e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e3      	bne.n	800421c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	4618      	mov	r0, r3
 800425a:	f7fd fcbd 	bl	8001bd8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004266:	b29b      	uxth	r3, r3
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	b29b      	uxth	r3, r3
 800426c:	4619      	mov	r1, r3
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f8c0 	bl	80043f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004274:	e099      	b.n	80043aa <HAL_UART_IRQHandler+0x50e>
 8004276:	bf00      	nop
 8004278:	080045af 	.word	0x080045af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004284:	b29b      	uxth	r3, r3
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 808b 	beq.w	80043ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004298:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8086 	beq.w	80043ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	330c      	adds	r3, #12
 80042a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	330c      	adds	r3, #12
 80042c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80042c6:	647a      	str	r2, [r7, #68]	; 0x44
 80042c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042ce:	e841 2300 	strex	r3, r2, [r1]
 80042d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1e3      	bne.n	80042a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3314      	adds	r3, #20
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	e853 3f00 	ldrex	r3, [r3]
 80042e8:	623b      	str	r3, [r7, #32]
   return(result);
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3314      	adds	r3, #20
 80042fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042fe:	633a      	str	r2, [r7, #48]	; 0x30
 8004300:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004306:	e841 2300 	strex	r3, r2, [r1]
 800430a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800430c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1e3      	bne.n	80042da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2220      	movs	r2, #32
 8004316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	330c      	adds	r3, #12
 8004326:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	e853 3f00 	ldrex	r3, [r3]
 800432e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0310 	bic.w	r3, r3, #16
 8004336:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	330c      	adds	r3, #12
 8004340:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004344:	61fa      	str	r2, [r7, #28]
 8004346:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004348:	69b9      	ldr	r1, [r7, #24]
 800434a:	69fa      	ldr	r2, [r7, #28]
 800434c:	e841 2300 	strex	r3, r2, [r1]
 8004350:	617b      	str	r3, [r7, #20]
   return(result);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1e3      	bne.n	8004320 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800435c:	4619      	mov	r1, r3
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f848 	bl	80043f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004364:	e023      	b.n	80043ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436e:	2b00      	cmp	r3, #0
 8004370:	d009      	beq.n	8004386 <HAL_UART_IRQHandler+0x4ea>
 8004372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f929 	bl	80045d6 <UART_Transmit_IT>
    return;
 8004384:	e014      	b.n	80043b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800438a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00e      	beq.n	80043b0 <HAL_UART_IRQHandler+0x514>
 8004392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d008      	beq.n	80043b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f969 	bl	8004676 <UART_EndTransmit_IT>
    return;
 80043a4:	e004      	b.n	80043b0 <HAL_UART_IRQHandler+0x514>
    return;
 80043a6:	bf00      	nop
 80043a8:	e002      	b.n	80043b0 <HAL_UART_IRQHandler+0x514>
      return;
 80043aa:	bf00      	nop
 80043ac:	e000      	b.n	80043b0 <HAL_UART_IRQHandler+0x514>
      return;
 80043ae:	bf00      	nop
  }
}
 80043b0:	37e8      	adds	r7, #232	; 0xe8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop

080043b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	460b      	mov	r3, r1
 80043fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b090      	sub	sp, #64	; 0x40
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	4613      	mov	r3, r2
 800441a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800441c:	e050      	b.n	80044c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004424:	d04c      	beq.n	80044c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004428:	2b00      	cmp	r3, #0
 800442a:	d007      	beq.n	800443c <UART_WaitOnFlagUntilTimeout+0x30>
 800442c:	f7fc fef4 	bl	8001218 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004438:	429a      	cmp	r2, r3
 800443a:	d241      	bcs.n	80044c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	330c      	adds	r3, #12
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004446:	e853 3f00 	ldrex	r3, [r3]
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	330c      	adds	r3, #12
 800445a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800445c:	637a      	str	r2, [r7, #52]	; 0x34
 800445e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004460:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004464:	e841 2300 	strex	r3, r2, [r1]
 8004468:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800446a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e5      	bne.n	800443c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3314      	adds	r3, #20
 8004476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	e853 3f00 	ldrex	r3, [r3]
 800447e:	613b      	str	r3, [r7, #16]
   return(result);
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f023 0301 	bic.w	r3, r3, #1
 8004486:	63bb      	str	r3, [r7, #56]	; 0x38
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3314      	adds	r3, #20
 800448e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004490:	623a      	str	r2, [r7, #32]
 8004492:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004494:	69f9      	ldr	r1, [r7, #28]
 8004496:	6a3a      	ldr	r2, [r7, #32]
 8004498:	e841 2300 	strex	r3, r2, [r1]
 800449c:	61bb      	str	r3, [r7, #24]
   return(result);
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e5      	bne.n	8004470 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e00f      	b.n	80044e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	4013      	ands	r3, r2
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	bf0c      	ite	eq
 80044d0:	2301      	moveq	r3, #1
 80044d2:	2300      	movne	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	461a      	mov	r2, r3
 80044d8:	79fb      	ldrb	r3, [r7, #7]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d09f      	beq.n	800441e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3740      	adds	r7, #64	; 0x40
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b095      	sub	sp, #84	; 0x54
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	330c      	adds	r3, #12
 80044f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fa:	e853 3f00 	ldrex	r3, [r3]
 80044fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004502:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	330c      	adds	r3, #12
 800450e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004510:	643a      	str	r2, [r7, #64]	; 0x40
 8004512:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004514:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004516:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004518:	e841 2300 	strex	r3, r2, [r1]
 800451c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1e5      	bne.n	80044f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3314      	adds	r3, #20
 800452a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	e853 3f00 	ldrex	r3, [r3]
 8004532:	61fb      	str	r3, [r7, #28]
   return(result);
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f023 0301 	bic.w	r3, r3, #1
 800453a:	64bb      	str	r3, [r7, #72]	; 0x48
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3314      	adds	r3, #20
 8004542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004544:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800454a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e5      	bne.n	8004524 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455c:	2b01      	cmp	r3, #1
 800455e:	d119      	bne.n	8004594 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	330c      	adds	r3, #12
 8004566:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	e853 3f00 	ldrex	r3, [r3]
 800456e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f023 0310 	bic.w	r3, r3, #16
 8004576:	647b      	str	r3, [r7, #68]	; 0x44
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	330c      	adds	r3, #12
 800457e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004580:	61ba      	str	r2, [r7, #24]
 8004582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004584:	6979      	ldr	r1, [r7, #20]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	e841 2300 	strex	r3, r2, [r1]
 800458c:	613b      	str	r3, [r7, #16]
   return(result);
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1e5      	bne.n	8004560 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045a2:	bf00      	nop
 80045a4:	3754      	adds	r7, #84	; 0x54
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f7ff ff09 	bl	80043e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045ce:	bf00      	nop
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b085      	sub	sp, #20
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b21      	cmp	r3, #33	; 0x21
 80045e8:	d13e      	bne.n	8004668 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f2:	d114      	bne.n	800461e <UART_Transmit_IT+0x48>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d110      	bne.n	800461e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	461a      	mov	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004610:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	1c9a      	adds	r2, r3, #2
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	621a      	str	r2, [r3, #32]
 800461c:	e008      	b.n	8004630 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	1c59      	adds	r1, r3, #1
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6211      	str	r1, [r2, #32]
 8004628:	781a      	ldrb	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29b      	uxth	r3, r3
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	4619      	mov	r1, r3
 800463e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10f      	bne.n	8004664 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004652:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004662:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004664:	2300      	movs	r3, #0
 8004666:	e000      	b.n	800466a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004668:	2302      	movs	r3, #2
  }
}
 800466a:	4618      	mov	r0, r3
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800468c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7ff fe8e 	bl	80043b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b08c      	sub	sp, #48	; 0x30
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b22      	cmp	r3, #34	; 0x22
 80046b8:	f040 80ab 	bne.w	8004812 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c4:	d117      	bne.n	80046f6 <UART_Receive_IT+0x50>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d113      	bne.n	80046f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	1c9a      	adds	r2, r3, #2
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	629a      	str	r2, [r3, #40]	; 0x28
 80046f4:	e026      	b.n	8004744 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80046fc:	2300      	movs	r3, #0
 80046fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004708:	d007      	beq.n	800471a <UART_Receive_IT+0x74>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10a      	bne.n	8004728 <UART_Receive_IT+0x82>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d106      	bne.n	8004728 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	b2da      	uxtb	r2, r3
 8004722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004724:	701a      	strb	r2, [r3, #0]
 8004726:	e008      	b.n	800473a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	b2db      	uxtb	r3, r3
 8004730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004734:	b2da      	uxtb	r2, r3
 8004736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004738:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004748:	b29b      	uxth	r3, r3
 800474a:	3b01      	subs	r3, #1
 800474c:	b29b      	uxth	r3, r3
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	4619      	mov	r1, r3
 8004752:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004754:	2b00      	cmp	r3, #0
 8004756:	d15a      	bne.n	800480e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0220 	bic.w	r2, r2, #32
 8004766:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004776:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695a      	ldr	r2, [r3, #20]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0201 	bic.w	r2, r2, #1
 8004786:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2220      	movs	r2, #32
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004794:	2b01      	cmp	r3, #1
 8004796:	d135      	bne.n	8004804 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	330c      	adds	r3, #12
 80047a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	e853 3f00 	ldrex	r3, [r3]
 80047ac:	613b      	str	r3, [r7, #16]
   return(result);
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f023 0310 	bic.w	r3, r3, #16
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	330c      	adds	r3, #12
 80047bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047be:	623a      	str	r2, [r7, #32]
 80047c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c2:	69f9      	ldr	r1, [r7, #28]
 80047c4:	6a3a      	ldr	r2, [r7, #32]
 80047c6:	e841 2300 	strex	r3, r2, [r1]
 80047ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1e5      	bne.n	800479e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0310 	and.w	r3, r3, #16
 80047dc:	2b10      	cmp	r3, #16
 80047de:	d10a      	bne.n	80047f6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047fa:	4619      	mov	r1, r3
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff fdf9 	bl	80043f4 <HAL_UARTEx_RxEventCallback>
 8004802:	e002      	b.n	800480a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff fde1 	bl	80043cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	e002      	b.n	8004814 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	e000      	b.n	8004814 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004812:	2302      	movs	r3, #2
  }
}
 8004814:	4618      	mov	r0, r3
 8004816:	3730      	adds	r7, #48	; 0x30
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800481c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004820:	b0c0      	sub	sp, #256	; 0x100
 8004822:	af00      	add	r7, sp, #0
 8004824:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004838:	68d9      	ldr	r1, [r3, #12]
 800483a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	ea40 0301 	orr.w	r3, r0, r1
 8004844:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	431a      	orrs	r2, r3
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	431a      	orrs	r2, r3
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004874:	f021 010c 	bic.w	r1, r1, #12
 8004878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004882:	430b      	orrs	r3, r1
 8004884:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004896:	6999      	ldr	r1, [r3, #24]
 8004898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	ea40 0301 	orr.w	r3, r0, r1
 80048a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	4b8f      	ldr	r3, [pc, #572]	; (8004ae8 <UART_SetConfig+0x2cc>)
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d005      	beq.n	80048bc <UART_SetConfig+0xa0>
 80048b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	4b8d      	ldr	r3, [pc, #564]	; (8004aec <UART_SetConfig+0x2d0>)
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d104      	bne.n	80048c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048bc:	f7fe f95e 	bl	8002b7c <HAL_RCC_GetPCLK2Freq>
 80048c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048c4:	e003      	b.n	80048ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048c6:	f7fe f945 	bl	8002b54 <HAL_RCC_GetPCLK1Freq>
 80048ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d8:	f040 810c 	bne.w	8004af4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80048ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048ee:	4622      	mov	r2, r4
 80048f0:	462b      	mov	r3, r5
 80048f2:	1891      	adds	r1, r2, r2
 80048f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80048f6:	415b      	adcs	r3, r3
 80048f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048fe:	4621      	mov	r1, r4
 8004900:	eb12 0801 	adds.w	r8, r2, r1
 8004904:	4629      	mov	r1, r5
 8004906:	eb43 0901 	adc.w	r9, r3, r1
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	f04f 0300 	mov.w	r3, #0
 8004912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800491a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800491e:	4690      	mov	r8, r2
 8004920:	4699      	mov	r9, r3
 8004922:	4623      	mov	r3, r4
 8004924:	eb18 0303 	adds.w	r3, r8, r3
 8004928:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800492c:	462b      	mov	r3, r5
 800492e:	eb49 0303 	adc.w	r3, r9, r3
 8004932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004942:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004946:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800494a:	460b      	mov	r3, r1
 800494c:	18db      	adds	r3, r3, r3
 800494e:	653b      	str	r3, [r7, #80]	; 0x50
 8004950:	4613      	mov	r3, r2
 8004952:	eb42 0303 	adc.w	r3, r2, r3
 8004956:	657b      	str	r3, [r7, #84]	; 0x54
 8004958:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800495c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004960:	f7fb fc3e 	bl	80001e0 <__aeabi_uldivmod>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4b61      	ldr	r3, [pc, #388]	; (8004af0 <UART_SetConfig+0x2d4>)
 800496a:	fba3 2302 	umull	r2, r3, r3, r2
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	011c      	lsls	r4, r3, #4
 8004972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004976:	2200      	movs	r2, #0
 8004978:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800497c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004980:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004984:	4642      	mov	r2, r8
 8004986:	464b      	mov	r3, r9
 8004988:	1891      	adds	r1, r2, r2
 800498a:	64b9      	str	r1, [r7, #72]	; 0x48
 800498c:	415b      	adcs	r3, r3
 800498e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004990:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004994:	4641      	mov	r1, r8
 8004996:	eb12 0a01 	adds.w	sl, r2, r1
 800499a:	4649      	mov	r1, r9
 800499c:	eb43 0b01 	adc.w	fp, r3, r1
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049b4:	4692      	mov	sl, r2
 80049b6:	469b      	mov	fp, r3
 80049b8:	4643      	mov	r3, r8
 80049ba:	eb1a 0303 	adds.w	r3, sl, r3
 80049be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049c2:	464b      	mov	r3, r9
 80049c4:	eb4b 0303 	adc.w	r3, fp, r3
 80049c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80049dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049e0:	460b      	mov	r3, r1
 80049e2:	18db      	adds	r3, r3, r3
 80049e4:	643b      	str	r3, [r7, #64]	; 0x40
 80049e6:	4613      	mov	r3, r2
 80049e8:	eb42 0303 	adc.w	r3, r2, r3
 80049ec:	647b      	str	r3, [r7, #68]	; 0x44
 80049ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80049f6:	f7fb fbf3 	bl	80001e0 <__aeabi_uldivmod>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4611      	mov	r1, r2
 8004a00:	4b3b      	ldr	r3, [pc, #236]	; (8004af0 <UART_SetConfig+0x2d4>)
 8004a02:	fba3 2301 	umull	r2, r3, r3, r1
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	2264      	movs	r2, #100	; 0x64
 8004a0a:	fb02 f303 	mul.w	r3, r2, r3
 8004a0e:	1acb      	subs	r3, r1, r3
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a16:	4b36      	ldr	r3, [pc, #216]	; (8004af0 <UART_SetConfig+0x2d4>)
 8004a18:	fba3 2302 	umull	r2, r3, r3, r2
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a24:	441c      	add	r4, r3
 8004a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a38:	4642      	mov	r2, r8
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	1891      	adds	r1, r2, r2
 8004a3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a40:	415b      	adcs	r3, r3
 8004a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a48:	4641      	mov	r1, r8
 8004a4a:	1851      	adds	r1, r2, r1
 8004a4c:	6339      	str	r1, [r7, #48]	; 0x30
 8004a4e:	4649      	mov	r1, r9
 8004a50:	414b      	adcs	r3, r1
 8004a52:	637b      	str	r3, [r7, #52]	; 0x34
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	f04f 0300 	mov.w	r3, #0
 8004a5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a60:	4659      	mov	r1, fp
 8004a62:	00cb      	lsls	r3, r1, #3
 8004a64:	4651      	mov	r1, sl
 8004a66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a6a:	4651      	mov	r1, sl
 8004a6c:	00ca      	lsls	r2, r1, #3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	4619      	mov	r1, r3
 8004a72:	4603      	mov	r3, r0
 8004a74:	4642      	mov	r2, r8
 8004a76:	189b      	adds	r3, r3, r2
 8004a78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a7c:	464b      	mov	r3, r9
 8004a7e:	460a      	mov	r2, r1
 8004a80:	eb42 0303 	adc.w	r3, r2, r3
 8004a84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	18db      	adds	r3, r3, r3
 8004aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	eb42 0303 	adc.w	r3, r2, r3
 8004aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004aae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ab2:	f7fb fb95 	bl	80001e0 <__aeabi_uldivmod>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4b0d      	ldr	r3, [pc, #52]	; (8004af0 <UART_SetConfig+0x2d4>)
 8004abc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ac0:	095b      	lsrs	r3, r3, #5
 8004ac2:	2164      	movs	r1, #100	; 0x64
 8004ac4:	fb01 f303 	mul.w	r3, r1, r3
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	3332      	adds	r3, #50	; 0x32
 8004ace:	4a08      	ldr	r2, [pc, #32]	; (8004af0 <UART_SetConfig+0x2d4>)
 8004ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	f003 0207 	and.w	r2, r3, #7
 8004ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4422      	add	r2, r4
 8004ae2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ae4:	e105      	b.n	8004cf2 <UART_SetConfig+0x4d6>
 8004ae6:	bf00      	nop
 8004ae8:	40011000 	.word	0x40011000
 8004aec:	40011400 	.word	0x40011400
 8004af0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004af8:	2200      	movs	r2, #0
 8004afa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004afe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b06:	4642      	mov	r2, r8
 8004b08:	464b      	mov	r3, r9
 8004b0a:	1891      	adds	r1, r2, r2
 8004b0c:	6239      	str	r1, [r7, #32]
 8004b0e:	415b      	adcs	r3, r3
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24
 8004b12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b16:	4641      	mov	r1, r8
 8004b18:	1854      	adds	r4, r2, r1
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	eb43 0501 	adc.w	r5, r3, r1
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	00eb      	lsls	r3, r5, #3
 8004b2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b2e:	00e2      	lsls	r2, r4, #3
 8004b30:	4614      	mov	r4, r2
 8004b32:	461d      	mov	r5, r3
 8004b34:	4643      	mov	r3, r8
 8004b36:	18e3      	adds	r3, r4, r3
 8004b38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b3c:	464b      	mov	r3, r9
 8004b3e:	eb45 0303 	adc.w	r3, r5, r3
 8004b42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	f04f 0300 	mov.w	r3, #0
 8004b5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b62:	4629      	mov	r1, r5
 8004b64:	008b      	lsls	r3, r1, #2
 8004b66:	4621      	mov	r1, r4
 8004b68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	008a      	lsls	r2, r1, #2
 8004b70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b74:	f7fb fb34 	bl	80001e0 <__aeabi_uldivmod>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4b60      	ldr	r3, [pc, #384]	; (8004d00 <UART_SetConfig+0x4e4>)
 8004b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	011c      	lsls	r4, r3, #4
 8004b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b98:	4642      	mov	r2, r8
 8004b9a:	464b      	mov	r3, r9
 8004b9c:	1891      	adds	r1, r2, r2
 8004b9e:	61b9      	str	r1, [r7, #24]
 8004ba0:	415b      	adcs	r3, r3
 8004ba2:	61fb      	str	r3, [r7, #28]
 8004ba4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ba8:	4641      	mov	r1, r8
 8004baa:	1851      	adds	r1, r2, r1
 8004bac:	6139      	str	r1, [r7, #16]
 8004bae:	4649      	mov	r1, r9
 8004bb0:	414b      	adcs	r3, r1
 8004bb2:	617b      	str	r3, [r7, #20]
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bc0:	4659      	mov	r1, fp
 8004bc2:	00cb      	lsls	r3, r1, #3
 8004bc4:	4651      	mov	r1, sl
 8004bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bca:	4651      	mov	r1, sl
 8004bcc:	00ca      	lsls	r2, r1, #3
 8004bce:	4610      	mov	r0, r2
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4642      	mov	r2, r8
 8004bd6:	189b      	adds	r3, r3, r2
 8004bd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bdc:	464b      	mov	r3, r9
 8004bde:	460a      	mov	r2, r1
 8004be0:	eb42 0303 	adc.w	r3, r2, r3
 8004be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bf2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c00:	4649      	mov	r1, r9
 8004c02:	008b      	lsls	r3, r1, #2
 8004c04:	4641      	mov	r1, r8
 8004c06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c0a:	4641      	mov	r1, r8
 8004c0c:	008a      	lsls	r2, r1, #2
 8004c0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c12:	f7fb fae5 	bl	80001e0 <__aeabi_uldivmod>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4b39      	ldr	r3, [pc, #228]	; (8004d00 <UART_SetConfig+0x4e4>)
 8004c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c20:	095b      	lsrs	r3, r3, #5
 8004c22:	2164      	movs	r1, #100	; 0x64
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	011b      	lsls	r3, r3, #4
 8004c2c:	3332      	adds	r3, #50	; 0x32
 8004c2e:	4a34      	ldr	r2, [pc, #208]	; (8004d00 <UART_SetConfig+0x4e4>)
 8004c30:	fba2 2303 	umull	r2, r3, r2, r3
 8004c34:	095b      	lsrs	r3, r3, #5
 8004c36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c3a:	441c      	add	r4, r3
 8004c3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c40:	2200      	movs	r2, #0
 8004c42:	673b      	str	r3, [r7, #112]	; 0x70
 8004c44:	677a      	str	r2, [r7, #116]	; 0x74
 8004c46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c4a:	4642      	mov	r2, r8
 8004c4c:	464b      	mov	r3, r9
 8004c4e:	1891      	adds	r1, r2, r2
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	415b      	adcs	r3, r3
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c5a:	4641      	mov	r1, r8
 8004c5c:	1851      	adds	r1, r2, r1
 8004c5e:	6039      	str	r1, [r7, #0]
 8004c60:	4649      	mov	r1, r9
 8004c62:	414b      	adcs	r3, r1
 8004c64:	607b      	str	r3, [r7, #4]
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	f04f 0300 	mov.w	r3, #0
 8004c6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c72:	4659      	mov	r1, fp
 8004c74:	00cb      	lsls	r3, r1, #3
 8004c76:	4651      	mov	r1, sl
 8004c78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c7c:	4651      	mov	r1, sl
 8004c7e:	00ca      	lsls	r2, r1, #3
 8004c80:	4610      	mov	r0, r2
 8004c82:	4619      	mov	r1, r3
 8004c84:	4603      	mov	r3, r0
 8004c86:	4642      	mov	r2, r8
 8004c88:	189b      	adds	r3, r3, r2
 8004c8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c8c:	464b      	mov	r3, r9
 8004c8e:	460a      	mov	r2, r1
 8004c90:	eb42 0303 	adc.w	r3, r2, r3
 8004c94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	663b      	str	r3, [r7, #96]	; 0x60
 8004ca0:	667a      	str	r2, [r7, #100]	; 0x64
 8004ca2:	f04f 0200 	mov.w	r2, #0
 8004ca6:	f04f 0300 	mov.w	r3, #0
 8004caa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004cae:	4649      	mov	r1, r9
 8004cb0:	008b      	lsls	r3, r1, #2
 8004cb2:	4641      	mov	r1, r8
 8004cb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cb8:	4641      	mov	r1, r8
 8004cba:	008a      	lsls	r2, r1, #2
 8004cbc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004cc0:	f7fb fa8e 	bl	80001e0 <__aeabi_uldivmod>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <UART_SetConfig+0x4e4>)
 8004cca:	fba3 1302 	umull	r1, r3, r3, r2
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	2164      	movs	r1, #100	; 0x64
 8004cd2:	fb01 f303 	mul.w	r3, r1, r3
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	3332      	adds	r3, #50	; 0x32
 8004cdc:	4a08      	ldr	r2, [pc, #32]	; (8004d00 <UART_SetConfig+0x4e4>)
 8004cde:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce2:	095b      	lsrs	r3, r3, #5
 8004ce4:	f003 020f 	and.w	r2, r3, #15
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4422      	add	r2, r4
 8004cf0:	609a      	str	r2, [r3, #8]
}
 8004cf2:	bf00      	nop
 8004cf4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cfe:	bf00      	nop
 8004d00:	51eb851f 	.word	0x51eb851f

08004d04 <__NVIC_SetPriority>:
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	6039      	str	r1, [r7, #0]
 8004d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	db0a      	blt.n	8004d2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	490c      	ldr	r1, [pc, #48]	; (8004d50 <__NVIC_SetPriority+0x4c>)
 8004d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d22:	0112      	lsls	r2, r2, #4
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	440b      	add	r3, r1
 8004d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004d2c:	e00a      	b.n	8004d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	4908      	ldr	r1, [pc, #32]	; (8004d54 <__NVIC_SetPriority+0x50>)
 8004d34:	79fb      	ldrb	r3, [r7, #7]
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	3b04      	subs	r3, #4
 8004d3c:	0112      	lsls	r2, r2, #4
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	440b      	add	r3, r1
 8004d42:	761a      	strb	r2, [r3, #24]
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	e000e100 	.word	0xe000e100
 8004d54:	e000ed00 	.word	0xe000ed00

08004d58 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004d5c:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <SysTick_Handler+0x1c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004d60:	f001 fd28 	bl	80067b4 <xTaskGetSchedulerState>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d001      	beq.n	8004d6e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004d6a:	f002 fb0d 	bl	8007388 <xPortSysTickHandler>
  }
}
 8004d6e:	bf00      	nop
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	e000e010 	.word	0xe000e010

08004d78 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	f06f 0004 	mvn.w	r0, #4
 8004d82:	f7ff ffbf 	bl	8004d04 <__NVIC_SetPriority>
#endif
}
 8004d86:	bf00      	nop
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d92:	f3ef 8305 	mrs	r3, IPSR
 8004d96:	603b      	str	r3, [r7, #0]
  return(result);
 8004d98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004d9e:	f06f 0305 	mvn.w	r3, #5
 8004da2:	607b      	str	r3, [r7, #4]
 8004da4:	e00c      	b.n	8004dc0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004da6:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <osKernelInitialize+0x44>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d105      	bne.n	8004dba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004dae:	4b08      	ldr	r3, [pc, #32]	; (8004dd0 <osKernelInitialize+0x44>)
 8004db0:	2201      	movs	r2, #1
 8004db2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	607b      	str	r3, [r7, #4]
 8004db8:	e002      	b.n	8004dc0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004dba:	f04f 33ff 	mov.w	r3, #4294967295
 8004dbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004dc0:	687b      	ldr	r3, [r7, #4]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	2000026c 	.word	0x2000026c

08004dd4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dda:	f3ef 8305 	mrs	r3, IPSR
 8004dde:	603b      	str	r3, [r7, #0]
  return(result);
 8004de0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <osKernelStart+0x1a>
    stat = osErrorISR;
 8004de6:	f06f 0305 	mvn.w	r3, #5
 8004dea:	607b      	str	r3, [r7, #4]
 8004dec:	e010      	b.n	8004e10 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004dee:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <osKernelStart+0x48>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d109      	bne.n	8004e0a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004df6:	f7ff ffbf 	bl	8004d78 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004dfa:	4b08      	ldr	r3, [pc, #32]	; (8004e1c <osKernelStart+0x48>)
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004e00:	f001 f87c 	bl	8005efc <vTaskStartScheduler>
      stat = osOK;
 8004e04:	2300      	movs	r3, #0
 8004e06:	607b      	str	r3, [r7, #4]
 8004e08:	e002      	b.n	8004e10 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004e10:	687b      	ldr	r3, [r7, #4]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	2000026c 	.word	0x2000026c

08004e20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08e      	sub	sp, #56	; 0x38
 8004e24:	af04      	add	r7, sp, #16
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e30:	f3ef 8305 	mrs	r3, IPSR
 8004e34:	617b      	str	r3, [r7, #20]
  return(result);
 8004e36:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d17e      	bne.n	8004f3a <osThreadNew+0x11a>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d07b      	beq.n	8004f3a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004e42:	2380      	movs	r3, #128	; 0x80
 8004e44:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004e46:	2318      	movs	r3, #24
 8004e48:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e52:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d045      	beq.n	8004ee6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <osThreadNew+0x48>
        name = attr->name;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d008      	beq.n	8004e8e <osThreadNew+0x6e>
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	2b38      	cmp	r3, #56	; 0x38
 8004e80:	d805      	bhi.n	8004e8e <osThreadNew+0x6e>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <osThreadNew+0x72>
        return (NULL);
 8004e8e:	2300      	movs	r3, #0
 8004e90:	e054      	b.n	8004f3c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	089b      	lsrs	r3, r3, #2
 8004ea0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00e      	beq.n	8004ec8 <osThreadNew+0xa8>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	2bbb      	cmp	r3, #187	; 0xbb
 8004eb0:	d90a      	bls.n	8004ec8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d006      	beq.n	8004ec8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <osThreadNew+0xa8>
        mem = 1;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	e010      	b.n	8004eea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10c      	bne.n	8004eea <osThreadNew+0xca>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d108      	bne.n	8004eea <osThreadNew+0xca>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d104      	bne.n	8004eea <osThreadNew+0xca>
          mem = 0;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	61bb      	str	r3, [r7, #24]
 8004ee4:	e001      	b.n	8004eea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d110      	bne.n	8004f12 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ef8:	9202      	str	r2, [sp, #8]
 8004efa:	9301      	str	r3, [sp, #4]
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	6a3a      	ldr	r2, [r7, #32]
 8004f04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 fe0c 	bl	8005b24 <xTaskCreateStatic>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	613b      	str	r3, [r7, #16]
 8004f10:	e013      	b.n	8004f3a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d110      	bne.n	8004f3a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	f107 0310 	add.w	r3, r7, #16
 8004f20:	9301      	str	r3, [sp, #4]
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 fe57 	bl	8005bde <xTaskCreate>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d001      	beq.n	8004f3a <osThreadNew+0x11a>
            hTask = NULL;
 8004f36:	2300      	movs	r3, #0
 8004f38:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004f3a:	693b      	ldr	r3, [r7, #16]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3728      	adds	r7, #40	; 0x28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f4c:	f3ef 8305 	mrs	r3, IPSR
 8004f50:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f52:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <osDelay+0x1c>
    stat = osErrorISR;
 8004f58:	f06f 0305 	mvn.w	r3, #5
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	e007      	b.n	8004f70 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 ff92 	bl	8005e94 <vTaskDelay>
    }
  }

  return (stat);
 8004f70:	68fb      	ldr	r3, [r7, #12]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4a07      	ldr	r2, [pc, #28]	; (8004fa8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	4a06      	ldr	r2, [pc, #24]	; (8004fac <vApplicationGetIdleTaskMemory+0x30>)
 8004f92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2280      	movs	r2, #128	; 0x80
 8004f98:	601a      	str	r2, [r3, #0]
}
 8004f9a:	bf00      	nop
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	20000270 	.word	0x20000270
 8004fac:	2000032c 	.word	0x2000032c

08004fb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4a07      	ldr	r2, [pc, #28]	; (8004fdc <vApplicationGetTimerTaskMemory+0x2c>)
 8004fc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	4a06      	ldr	r2, [pc, #24]	; (8004fe0 <vApplicationGetTimerTaskMemory+0x30>)
 8004fc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fce:	601a      	str	r2, [r3, #0]
}
 8004fd0:	bf00      	nop
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	2000052c 	.word	0x2000052c
 8004fe0:	200005e8 	.word	0x200005e8

08004fe4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f103 0208 	add.w	r2, r3, #8
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ffc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f103 0208 	add.w	r2, r3, #8
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f103 0208 	add.w	r2, r3, #8
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800503e:	b480      	push	{r7}
 8005040:	b085      	sub	sp, #20
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	601a      	str	r2, [r3, #0]
}
 800507a:	bf00      	nop
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005086:	b480      	push	{r7}
 8005088:	b085      	sub	sp, #20
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509c:	d103      	bne.n	80050a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	e00c      	b.n	80050c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	3308      	adds	r3, #8
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	e002      	b.n	80050b4 <vListInsert+0x2e>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d2f6      	bcs.n	80050ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	601a      	str	r2, [r3, #0]
}
 80050ec:	bf00      	nop
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6892      	ldr	r2, [r2, #8]
 800510e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6852      	ldr	r2, [r2, #4]
 8005118:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	429a      	cmp	r2, r3
 8005122:	d103      	bne.n	800512c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	1e5a      	subs	r2, r3, #1
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10a      	bne.n	8005176 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005164:	f383 8811 	msr	BASEPRI, r3
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005172:	bf00      	nop
 8005174:	e7fe      	b.n	8005174 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005176:	f002 f875 	bl	8007264 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005182:	68f9      	ldr	r1, [r7, #12]
 8005184:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005186:	fb01 f303 	mul.w	r3, r1, r3
 800518a:	441a      	add	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a6:	3b01      	subs	r3, #1
 80051a8:	68f9      	ldr	r1, [r7, #12]
 80051aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051ac:	fb01 f303 	mul.w	r3, r1, r3
 80051b0:	441a      	add	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	22ff      	movs	r2, #255	; 0xff
 80051ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	22ff      	movs	r2, #255	; 0xff
 80051c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d114      	bne.n	80051f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d01a      	beq.n	800520a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	3310      	adds	r3, #16
 80051d8:	4618      	mov	r0, r3
 80051da:	f001 f929 	bl	8006430 <xTaskRemoveFromEventList>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d012      	beq.n	800520a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051e4:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <xQueueGenericReset+0xcc>)
 80051e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	e009      	b.n	800520a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3310      	adds	r3, #16
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7ff fef2 	bl	8004fe4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3324      	adds	r3, #36	; 0x24
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff feed 	bl	8004fe4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800520a:	f002 f85b 	bl	80072c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800520e:	2301      	movs	r3, #1
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	e000ed04 	.word	0xe000ed04

0800521c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08e      	sub	sp, #56	; 0x38
 8005220:	af02      	add	r7, sp, #8
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
 8005228:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10a      	bne.n	8005246 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005242:	bf00      	nop
 8005244:	e7fe      	b.n	8005244 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10a      	bne.n	8005262 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800525e:	bf00      	nop
 8005260:	e7fe      	b.n	8005260 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d002      	beq.n	800526e <xQueueGenericCreateStatic+0x52>
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <xQueueGenericCreateStatic+0x56>
 800526e:	2301      	movs	r3, #1
 8005270:	e000      	b.n	8005274 <xQueueGenericCreateStatic+0x58>
 8005272:	2300      	movs	r3, #0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	623b      	str	r3, [r7, #32]
}
 800528a:	bf00      	nop
 800528c:	e7fe      	b.n	800528c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d102      	bne.n	800529a <xQueueGenericCreateStatic+0x7e>
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <xQueueGenericCreateStatic+0x82>
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <xQueueGenericCreateStatic+0x84>
 800529e:	2300      	movs	r3, #0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10a      	bne.n	80052ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	61fb      	str	r3, [r7, #28]
}
 80052b6:	bf00      	nop
 80052b8:	e7fe      	b.n	80052b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80052ba:	2350      	movs	r3, #80	; 0x50
 80052bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2b50      	cmp	r3, #80	; 0x50
 80052c2:	d00a      	beq.n	80052da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	61bb      	str	r3, [r7, #24]
}
 80052d6:	bf00      	nop
 80052d8:	e7fe      	b.n	80052d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80052e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00d      	beq.n	8005302 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80052f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	4613      	mov	r3, r2
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	68b9      	ldr	r1, [r7, #8]
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 f805 	bl	800530c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005304:	4618      	mov	r0, r3
 8005306:	3730      	adds	r7, #48	; 0x30
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
 8005318:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d103      	bne.n	8005328 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	e002      	b.n	800532e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800533a:	2101      	movs	r1, #1
 800533c:	69b8      	ldr	r0, [r7, #24]
 800533e:	f7ff ff05 	bl	800514c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	78fa      	ldrb	r2, [r7, #3]
 8005346:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800534a:	bf00      	nop
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
	...

08005354 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08e      	sub	sp, #56	; 0x38
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005362:	2300      	movs	r3, #0
 8005364:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10a      	bne.n	8005386 <xQueueGenericSend+0x32>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005382:	bf00      	nop
 8005384:	e7fe      	b.n	8005384 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d103      	bne.n	8005394 <xQueueGenericSend+0x40>
 800538c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <xQueueGenericSend+0x44>
 8005394:	2301      	movs	r3, #1
 8005396:	e000      	b.n	800539a <xQueueGenericSend+0x46>
 8005398:	2300      	movs	r3, #0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10a      	bne.n	80053b4 <xQueueGenericSend+0x60>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053b0:	bf00      	nop
 80053b2:	e7fe      	b.n	80053b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d103      	bne.n	80053c2 <xQueueGenericSend+0x6e>
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d101      	bne.n	80053c6 <xQueueGenericSend+0x72>
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <xQueueGenericSend+0x74>
 80053c6:	2300      	movs	r3, #0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10a      	bne.n	80053e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	623b      	str	r3, [r7, #32]
}
 80053de:	bf00      	nop
 80053e0:	e7fe      	b.n	80053e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053e2:	f001 f9e7 	bl	80067b4 <xTaskGetSchedulerState>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d102      	bne.n	80053f2 <xQueueGenericSend+0x9e>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <xQueueGenericSend+0xa2>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <xQueueGenericSend+0xa4>
 80053f6:	2300      	movs	r3, #0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10a      	bne.n	8005412 <xQueueGenericSend+0xbe>
	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	61fb      	str	r3, [r7, #28]
}
 800540e:	bf00      	nop
 8005410:	e7fe      	b.n	8005410 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005412:	f001 ff27 	bl	8007264 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541e:	429a      	cmp	r2, r3
 8005420:	d302      	bcc.n	8005428 <xQueueGenericSend+0xd4>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b02      	cmp	r3, #2
 8005426:	d129      	bne.n	800547c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800542e:	f000 fa0b 	bl	8005848 <prvCopyDataToQueue>
 8005432:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	2b00      	cmp	r3, #0
 800543a:	d010      	beq.n	800545e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800543c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543e:	3324      	adds	r3, #36	; 0x24
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fff5 	bl	8006430 <xTaskRemoveFromEventList>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d013      	beq.n	8005474 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800544c:	4b3f      	ldr	r3, [pc, #252]	; (800554c <xQueueGenericSend+0x1f8>)
 800544e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	e00a      	b.n	8005474 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800545e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005460:	2b00      	cmp	r3, #0
 8005462:	d007      	beq.n	8005474 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005464:	4b39      	ldr	r3, [pc, #228]	; (800554c <xQueueGenericSend+0x1f8>)
 8005466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005474:	f001 ff26 	bl	80072c4 <vPortExitCritical>
				return pdPASS;
 8005478:	2301      	movs	r3, #1
 800547a:	e063      	b.n	8005544 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d103      	bne.n	800548a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005482:	f001 ff1f 	bl	80072c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005486:	2300      	movs	r3, #0
 8005488:	e05c      	b.n	8005544 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800548a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548c:	2b00      	cmp	r3, #0
 800548e:	d106      	bne.n	800549e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005490:	f107 0314 	add.w	r3, r7, #20
 8005494:	4618      	mov	r0, r3
 8005496:	f001 f82f 	bl	80064f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800549a:	2301      	movs	r3, #1
 800549c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800549e:	f001 ff11 	bl	80072c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054a2:	f000 fd9b 	bl	8005fdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054a6:	f001 fedd 	bl	8007264 <vPortEnterCritical>
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054b0:	b25b      	sxtb	r3, r3
 80054b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b6:	d103      	bne.n	80054c0 <xQueueGenericSend+0x16c>
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054c6:	b25b      	sxtb	r3, r3
 80054c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054cc:	d103      	bne.n	80054d6 <xQueueGenericSend+0x182>
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054d6:	f001 fef5 	bl	80072c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054da:	1d3a      	adds	r2, r7, #4
 80054dc:	f107 0314 	add.w	r3, r7, #20
 80054e0:	4611      	mov	r1, r2
 80054e2:	4618      	mov	r0, r3
 80054e4:	f001 f81e 	bl	8006524 <xTaskCheckForTimeOut>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d124      	bne.n	8005538 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054f0:	f000 faa2 	bl	8005a38 <prvIsQueueFull>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d018      	beq.n	800552c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	3310      	adds	r3, #16
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	4611      	mov	r1, r2
 8005502:	4618      	mov	r0, r3
 8005504:	f000 ff44 	bl	8006390 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800550a:	f000 fa2d 	bl	8005968 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800550e:	f000 fd73 	bl	8005ff8 <xTaskResumeAll>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	f47f af7c 	bne.w	8005412 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800551a:	4b0c      	ldr	r3, [pc, #48]	; (800554c <xQueueGenericSend+0x1f8>)
 800551c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	e772      	b.n	8005412 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800552c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800552e:	f000 fa1b 	bl	8005968 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005532:	f000 fd61 	bl	8005ff8 <xTaskResumeAll>
 8005536:	e76c      	b.n	8005412 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800553a:	f000 fa15 	bl	8005968 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800553e:	f000 fd5b 	bl	8005ff8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005542:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005544:	4618      	mov	r0, r3
 8005546:	3738      	adds	r7, #56	; 0x38
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	e000ed04 	.word	0xe000ed04

08005550 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b090      	sub	sp, #64	; 0x40
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10a      	bne.n	800557e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556c:	f383 8811 	msr	BASEPRI, r3
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800557a:	bf00      	nop
 800557c:	e7fe      	b.n	800557c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d103      	bne.n	800558c <xQueueGenericSendFromISR+0x3c>
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <xQueueGenericSendFromISR+0x40>
 800558c:	2301      	movs	r3, #1
 800558e:	e000      	b.n	8005592 <xQueueGenericSendFromISR+0x42>
 8005590:	2300      	movs	r3, #0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10a      	bne.n	80055ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055a8:	bf00      	nop
 80055aa:	e7fe      	b.n	80055aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d103      	bne.n	80055ba <xQueueGenericSendFromISR+0x6a>
 80055b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <xQueueGenericSendFromISR+0x6e>
 80055ba:	2301      	movs	r3, #1
 80055bc:	e000      	b.n	80055c0 <xQueueGenericSendFromISR+0x70>
 80055be:	2300      	movs	r3, #0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10a      	bne.n	80055da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	623b      	str	r3, [r7, #32]
}
 80055d6:	bf00      	nop
 80055d8:	e7fe      	b.n	80055d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055da:	f001 ff25 	bl	8007428 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055de:	f3ef 8211 	mrs	r2, BASEPRI
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	61fa      	str	r2, [r7, #28]
 80055f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005602:	429a      	cmp	r2, r3
 8005604:	d302      	bcc.n	800560c <xQueueGenericSendFromISR+0xbc>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b02      	cmp	r3, #2
 800560a:	d12f      	bne.n	800566c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800560c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	68b9      	ldr	r1, [r7, #8]
 8005620:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005622:	f000 f911 	bl	8005848 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005626:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800562a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562e:	d112      	bne.n	8005656 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	2b00      	cmp	r3, #0
 8005636:	d016      	beq.n	8005666 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563a:	3324      	adds	r3, #36	; 0x24
 800563c:	4618      	mov	r0, r3
 800563e:	f000 fef7 	bl	8006430 <xTaskRemoveFromEventList>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00e      	beq.n	8005666 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00b      	beq.n	8005666 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	e007      	b.n	8005666 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005656:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800565a:	3301      	adds	r3, #1
 800565c:	b2db      	uxtb	r3, r3
 800565e:	b25a      	sxtb	r2, r3
 8005660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005666:	2301      	movs	r3, #1
 8005668:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800566a:	e001      	b.n	8005670 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800566c:	2300      	movs	r3, #0
 800566e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005672:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800567a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800567c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800567e:	4618      	mov	r0, r3
 8005680:	3740      	adds	r7, #64	; 0x40
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
	...

08005688 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08c      	sub	sp, #48	; 0x30
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005694:	2300      	movs	r3, #0
 8005696:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10a      	bne.n	80056b8 <xQueueReceive+0x30>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	623b      	str	r3, [r7, #32]
}
 80056b4:	bf00      	nop
 80056b6:	e7fe      	b.n	80056b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d103      	bne.n	80056c6 <xQueueReceive+0x3e>
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <xQueueReceive+0x42>
 80056c6:	2301      	movs	r3, #1
 80056c8:	e000      	b.n	80056cc <xQueueReceive+0x44>
 80056ca:	2300      	movs	r3, #0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10a      	bne.n	80056e6 <xQueueReceive+0x5e>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	61fb      	str	r3, [r7, #28]
}
 80056e2:	bf00      	nop
 80056e4:	e7fe      	b.n	80056e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056e6:	f001 f865 	bl	80067b4 <xTaskGetSchedulerState>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d102      	bne.n	80056f6 <xQueueReceive+0x6e>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <xQueueReceive+0x72>
 80056f6:	2301      	movs	r3, #1
 80056f8:	e000      	b.n	80056fc <xQueueReceive+0x74>
 80056fa:	2300      	movs	r3, #0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10a      	bne.n	8005716 <xQueueReceive+0x8e>
	__asm volatile
 8005700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	61bb      	str	r3, [r7, #24]
}
 8005712:	bf00      	nop
 8005714:	e7fe      	b.n	8005714 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005716:	f001 fda5 	bl	8007264 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	2b00      	cmp	r3, #0
 8005724:	d01f      	beq.n	8005766 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005726:	68b9      	ldr	r1, [r7, #8]
 8005728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800572a:	f000 f8f7 	bl	800591c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	1e5a      	subs	r2, r3, #1
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00f      	beq.n	800575e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005740:	3310      	adds	r3, #16
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fe74 	bl	8006430 <xTaskRemoveFromEventList>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d007      	beq.n	800575e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800574e:	4b3d      	ldr	r3, [pc, #244]	; (8005844 <xQueueReceive+0x1bc>)
 8005750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800575e:	f001 fdb1 	bl	80072c4 <vPortExitCritical>
				return pdPASS;
 8005762:	2301      	movs	r3, #1
 8005764:	e069      	b.n	800583a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d103      	bne.n	8005774 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800576c:	f001 fdaa 	bl	80072c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005770:	2300      	movs	r3, #0
 8005772:	e062      	b.n	800583a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800577a:	f107 0310 	add.w	r3, r7, #16
 800577e:	4618      	mov	r0, r3
 8005780:	f000 feba 	bl	80064f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005784:	2301      	movs	r3, #1
 8005786:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005788:	f001 fd9c 	bl	80072c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800578c:	f000 fc26 	bl	8005fdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005790:	f001 fd68 	bl	8007264 <vPortEnterCritical>
 8005794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005796:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800579a:	b25b      	sxtb	r3, r3
 800579c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a0:	d103      	bne.n	80057aa <xQueueReceive+0x122>
 80057a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057b0:	b25b      	sxtb	r3, r3
 80057b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b6:	d103      	bne.n	80057c0 <xQueueReceive+0x138>
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057c0:	f001 fd80 	bl	80072c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057c4:	1d3a      	adds	r2, r7, #4
 80057c6:	f107 0310 	add.w	r3, r7, #16
 80057ca:	4611      	mov	r1, r2
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 fea9 	bl	8006524 <xTaskCheckForTimeOut>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d123      	bne.n	8005820 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057da:	f000 f917 	bl	8005a0c <prvIsQueueEmpty>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d017      	beq.n	8005814 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e6:	3324      	adds	r3, #36	; 0x24
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	4611      	mov	r1, r2
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 fdcf 	bl	8006390 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057f4:	f000 f8b8 	bl	8005968 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057f8:	f000 fbfe 	bl	8005ff8 <xTaskResumeAll>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d189      	bne.n	8005716 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005802:	4b10      	ldr	r3, [pc, #64]	; (8005844 <xQueueReceive+0x1bc>)
 8005804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	e780      	b.n	8005716 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005816:	f000 f8a7 	bl	8005968 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800581a:	f000 fbed 	bl	8005ff8 <xTaskResumeAll>
 800581e:	e77a      	b.n	8005716 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005822:	f000 f8a1 	bl	8005968 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005826:	f000 fbe7 	bl	8005ff8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800582a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800582c:	f000 f8ee 	bl	8005a0c <prvIsQueueEmpty>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	f43f af6f 	beq.w	8005716 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005838:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800583a:	4618      	mov	r0, r3
 800583c:	3730      	adds	r7, #48	; 0x30
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	e000ed04 	.word	0xe000ed04

08005848 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005854:	2300      	movs	r3, #0
 8005856:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10d      	bne.n	8005882 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d14d      	bne.n	800590a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	4618      	mov	r0, r3
 8005874:	f000 ffbc 	bl	80067f0 <xTaskPriorityDisinherit>
 8005878:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	609a      	str	r2, [r3, #8]
 8005880:	e043      	b.n	800590a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d119      	bne.n	80058bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6858      	ldr	r0, [r3, #4]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005890:	461a      	mov	r2, r3
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	f002 f818 	bl	80078c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a0:	441a      	add	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d32b      	bcc.n	800590a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	605a      	str	r2, [r3, #4]
 80058ba:	e026      	b.n	800590a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	68d8      	ldr	r0, [r3, #12]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c4:	461a      	mov	r2, r3
 80058c6:	68b9      	ldr	r1, [r7, #8]
 80058c8:	f001 fffe 	bl	80078c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	68da      	ldr	r2, [r3, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d4:	425b      	negs	r3, r3
 80058d6:	441a      	add	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	68da      	ldr	r2, [r3, #12]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d207      	bcs.n	80058f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f0:	425b      	negs	r3, r3
 80058f2:	441a      	add	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d105      	bne.n	800590a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	3b01      	subs	r3, #1
 8005908:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005912:	697b      	ldr	r3, [r7, #20]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	2b00      	cmp	r3, #0
 800592c:	d018      	beq.n	8005960 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	441a      	add	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	429a      	cmp	r2, r3
 8005946:	d303      	bcc.n	8005950 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68d9      	ldr	r1, [r3, #12]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005958:	461a      	mov	r2, r3
 800595a:	6838      	ldr	r0, [r7, #0]
 800595c:	f001 ffb4 	bl	80078c8 <memcpy>
	}
}
 8005960:	bf00      	nop
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005970:	f001 fc78 	bl	8007264 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800597a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800597c:	e011      	b.n	80059a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	2b00      	cmp	r3, #0
 8005984:	d012      	beq.n	80059ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3324      	adds	r3, #36	; 0x24
 800598a:	4618      	mov	r0, r3
 800598c:	f000 fd50 	bl	8006430 <xTaskRemoveFromEventList>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005996:	f000 fe27 	bl	80065e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800599a:	7bfb      	ldrb	r3, [r7, #15]
 800599c:	3b01      	subs	r3, #1
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	dce9      	bgt.n	800597e <prvUnlockQueue+0x16>
 80059aa:	e000      	b.n	80059ae <prvUnlockQueue+0x46>
					break;
 80059ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	22ff      	movs	r2, #255	; 0xff
 80059b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80059b6:	f001 fc85 	bl	80072c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80059ba:	f001 fc53 	bl	8007264 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059c6:	e011      	b.n	80059ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d012      	beq.n	80059f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3310      	adds	r3, #16
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 fd2b 	bl	8006430 <xTaskRemoveFromEventList>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80059e0:	f000 fe02 	bl	80065e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80059e4:	7bbb      	ldrb	r3, [r7, #14]
 80059e6:	3b01      	subs	r3, #1
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	dce9      	bgt.n	80059c8 <prvUnlockQueue+0x60>
 80059f4:	e000      	b.n	80059f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80059f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	22ff      	movs	r2, #255	; 0xff
 80059fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005a00:	f001 fc60 	bl	80072c4 <vPortExitCritical>
}
 8005a04:	bf00      	nop
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a14:	f001 fc26 	bl	8007264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d102      	bne.n	8005a26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005a20:	2301      	movs	r3, #1
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	e001      	b.n	8005a2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a26:	2300      	movs	r3, #0
 8005a28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a2a:	f001 fc4b 	bl	80072c4 <vPortExitCritical>

	return xReturn;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a40:	f001 fc10 	bl	8007264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d102      	bne.n	8005a56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005a50:	2301      	movs	r3, #1
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	e001      	b.n	8005a5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005a56:	2300      	movs	r3, #0
 8005a58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a5a:	f001 fc33 	bl	80072c4 <vPortExitCritical>

	return xReturn;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	e014      	b.n	8005aa2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a78:	4a0f      	ldr	r2, [pc, #60]	; (8005ab8 <vQueueAddToRegistry+0x50>)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10b      	bne.n	8005a9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a84:	490c      	ldr	r1, [pc, #48]	; (8005ab8 <vQueueAddToRegistry+0x50>)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a8e:	4a0a      	ldr	r2, [pc, #40]	; (8005ab8 <vQueueAddToRegistry+0x50>)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	4413      	add	r3, r2
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a9a:	e006      	b.n	8005aaa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2b07      	cmp	r3, #7
 8005aa6:	d9e7      	bls.n	8005a78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005aa8:	bf00      	nop
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	200009e8 	.word	0x200009e8

08005abc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005acc:	f001 fbca 	bl	8007264 <vPortEnterCritical>
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ad6:	b25b      	sxtb	r3, r3
 8005ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005adc:	d103      	bne.n	8005ae6 <vQueueWaitForMessageRestricted+0x2a>
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aec:	b25b      	sxtb	r3, r3
 8005aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af2:	d103      	bne.n	8005afc <vQueueWaitForMessageRestricted+0x40>
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005afc:	f001 fbe2 	bl	80072c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d106      	bne.n	8005b16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	3324      	adds	r3, #36	; 0x24
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	68b9      	ldr	r1, [r7, #8]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 fc61 	bl	80063d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005b16:	6978      	ldr	r0, [r7, #20]
 8005b18:	f7ff ff26 	bl	8005968 <prvUnlockQueue>
	}
 8005b1c:	bf00      	nop
 8005b1e:	3718      	adds	r7, #24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08e      	sub	sp, #56	; 0x38
 8005b28:	af04      	add	r7, sp, #16
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
 8005b30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10a      	bne.n	8005b4e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	623b      	str	r3, [r7, #32]
}
 8005b4a:	bf00      	nop
 8005b4c:	e7fe      	b.n	8005b4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <xTaskCreateStatic+0x46>
	__asm volatile
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	61fb      	str	r3, [r7, #28]
}
 8005b66:	bf00      	nop
 8005b68:	e7fe      	b.n	8005b68 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b6a:	23bc      	movs	r3, #188	; 0xbc
 8005b6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	2bbc      	cmp	r3, #188	; 0xbc
 8005b72:	d00a      	beq.n	8005b8a <xTaskCreateStatic+0x66>
	__asm volatile
 8005b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b78:	f383 8811 	msr	BASEPRI, r3
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	61bb      	str	r3, [r7, #24]
}
 8005b86:	bf00      	nop
 8005b88:	e7fe      	b.n	8005b88 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b8a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d01e      	beq.n	8005bd0 <xTaskCreateStatic+0xac>
 8005b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01b      	beq.n	8005bd0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ba0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005baa:	2300      	movs	r3, #0
 8005bac:	9303      	str	r3, [sp, #12]
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	9302      	str	r3, [sp, #8]
 8005bb2:	f107 0314 	add.w	r3, r7, #20
 8005bb6:	9301      	str	r3, [sp, #4]
 8005bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	68b9      	ldr	r1, [r7, #8]
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f850 	bl	8005c68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bca:	f000 f8f3 	bl	8005db4 <prvAddNewTaskToReadyList>
 8005bce:	e001      	b.n	8005bd4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bd4:	697b      	ldr	r3, [r7, #20]
	}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3728      	adds	r7, #40	; 0x28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b08c      	sub	sp, #48	; 0x30
 8005be2:	af04      	add	r7, sp, #16
 8005be4:	60f8      	str	r0, [r7, #12]
 8005be6:	60b9      	str	r1, [r7, #8]
 8005be8:	603b      	str	r3, [r7, #0]
 8005bea:	4613      	mov	r3, r2
 8005bec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f001 fc58 	bl	80074a8 <pvPortMalloc>
 8005bf8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00e      	beq.n	8005c1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c00:	20bc      	movs	r0, #188	; 0xbc
 8005c02:	f001 fc51 	bl	80074a8 <pvPortMalloc>
 8005c06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	631a      	str	r2, [r3, #48]	; 0x30
 8005c14:	e005      	b.n	8005c22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c16:	6978      	ldr	r0, [r7, #20]
 8005c18:	f001 fd12 	bl	8007640 <vPortFree>
 8005c1c:	e001      	b.n	8005c22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d017      	beq.n	8005c58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c30:	88fa      	ldrh	r2, [r7, #6]
 8005c32:	2300      	movs	r3, #0
 8005c34:	9303      	str	r3, [sp, #12]
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	9302      	str	r3, [sp, #8]
 8005c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3c:	9301      	str	r3, [sp, #4]
 8005c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68b9      	ldr	r1, [r7, #8]
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 f80e 	bl	8005c68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c4c:	69f8      	ldr	r0, [r7, #28]
 8005c4e:	f000 f8b1 	bl	8005db4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c52:	2301      	movs	r3, #1
 8005c54:	61bb      	str	r3, [r7, #24]
 8005c56:	e002      	b.n	8005c5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c58:	f04f 33ff 	mov.w	r3, #4294967295
 8005c5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c5e:	69bb      	ldr	r3, [r7, #24]
	}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3720      	adds	r7, #32
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	461a      	mov	r2, r3
 8005c80:	21a5      	movs	r1, #165	; 0xa5
 8005c82:	f001 fe2f 	bl	80078e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c90:	3b01      	subs	r3, #1
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	f023 0307 	bic.w	r3, r3, #7
 8005c9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	617b      	str	r3, [r7, #20]
}
 8005cbc:	bf00      	nop
 8005cbe:	e7fe      	b.n	8005cbe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d01f      	beq.n	8005d06 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	61fb      	str	r3, [r7, #28]
 8005cca:	e012      	b.n	8005cf2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	7819      	ldrb	r1, [r3, #0]
 8005cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	4413      	add	r3, r2
 8005cda:	3334      	adds	r3, #52	; 0x34
 8005cdc:	460a      	mov	r2, r1
 8005cde:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d006      	beq.n	8005cfa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	61fb      	str	r3, [r7, #28]
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	2b0f      	cmp	r3, #15
 8005cf6:	d9e9      	bls.n	8005ccc <prvInitialiseNewTask+0x64>
 8005cf8:	e000      	b.n	8005cfc <prvInitialiseNewTask+0x94>
			{
				break;
 8005cfa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d04:	e003      	b.n	8005d0e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d10:	2b37      	cmp	r3, #55	; 0x37
 8005d12:	d901      	bls.n	8005d18 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d14:	2337      	movs	r3, #55	; 0x37
 8005d16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d22:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d26:	2200      	movs	r2, #0
 8005d28:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7ff f978 	bl	8005024 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d36:	3318      	adds	r3, #24
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7ff f973 	bl	8005024 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	2200      	movs	r2, #0
 8005d58:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	3354      	adds	r3, #84	; 0x54
 8005d68:	2260      	movs	r2, #96	; 0x60
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f001 fdb9 	bl	80078e4 <memset>
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	4a0c      	ldr	r2, [pc, #48]	; (8005da8 <prvInitialiseNewTask+0x140>)
 8005d76:	659a      	str	r2, [r3, #88]	; 0x58
 8005d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7a:	4a0c      	ldr	r2, [pc, #48]	; (8005dac <prvInitialiseNewTask+0x144>)
 8005d7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d80:	4a0b      	ldr	r2, [pc, #44]	; (8005db0 <prvInitialiseNewTask+0x148>)
 8005d82:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	68f9      	ldr	r1, [r7, #12]
 8005d88:	69b8      	ldr	r0, [r7, #24]
 8005d8a:	f001 f941 	bl	8007010 <pxPortInitialiseStack>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d9e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005da0:	bf00      	nop
 8005da2:	3720      	adds	r7, #32
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	08007c14 	.word	0x08007c14
 8005dac:	08007c34 	.word	0x08007c34
 8005db0:	08007bf4 	.word	0x08007bf4

08005db4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005dbc:	f001 fa52 	bl	8007264 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005dc0:	4b2d      	ldr	r3, [pc, #180]	; (8005e78 <prvAddNewTaskToReadyList+0xc4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	4a2c      	ldr	r2, [pc, #176]	; (8005e78 <prvAddNewTaskToReadyList+0xc4>)
 8005dc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005dca:	4b2c      	ldr	r3, [pc, #176]	; (8005e7c <prvAddNewTaskToReadyList+0xc8>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d109      	bne.n	8005de6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005dd2:	4a2a      	ldr	r2, [pc, #168]	; (8005e7c <prvAddNewTaskToReadyList+0xc8>)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005dd8:	4b27      	ldr	r3, [pc, #156]	; (8005e78 <prvAddNewTaskToReadyList+0xc4>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d110      	bne.n	8005e02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005de0:	f000 fc26 	bl	8006630 <prvInitialiseTaskLists>
 8005de4:	e00d      	b.n	8005e02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005de6:	4b26      	ldr	r3, [pc, #152]	; (8005e80 <prvAddNewTaskToReadyList+0xcc>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d109      	bne.n	8005e02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005dee:	4b23      	ldr	r3, [pc, #140]	; (8005e7c <prvAddNewTaskToReadyList+0xc8>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d802      	bhi.n	8005e02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005dfc:	4a1f      	ldr	r2, [pc, #124]	; (8005e7c <prvAddNewTaskToReadyList+0xc8>)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e02:	4b20      	ldr	r3, [pc, #128]	; (8005e84 <prvAddNewTaskToReadyList+0xd0>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3301      	adds	r3, #1
 8005e08:	4a1e      	ldr	r2, [pc, #120]	; (8005e84 <prvAddNewTaskToReadyList+0xd0>)
 8005e0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e0c:	4b1d      	ldr	r3, [pc, #116]	; (8005e84 <prvAddNewTaskToReadyList+0xd0>)
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e18:	4b1b      	ldr	r3, [pc, #108]	; (8005e88 <prvAddNewTaskToReadyList+0xd4>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d903      	bls.n	8005e28 <prvAddNewTaskToReadyList+0x74>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e24:	4a18      	ldr	r2, [pc, #96]	; (8005e88 <prvAddNewTaskToReadyList+0xd4>)
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4a15      	ldr	r2, [pc, #84]	; (8005e8c <prvAddNewTaskToReadyList+0xd8>)
 8005e36:	441a      	add	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4610      	mov	r0, r2
 8005e40:	f7ff f8fd 	bl	800503e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e44:	f001 fa3e 	bl	80072c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e48:	4b0d      	ldr	r3, [pc, #52]	; (8005e80 <prvAddNewTaskToReadyList+0xcc>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00e      	beq.n	8005e6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e50:	4b0a      	ldr	r3, [pc, #40]	; (8005e7c <prvAddNewTaskToReadyList+0xc8>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d207      	bcs.n	8005e6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e5e:	4b0c      	ldr	r3, [pc, #48]	; (8005e90 <prvAddNewTaskToReadyList+0xdc>)
 8005e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e6e:	bf00      	nop
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20000efc 	.word	0x20000efc
 8005e7c:	20000a28 	.word	0x20000a28
 8005e80:	20000f08 	.word	0x20000f08
 8005e84:	20000f18 	.word	0x20000f18
 8005e88:	20000f04 	.word	0x20000f04
 8005e8c:	20000a2c 	.word	0x20000a2c
 8005e90:	e000ed04 	.word	0xe000ed04

08005e94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d017      	beq.n	8005ed6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ea6:	4b13      	ldr	r3, [pc, #76]	; (8005ef4 <vTaskDelay+0x60>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <vTaskDelay+0x30>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	60bb      	str	r3, [r7, #8]
}
 8005ec0:	bf00      	nop
 8005ec2:	e7fe      	b.n	8005ec2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ec4:	f000 f88a 	bl	8005fdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ec8:	2100      	movs	r1, #0
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fcfe 	bl	80068cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ed0:	f000 f892 	bl	8005ff8 <xTaskResumeAll>
 8005ed4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d107      	bne.n	8005eec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005edc:	4b06      	ldr	r3, [pc, #24]	; (8005ef8 <vTaskDelay+0x64>)
 8005ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005eec:	bf00      	nop
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	20000f24 	.word	0x20000f24
 8005ef8:	e000ed04 	.word	0xe000ed04

08005efc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08a      	sub	sp, #40	; 0x28
 8005f00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f02:	2300      	movs	r3, #0
 8005f04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f06:	2300      	movs	r3, #0
 8005f08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f0a:	463a      	mov	r2, r7
 8005f0c:	1d39      	adds	r1, r7, #4
 8005f0e:	f107 0308 	add.w	r3, r7, #8
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7ff f832 	bl	8004f7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	9202      	str	r2, [sp, #8]
 8005f20:	9301      	str	r3, [sp, #4]
 8005f22:	2300      	movs	r3, #0
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	2300      	movs	r3, #0
 8005f28:	460a      	mov	r2, r1
 8005f2a:	4924      	ldr	r1, [pc, #144]	; (8005fbc <vTaskStartScheduler+0xc0>)
 8005f2c:	4824      	ldr	r0, [pc, #144]	; (8005fc0 <vTaskStartScheduler+0xc4>)
 8005f2e:	f7ff fdf9 	bl	8005b24 <xTaskCreateStatic>
 8005f32:	4603      	mov	r3, r0
 8005f34:	4a23      	ldr	r2, [pc, #140]	; (8005fc4 <vTaskStartScheduler+0xc8>)
 8005f36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f38:	4b22      	ldr	r3, [pc, #136]	; (8005fc4 <vTaskStartScheduler+0xc8>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f40:	2301      	movs	r3, #1
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	e001      	b.n	8005f4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d102      	bne.n	8005f56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005f50:	f000 fd10 	bl	8006974 <xTimerCreateTimerTask>
 8005f54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d11b      	bne.n	8005f94 <vTaskStartScheduler+0x98>
	__asm volatile
 8005f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	613b      	str	r3, [r7, #16]
}
 8005f6e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f70:	4b15      	ldr	r3, [pc, #84]	; (8005fc8 <vTaskStartScheduler+0xcc>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3354      	adds	r3, #84	; 0x54
 8005f76:	4a15      	ldr	r2, [pc, #84]	; (8005fcc <vTaskStartScheduler+0xd0>)
 8005f78:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f7a:	4b15      	ldr	r3, [pc, #84]	; (8005fd0 <vTaskStartScheduler+0xd4>)
 8005f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f82:	4b14      	ldr	r3, [pc, #80]	; (8005fd4 <vTaskStartScheduler+0xd8>)
 8005f84:	2201      	movs	r2, #1
 8005f86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f88:	4b13      	ldr	r3, [pc, #76]	; (8005fd8 <vTaskStartScheduler+0xdc>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f8e:	f001 f8c7 	bl	8007120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f92:	e00e      	b.n	8005fb2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9a:	d10a      	bne.n	8005fb2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	60fb      	str	r3, [r7, #12]
}
 8005fae:	bf00      	nop
 8005fb0:	e7fe      	b.n	8005fb0 <vTaskStartScheduler+0xb4>
}
 8005fb2:	bf00      	nop
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	08007b34 	.word	0x08007b34
 8005fc0:	08006601 	.word	0x08006601
 8005fc4:	20000f20 	.word	0x20000f20
 8005fc8:	20000a28 	.word	0x20000a28
 8005fcc:	20000010 	.word	0x20000010
 8005fd0:	20000f1c 	.word	0x20000f1c
 8005fd4:	20000f08 	.word	0x20000f08
 8005fd8:	20000f00 	.word	0x20000f00

08005fdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005fe0:	4b04      	ldr	r3, [pc, #16]	; (8005ff4 <vTaskSuspendAll+0x18>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	4a03      	ldr	r2, [pc, #12]	; (8005ff4 <vTaskSuspendAll+0x18>)
 8005fe8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005fea:	bf00      	nop
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	20000f24 	.word	0x20000f24

08005ff8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ffe:	2300      	movs	r3, #0
 8006000:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006002:	2300      	movs	r3, #0
 8006004:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006006:	4b42      	ldr	r3, [pc, #264]	; (8006110 <xTaskResumeAll+0x118>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <xTaskResumeAll+0x2c>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	603b      	str	r3, [r7, #0]
}
 8006020:	bf00      	nop
 8006022:	e7fe      	b.n	8006022 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006024:	f001 f91e 	bl	8007264 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006028:	4b39      	ldr	r3, [pc, #228]	; (8006110 <xTaskResumeAll+0x118>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3b01      	subs	r3, #1
 800602e:	4a38      	ldr	r2, [pc, #224]	; (8006110 <xTaskResumeAll+0x118>)
 8006030:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006032:	4b37      	ldr	r3, [pc, #220]	; (8006110 <xTaskResumeAll+0x118>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d162      	bne.n	8006100 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800603a:	4b36      	ldr	r3, [pc, #216]	; (8006114 <xTaskResumeAll+0x11c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d05e      	beq.n	8006100 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006042:	e02f      	b.n	80060a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006044:	4b34      	ldr	r3, [pc, #208]	; (8006118 <xTaskResumeAll+0x120>)
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	3318      	adds	r3, #24
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff f851 	bl	80050f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	3304      	adds	r3, #4
 800605a:	4618      	mov	r0, r3
 800605c:	f7ff f84c 	bl	80050f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006064:	4b2d      	ldr	r3, [pc, #180]	; (800611c <xTaskResumeAll+0x124>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	429a      	cmp	r2, r3
 800606a:	d903      	bls.n	8006074 <xTaskResumeAll+0x7c>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006070:	4a2a      	ldr	r2, [pc, #168]	; (800611c <xTaskResumeAll+0x124>)
 8006072:	6013      	str	r3, [r2, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006078:	4613      	mov	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4a27      	ldr	r2, [pc, #156]	; (8006120 <xTaskResumeAll+0x128>)
 8006082:	441a      	add	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	3304      	adds	r3, #4
 8006088:	4619      	mov	r1, r3
 800608a:	4610      	mov	r0, r2
 800608c:	f7fe ffd7 	bl	800503e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006094:	4b23      	ldr	r3, [pc, #140]	; (8006124 <xTaskResumeAll+0x12c>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609a:	429a      	cmp	r2, r3
 800609c:	d302      	bcc.n	80060a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800609e:	4b22      	ldr	r3, [pc, #136]	; (8006128 <xTaskResumeAll+0x130>)
 80060a0:	2201      	movs	r2, #1
 80060a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060a4:	4b1c      	ldr	r3, [pc, #112]	; (8006118 <xTaskResumeAll+0x120>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1cb      	bne.n	8006044 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80060b2:	f000 fb5f 	bl	8006774 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80060b6:	4b1d      	ldr	r3, [pc, #116]	; (800612c <xTaskResumeAll+0x134>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d010      	beq.n	80060e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80060c2:	f000 f847 	bl	8006154 <xTaskIncrementTick>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d002      	beq.n	80060d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80060cc:	4b16      	ldr	r3, [pc, #88]	; (8006128 <xTaskResumeAll+0x130>)
 80060ce:	2201      	movs	r2, #1
 80060d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	3b01      	subs	r3, #1
 80060d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1f1      	bne.n	80060c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80060de:	4b13      	ldr	r3, [pc, #76]	; (800612c <xTaskResumeAll+0x134>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80060e4:	4b10      	ldr	r3, [pc, #64]	; (8006128 <xTaskResumeAll+0x130>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d009      	beq.n	8006100 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80060ec:	2301      	movs	r3, #1
 80060ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80060f0:	4b0f      	ldr	r3, [pc, #60]	; (8006130 <xTaskResumeAll+0x138>)
 80060f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006100:	f001 f8e0 	bl	80072c4 <vPortExitCritical>

	return xAlreadyYielded;
 8006104:	68bb      	ldr	r3, [r7, #8]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20000f24 	.word	0x20000f24
 8006114:	20000efc 	.word	0x20000efc
 8006118:	20000ebc 	.word	0x20000ebc
 800611c:	20000f04 	.word	0x20000f04
 8006120:	20000a2c 	.word	0x20000a2c
 8006124:	20000a28 	.word	0x20000a28
 8006128:	20000f10 	.word	0x20000f10
 800612c:	20000f0c 	.word	0x20000f0c
 8006130:	e000ed04 	.word	0xe000ed04

08006134 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800613a:	4b05      	ldr	r3, [pc, #20]	; (8006150 <xTaskGetTickCount+0x1c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006140:	687b      	ldr	r3, [r7, #4]
}
 8006142:	4618      	mov	r0, r3
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	20000f00 	.word	0x20000f00

08006154 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800615a:	2300      	movs	r3, #0
 800615c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800615e:	4b4f      	ldr	r3, [pc, #316]	; (800629c <xTaskIncrementTick+0x148>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	f040 808f 	bne.w	8006286 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006168:	4b4d      	ldr	r3, [pc, #308]	; (80062a0 <xTaskIncrementTick+0x14c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3301      	adds	r3, #1
 800616e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006170:	4a4b      	ldr	r2, [pc, #300]	; (80062a0 <xTaskIncrementTick+0x14c>)
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d120      	bne.n	80061be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800617c:	4b49      	ldr	r3, [pc, #292]	; (80062a4 <xTaskIncrementTick+0x150>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <xTaskIncrementTick+0x48>
	__asm volatile
 8006186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	603b      	str	r3, [r7, #0]
}
 8006198:	bf00      	nop
 800619a:	e7fe      	b.n	800619a <xTaskIncrementTick+0x46>
 800619c:	4b41      	ldr	r3, [pc, #260]	; (80062a4 <xTaskIncrementTick+0x150>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	4b41      	ldr	r3, [pc, #260]	; (80062a8 <xTaskIncrementTick+0x154>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a3f      	ldr	r2, [pc, #252]	; (80062a4 <xTaskIncrementTick+0x150>)
 80061a8:	6013      	str	r3, [r2, #0]
 80061aa:	4a3f      	ldr	r2, [pc, #252]	; (80062a8 <xTaskIncrementTick+0x154>)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6013      	str	r3, [r2, #0]
 80061b0:	4b3e      	ldr	r3, [pc, #248]	; (80062ac <xTaskIncrementTick+0x158>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3301      	adds	r3, #1
 80061b6:	4a3d      	ldr	r2, [pc, #244]	; (80062ac <xTaskIncrementTick+0x158>)
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	f000 fadb 	bl	8006774 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061be:	4b3c      	ldr	r3, [pc, #240]	; (80062b0 <xTaskIncrementTick+0x15c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d349      	bcc.n	800625c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061c8:	4b36      	ldr	r3, [pc, #216]	; (80062a4 <xTaskIncrementTick+0x150>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d104      	bne.n	80061dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061d2:	4b37      	ldr	r3, [pc, #220]	; (80062b0 <xTaskIncrementTick+0x15c>)
 80061d4:	f04f 32ff 	mov.w	r2, #4294967295
 80061d8:	601a      	str	r2, [r3, #0]
					break;
 80061da:	e03f      	b.n	800625c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061dc:	4b31      	ldr	r3, [pc, #196]	; (80062a4 <xTaskIncrementTick+0x150>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d203      	bcs.n	80061fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80061f4:	4a2e      	ldr	r2, [pc, #184]	; (80062b0 <xTaskIncrementTick+0x15c>)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80061fa:	e02f      	b.n	800625c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	3304      	adds	r3, #4
 8006200:	4618      	mov	r0, r3
 8006202:	f7fe ff79 	bl	80050f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620a:	2b00      	cmp	r3, #0
 800620c:	d004      	beq.n	8006218 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	3318      	adds	r3, #24
 8006212:	4618      	mov	r0, r3
 8006214:	f7fe ff70 	bl	80050f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800621c:	4b25      	ldr	r3, [pc, #148]	; (80062b4 <xTaskIncrementTick+0x160>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	429a      	cmp	r2, r3
 8006222:	d903      	bls.n	800622c <xTaskIncrementTick+0xd8>
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006228:	4a22      	ldr	r2, [pc, #136]	; (80062b4 <xTaskIncrementTick+0x160>)
 800622a:	6013      	str	r3, [r2, #0]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006230:	4613      	mov	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4a1f      	ldr	r2, [pc, #124]	; (80062b8 <xTaskIncrementTick+0x164>)
 800623a:	441a      	add	r2, r3
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	3304      	adds	r3, #4
 8006240:	4619      	mov	r1, r3
 8006242:	4610      	mov	r0, r2
 8006244:	f7fe fefb 	bl	800503e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800624c:	4b1b      	ldr	r3, [pc, #108]	; (80062bc <xTaskIncrementTick+0x168>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006252:	429a      	cmp	r2, r3
 8006254:	d3b8      	bcc.n	80061c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006256:	2301      	movs	r3, #1
 8006258:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800625a:	e7b5      	b.n	80061c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800625c:	4b17      	ldr	r3, [pc, #92]	; (80062bc <xTaskIncrementTick+0x168>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006262:	4915      	ldr	r1, [pc, #84]	; (80062b8 <xTaskIncrementTick+0x164>)
 8006264:	4613      	mov	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	440b      	add	r3, r1
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d901      	bls.n	8006278 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006274:	2301      	movs	r3, #1
 8006276:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006278:	4b11      	ldr	r3, [pc, #68]	; (80062c0 <xTaskIncrementTick+0x16c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d007      	beq.n	8006290 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006280:	2301      	movs	r3, #1
 8006282:	617b      	str	r3, [r7, #20]
 8006284:	e004      	b.n	8006290 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006286:	4b0f      	ldr	r3, [pc, #60]	; (80062c4 <xTaskIncrementTick+0x170>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3301      	adds	r3, #1
 800628c:	4a0d      	ldr	r2, [pc, #52]	; (80062c4 <xTaskIncrementTick+0x170>)
 800628e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006290:	697b      	ldr	r3, [r7, #20]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3718      	adds	r7, #24
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	20000f24 	.word	0x20000f24
 80062a0:	20000f00 	.word	0x20000f00
 80062a4:	20000eb4 	.word	0x20000eb4
 80062a8:	20000eb8 	.word	0x20000eb8
 80062ac:	20000f14 	.word	0x20000f14
 80062b0:	20000f1c 	.word	0x20000f1c
 80062b4:	20000f04 	.word	0x20000f04
 80062b8:	20000a2c 	.word	0x20000a2c
 80062bc:	20000a28 	.word	0x20000a28
 80062c0:	20000f10 	.word	0x20000f10
 80062c4:	20000f0c 	.word	0x20000f0c

080062c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062ce:	4b2a      	ldr	r3, [pc, #168]	; (8006378 <vTaskSwitchContext+0xb0>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80062d6:	4b29      	ldr	r3, [pc, #164]	; (800637c <vTaskSwitchContext+0xb4>)
 80062d8:	2201      	movs	r2, #1
 80062da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80062dc:	e046      	b.n	800636c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80062de:	4b27      	ldr	r3, [pc, #156]	; (800637c <vTaskSwitchContext+0xb4>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062e4:	4b26      	ldr	r3, [pc, #152]	; (8006380 <vTaskSwitchContext+0xb8>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	e010      	b.n	800630e <vTaskSwitchContext+0x46>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10a      	bne.n	8006308 <vTaskSwitchContext+0x40>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	607b      	str	r3, [r7, #4]
}
 8006304:	bf00      	nop
 8006306:	e7fe      	b.n	8006306 <vTaskSwitchContext+0x3e>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	3b01      	subs	r3, #1
 800630c:	60fb      	str	r3, [r7, #12]
 800630e:	491d      	ldr	r1, [pc, #116]	; (8006384 <vTaskSwitchContext+0xbc>)
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	4613      	mov	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	440b      	add	r3, r1
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0e4      	beq.n	80062ec <vTaskSwitchContext+0x24>
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	4613      	mov	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4a15      	ldr	r2, [pc, #84]	; (8006384 <vTaskSwitchContext+0xbc>)
 800632e:	4413      	add	r3, r2
 8006330:	60bb      	str	r3, [r7, #8]
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	605a      	str	r2, [r3, #4]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	3308      	adds	r3, #8
 8006344:	429a      	cmp	r2, r3
 8006346:	d104      	bne.n	8006352 <vTaskSwitchContext+0x8a>
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	605a      	str	r2, [r3, #4]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	4a0b      	ldr	r2, [pc, #44]	; (8006388 <vTaskSwitchContext+0xc0>)
 800635a:	6013      	str	r3, [r2, #0]
 800635c:	4a08      	ldr	r2, [pc, #32]	; (8006380 <vTaskSwitchContext+0xb8>)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006362:	4b09      	ldr	r3, [pc, #36]	; (8006388 <vTaskSwitchContext+0xc0>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3354      	adds	r3, #84	; 0x54
 8006368:	4a08      	ldr	r2, [pc, #32]	; (800638c <vTaskSwitchContext+0xc4>)
 800636a:	6013      	str	r3, [r2, #0]
}
 800636c:	bf00      	nop
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	20000f24 	.word	0x20000f24
 800637c:	20000f10 	.word	0x20000f10
 8006380:	20000f04 	.word	0x20000f04
 8006384:	20000a2c 	.word	0x20000a2c
 8006388:	20000a28 	.word	0x20000a28
 800638c:	20000010 	.word	0x20000010

08006390 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10a      	bne.n	80063b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	60fb      	str	r3, [r7, #12]
}
 80063b2:	bf00      	nop
 80063b4:	e7fe      	b.n	80063b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063b6:	4b07      	ldr	r3, [pc, #28]	; (80063d4 <vTaskPlaceOnEventList+0x44>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3318      	adds	r3, #24
 80063bc:	4619      	mov	r1, r3
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7fe fe61 	bl	8005086 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80063c4:	2101      	movs	r1, #1
 80063c6:	6838      	ldr	r0, [r7, #0]
 80063c8:	f000 fa80 	bl	80068cc <prvAddCurrentTaskToDelayedList>
}
 80063cc:	bf00      	nop
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	20000a28 	.word	0x20000a28

080063d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10a      	bne.n	8006400 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80063ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	617b      	str	r3, [r7, #20]
}
 80063fc:	bf00      	nop
 80063fe:	e7fe      	b.n	80063fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006400:	4b0a      	ldr	r3, [pc, #40]	; (800642c <vTaskPlaceOnEventListRestricted+0x54>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3318      	adds	r3, #24
 8006406:	4619      	mov	r1, r3
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f7fe fe18 	bl	800503e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006414:	f04f 33ff 	mov.w	r3, #4294967295
 8006418:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800641a:	6879      	ldr	r1, [r7, #4]
 800641c:	68b8      	ldr	r0, [r7, #8]
 800641e:	f000 fa55 	bl	80068cc <prvAddCurrentTaskToDelayedList>
	}
 8006422:	bf00      	nop
 8006424:	3718      	adds	r7, #24
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	20000a28 	.word	0x20000a28

08006430 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10a      	bne.n	800645c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644a:	f383 8811 	msr	BASEPRI, r3
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	60fb      	str	r3, [r7, #12]
}
 8006458:	bf00      	nop
 800645a:	e7fe      	b.n	800645a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	3318      	adds	r3, #24
 8006460:	4618      	mov	r0, r3
 8006462:	f7fe fe49 	bl	80050f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006466:	4b1e      	ldr	r3, [pc, #120]	; (80064e0 <xTaskRemoveFromEventList+0xb0>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d11d      	bne.n	80064aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	3304      	adds	r3, #4
 8006472:	4618      	mov	r0, r3
 8006474:	f7fe fe40 	bl	80050f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647c:	4b19      	ldr	r3, [pc, #100]	; (80064e4 <xTaskRemoveFromEventList+0xb4>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	d903      	bls.n	800648c <xTaskRemoveFromEventList+0x5c>
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	4a16      	ldr	r2, [pc, #88]	; (80064e4 <xTaskRemoveFromEventList+0xb4>)
 800648a:	6013      	str	r3, [r2, #0]
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4a13      	ldr	r2, [pc, #76]	; (80064e8 <xTaskRemoveFromEventList+0xb8>)
 800649a:	441a      	add	r2, r3
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	3304      	adds	r3, #4
 80064a0:	4619      	mov	r1, r3
 80064a2:	4610      	mov	r0, r2
 80064a4:	f7fe fdcb 	bl	800503e <vListInsertEnd>
 80064a8:	e005      	b.n	80064b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	3318      	adds	r3, #24
 80064ae:	4619      	mov	r1, r3
 80064b0:	480e      	ldr	r0, [pc, #56]	; (80064ec <xTaskRemoveFromEventList+0xbc>)
 80064b2:	f7fe fdc4 	bl	800503e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ba:	4b0d      	ldr	r3, [pc, #52]	; (80064f0 <xTaskRemoveFromEventList+0xc0>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d905      	bls.n	80064d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80064c4:	2301      	movs	r3, #1
 80064c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80064c8:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <xTaskRemoveFromEventList+0xc4>)
 80064ca:	2201      	movs	r2, #1
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	e001      	b.n	80064d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80064d0:	2300      	movs	r3, #0
 80064d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80064d4:	697b      	ldr	r3, [r7, #20]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	20000f24 	.word	0x20000f24
 80064e4:	20000f04 	.word	0x20000f04
 80064e8:	20000a2c 	.word	0x20000a2c
 80064ec:	20000ebc 	.word	0x20000ebc
 80064f0:	20000a28 	.word	0x20000a28
 80064f4:	20000f10 	.word	0x20000f10

080064f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006500:	4b06      	ldr	r3, [pc, #24]	; (800651c <vTaskInternalSetTimeOutState+0x24>)
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006508:	4b05      	ldr	r3, [pc, #20]	; (8006520 <vTaskInternalSetTimeOutState+0x28>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	605a      	str	r2, [r3, #4]
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	20000f14 	.word	0x20000f14
 8006520:	20000f00 	.word	0x20000f00

08006524 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b088      	sub	sp, #32
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10a      	bne.n	800654a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	613b      	str	r3, [r7, #16]
}
 8006546:	bf00      	nop
 8006548:	e7fe      	b.n	8006548 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10a      	bne.n	8006566 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	60fb      	str	r3, [r7, #12]
}
 8006562:	bf00      	nop
 8006564:	e7fe      	b.n	8006564 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006566:	f000 fe7d 	bl	8007264 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800656a:	4b1d      	ldr	r3, [pc, #116]	; (80065e0 <xTaskCheckForTimeOut+0xbc>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006582:	d102      	bne.n	800658a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006584:	2300      	movs	r3, #0
 8006586:	61fb      	str	r3, [r7, #28]
 8006588:	e023      	b.n	80065d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	4b15      	ldr	r3, [pc, #84]	; (80065e4 <xTaskCheckForTimeOut+0xc0>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	429a      	cmp	r2, r3
 8006594:	d007      	beq.n	80065a6 <xTaskCheckForTimeOut+0x82>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	429a      	cmp	r2, r3
 800659e:	d302      	bcc.n	80065a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80065a0:	2301      	movs	r3, #1
 80065a2:	61fb      	str	r3, [r7, #28]
 80065a4:	e015      	b.n	80065d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d20b      	bcs.n	80065c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	1ad2      	subs	r2, r2, r3
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7ff ff9b 	bl	80064f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80065c2:	2300      	movs	r3, #0
 80065c4:	61fb      	str	r3, [r7, #28]
 80065c6:	e004      	b.n	80065d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2200      	movs	r2, #0
 80065cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80065ce:	2301      	movs	r3, #1
 80065d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80065d2:	f000 fe77 	bl	80072c4 <vPortExitCritical>

	return xReturn;
 80065d6:	69fb      	ldr	r3, [r7, #28]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3720      	adds	r7, #32
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	20000f00 	.word	0x20000f00
 80065e4:	20000f14 	.word	0x20000f14

080065e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80065e8:	b480      	push	{r7}
 80065ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80065ec:	4b03      	ldr	r3, [pc, #12]	; (80065fc <vTaskMissedYield+0x14>)
 80065ee:	2201      	movs	r2, #1
 80065f0:	601a      	str	r2, [r3, #0]
}
 80065f2:	bf00      	nop
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	20000f10 	.word	0x20000f10

08006600 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006608:	f000 f852 	bl	80066b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800660c:	4b06      	ldr	r3, [pc, #24]	; (8006628 <prvIdleTask+0x28>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d9f9      	bls.n	8006608 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006614:	4b05      	ldr	r3, [pc, #20]	; (800662c <prvIdleTask+0x2c>)
 8006616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006624:	e7f0      	b.n	8006608 <prvIdleTask+0x8>
 8006626:	bf00      	nop
 8006628:	20000a2c 	.word	0x20000a2c
 800662c:	e000ed04 	.word	0xe000ed04

08006630 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006636:	2300      	movs	r3, #0
 8006638:	607b      	str	r3, [r7, #4]
 800663a:	e00c      	b.n	8006656 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	4613      	mov	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4a12      	ldr	r2, [pc, #72]	; (8006690 <prvInitialiseTaskLists+0x60>)
 8006648:	4413      	add	r3, r2
 800664a:	4618      	mov	r0, r3
 800664c:	f7fe fcca 	bl	8004fe4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3301      	adds	r3, #1
 8006654:	607b      	str	r3, [r7, #4]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b37      	cmp	r3, #55	; 0x37
 800665a:	d9ef      	bls.n	800663c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800665c:	480d      	ldr	r0, [pc, #52]	; (8006694 <prvInitialiseTaskLists+0x64>)
 800665e:	f7fe fcc1 	bl	8004fe4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006662:	480d      	ldr	r0, [pc, #52]	; (8006698 <prvInitialiseTaskLists+0x68>)
 8006664:	f7fe fcbe 	bl	8004fe4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006668:	480c      	ldr	r0, [pc, #48]	; (800669c <prvInitialiseTaskLists+0x6c>)
 800666a:	f7fe fcbb 	bl	8004fe4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800666e:	480c      	ldr	r0, [pc, #48]	; (80066a0 <prvInitialiseTaskLists+0x70>)
 8006670:	f7fe fcb8 	bl	8004fe4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006674:	480b      	ldr	r0, [pc, #44]	; (80066a4 <prvInitialiseTaskLists+0x74>)
 8006676:	f7fe fcb5 	bl	8004fe4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800667a:	4b0b      	ldr	r3, [pc, #44]	; (80066a8 <prvInitialiseTaskLists+0x78>)
 800667c:	4a05      	ldr	r2, [pc, #20]	; (8006694 <prvInitialiseTaskLists+0x64>)
 800667e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006680:	4b0a      	ldr	r3, [pc, #40]	; (80066ac <prvInitialiseTaskLists+0x7c>)
 8006682:	4a05      	ldr	r2, [pc, #20]	; (8006698 <prvInitialiseTaskLists+0x68>)
 8006684:	601a      	str	r2, [r3, #0]
}
 8006686:	bf00      	nop
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000a2c 	.word	0x20000a2c
 8006694:	20000e8c 	.word	0x20000e8c
 8006698:	20000ea0 	.word	0x20000ea0
 800669c:	20000ebc 	.word	0x20000ebc
 80066a0:	20000ed0 	.word	0x20000ed0
 80066a4:	20000ee8 	.word	0x20000ee8
 80066a8:	20000eb4 	.word	0x20000eb4
 80066ac:	20000eb8 	.word	0x20000eb8

080066b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066b6:	e019      	b.n	80066ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80066b8:	f000 fdd4 	bl	8007264 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066bc:	4b10      	ldr	r3, [pc, #64]	; (8006700 <prvCheckTasksWaitingTermination+0x50>)
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	3304      	adds	r3, #4
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7fe fd15 	bl	80050f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80066ce:	4b0d      	ldr	r3, [pc, #52]	; (8006704 <prvCheckTasksWaitingTermination+0x54>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3b01      	subs	r3, #1
 80066d4:	4a0b      	ldr	r2, [pc, #44]	; (8006704 <prvCheckTasksWaitingTermination+0x54>)
 80066d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80066d8:	4b0b      	ldr	r3, [pc, #44]	; (8006708 <prvCheckTasksWaitingTermination+0x58>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3b01      	subs	r3, #1
 80066de:	4a0a      	ldr	r2, [pc, #40]	; (8006708 <prvCheckTasksWaitingTermination+0x58>)
 80066e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80066e2:	f000 fdef 	bl	80072c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f810 	bl	800670c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066ec:	4b06      	ldr	r3, [pc, #24]	; (8006708 <prvCheckTasksWaitingTermination+0x58>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1e1      	bne.n	80066b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	20000ed0 	.word	0x20000ed0
 8006704:	20000efc 	.word	0x20000efc
 8006708:	20000ee4 	.word	0x20000ee4

0800670c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3354      	adds	r3, #84	; 0x54
 8006718:	4618      	mov	r0, r3
 800671a:	f001 f8f9 	bl	8007910 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006724:	2b00      	cmp	r3, #0
 8006726:	d108      	bne.n	800673a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672c:	4618      	mov	r0, r3
 800672e:	f000 ff87 	bl	8007640 <vPortFree>
				vPortFree( pxTCB );
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 ff84 	bl	8007640 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006738:	e018      	b.n	800676c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006740:	2b01      	cmp	r3, #1
 8006742:	d103      	bne.n	800674c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 ff7b 	bl	8007640 <vPortFree>
	}
 800674a:	e00f      	b.n	800676c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006752:	2b02      	cmp	r3, #2
 8006754:	d00a      	beq.n	800676c <prvDeleteTCB+0x60>
	__asm volatile
 8006756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	60fb      	str	r3, [r7, #12]
}
 8006768:	bf00      	nop
 800676a:	e7fe      	b.n	800676a <prvDeleteTCB+0x5e>
	}
 800676c:	bf00      	nop
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800677a:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <prvResetNextTaskUnblockTime+0x38>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d104      	bne.n	800678e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006784:	4b0a      	ldr	r3, [pc, #40]	; (80067b0 <prvResetNextTaskUnblockTime+0x3c>)
 8006786:	f04f 32ff 	mov.w	r2, #4294967295
 800678a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800678c:	e008      	b.n	80067a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800678e:	4b07      	ldr	r3, [pc, #28]	; (80067ac <prvResetNextTaskUnblockTime+0x38>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	4a04      	ldr	r2, [pc, #16]	; (80067b0 <prvResetNextTaskUnblockTime+0x3c>)
 800679e:	6013      	str	r3, [r2, #0]
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	20000eb4 	.word	0x20000eb4
 80067b0:	20000f1c 	.word	0x20000f1c

080067b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80067ba:	4b0b      	ldr	r3, [pc, #44]	; (80067e8 <xTaskGetSchedulerState+0x34>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d102      	bne.n	80067c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80067c2:	2301      	movs	r3, #1
 80067c4:	607b      	str	r3, [r7, #4]
 80067c6:	e008      	b.n	80067da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067c8:	4b08      	ldr	r3, [pc, #32]	; (80067ec <xTaskGetSchedulerState+0x38>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d102      	bne.n	80067d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80067d0:	2302      	movs	r3, #2
 80067d2:	607b      	str	r3, [r7, #4]
 80067d4:	e001      	b.n	80067da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80067d6:	2300      	movs	r3, #0
 80067d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80067da:	687b      	ldr	r3, [r7, #4]
	}
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	20000f08 	.word	0x20000f08
 80067ec:	20000f24 	.word	0x20000f24

080067f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80067fc:	2300      	movs	r3, #0
 80067fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d056      	beq.n	80068b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006806:	4b2e      	ldr	r3, [pc, #184]	; (80068c0 <xTaskPriorityDisinherit+0xd0>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	429a      	cmp	r2, r3
 800680e:	d00a      	beq.n	8006826 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	60fb      	str	r3, [r7, #12]
}
 8006822:	bf00      	nop
 8006824:	e7fe      	b.n	8006824 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10a      	bne.n	8006844 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	60bb      	str	r3, [r7, #8]
}
 8006840:	bf00      	nop
 8006842:	e7fe      	b.n	8006842 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006848:	1e5a      	subs	r2, r3, #1
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006856:	429a      	cmp	r2, r3
 8006858:	d02c      	beq.n	80068b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800685e:	2b00      	cmp	r3, #0
 8006860:	d128      	bne.n	80068b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	3304      	adds	r3, #4
 8006866:	4618      	mov	r0, r3
 8006868:	f7fe fc46 	bl	80050f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006878:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006884:	4b0f      	ldr	r3, [pc, #60]	; (80068c4 <xTaskPriorityDisinherit+0xd4>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	429a      	cmp	r2, r3
 800688a:	d903      	bls.n	8006894 <xTaskPriorityDisinherit+0xa4>
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006890:	4a0c      	ldr	r2, [pc, #48]	; (80068c4 <xTaskPriorityDisinherit+0xd4>)
 8006892:	6013      	str	r3, [r2, #0]
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4a09      	ldr	r2, [pc, #36]	; (80068c8 <xTaskPriorityDisinherit+0xd8>)
 80068a2:	441a      	add	r2, r3
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	3304      	adds	r3, #4
 80068a8:	4619      	mov	r1, r3
 80068aa:	4610      	mov	r0, r2
 80068ac:	f7fe fbc7 	bl	800503e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80068b0:	2301      	movs	r3, #1
 80068b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80068b4:	697b      	ldr	r3, [r7, #20]
	}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3718      	adds	r7, #24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	20000a28 	.word	0x20000a28
 80068c4:	20000f04 	.word	0x20000f04
 80068c8:	20000a2c 	.word	0x20000a2c

080068cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80068d6:	4b21      	ldr	r3, [pc, #132]	; (800695c <prvAddCurrentTaskToDelayedList+0x90>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068dc:	4b20      	ldr	r3, [pc, #128]	; (8006960 <prvAddCurrentTaskToDelayedList+0x94>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3304      	adds	r3, #4
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fe fc08 	bl	80050f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ee:	d10a      	bne.n	8006906 <prvAddCurrentTaskToDelayedList+0x3a>
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d007      	beq.n	8006906 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068f6:	4b1a      	ldr	r3, [pc, #104]	; (8006960 <prvAddCurrentTaskToDelayedList+0x94>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3304      	adds	r3, #4
 80068fc:	4619      	mov	r1, r3
 80068fe:	4819      	ldr	r0, [pc, #100]	; (8006964 <prvAddCurrentTaskToDelayedList+0x98>)
 8006900:	f7fe fb9d 	bl	800503e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006904:	e026      	b.n	8006954 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4413      	add	r3, r2
 800690c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800690e:	4b14      	ldr	r3, [pc, #80]	; (8006960 <prvAddCurrentTaskToDelayedList+0x94>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	429a      	cmp	r2, r3
 800691c:	d209      	bcs.n	8006932 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800691e:	4b12      	ldr	r3, [pc, #72]	; (8006968 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	4b0f      	ldr	r3, [pc, #60]	; (8006960 <prvAddCurrentTaskToDelayedList+0x94>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3304      	adds	r3, #4
 8006928:	4619      	mov	r1, r3
 800692a:	4610      	mov	r0, r2
 800692c:	f7fe fbab 	bl	8005086 <vListInsert>
}
 8006930:	e010      	b.n	8006954 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006932:	4b0e      	ldr	r3, [pc, #56]	; (800696c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	4b0a      	ldr	r3, [pc, #40]	; (8006960 <prvAddCurrentTaskToDelayedList+0x94>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3304      	adds	r3, #4
 800693c:	4619      	mov	r1, r3
 800693e:	4610      	mov	r0, r2
 8006940:	f7fe fba1 	bl	8005086 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006944:	4b0a      	ldr	r3, [pc, #40]	; (8006970 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	429a      	cmp	r2, r3
 800694c:	d202      	bcs.n	8006954 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800694e:	4a08      	ldr	r2, [pc, #32]	; (8006970 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	6013      	str	r3, [r2, #0]
}
 8006954:	bf00      	nop
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	20000f00 	.word	0x20000f00
 8006960:	20000a28 	.word	0x20000a28
 8006964:	20000ee8 	.word	0x20000ee8
 8006968:	20000eb8 	.word	0x20000eb8
 800696c:	20000eb4 	.word	0x20000eb4
 8006970:	20000f1c 	.word	0x20000f1c

08006974 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08a      	sub	sp, #40	; 0x28
 8006978:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800697a:	2300      	movs	r3, #0
 800697c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800697e:	f000 fb07 	bl	8006f90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006982:	4b1c      	ldr	r3, [pc, #112]	; (80069f4 <xTimerCreateTimerTask+0x80>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d021      	beq.n	80069ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800698a:	2300      	movs	r3, #0
 800698c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800698e:	2300      	movs	r3, #0
 8006990:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006992:	1d3a      	adds	r2, r7, #4
 8006994:	f107 0108 	add.w	r1, r7, #8
 8006998:	f107 030c 	add.w	r3, r7, #12
 800699c:	4618      	mov	r0, r3
 800699e:	f7fe fb07 	bl	8004fb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80069a2:	6879      	ldr	r1, [r7, #4]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	9202      	str	r2, [sp, #8]
 80069aa:	9301      	str	r3, [sp, #4]
 80069ac:	2302      	movs	r3, #2
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	2300      	movs	r3, #0
 80069b2:	460a      	mov	r2, r1
 80069b4:	4910      	ldr	r1, [pc, #64]	; (80069f8 <xTimerCreateTimerTask+0x84>)
 80069b6:	4811      	ldr	r0, [pc, #68]	; (80069fc <xTimerCreateTimerTask+0x88>)
 80069b8:	f7ff f8b4 	bl	8005b24 <xTaskCreateStatic>
 80069bc:	4603      	mov	r3, r0
 80069be:	4a10      	ldr	r2, [pc, #64]	; (8006a00 <xTimerCreateTimerTask+0x8c>)
 80069c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80069c2:	4b0f      	ldr	r3, [pc, #60]	; (8006a00 <xTimerCreateTimerTask+0x8c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80069ca:	2301      	movs	r3, #1
 80069cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10a      	bne.n	80069ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	613b      	str	r3, [r7, #16]
}
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80069ea:	697b      	ldr	r3, [r7, #20]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3718      	adds	r7, #24
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	20000f58 	.word	0x20000f58
 80069f8:	08007b3c 	.word	0x08007b3c
 80069fc:	08006b39 	.word	0x08006b39
 8006a00:	20000f5c 	.word	0x20000f5c

08006a04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b08a      	sub	sp, #40	; 0x28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006a12:	2300      	movs	r3, #0
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10a      	bne.n	8006a32 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	623b      	str	r3, [r7, #32]
}
 8006a2e:	bf00      	nop
 8006a30:	e7fe      	b.n	8006a30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006a32:	4b1a      	ldr	r3, [pc, #104]	; (8006a9c <xTimerGenericCommand+0x98>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d02a      	beq.n	8006a90 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2b05      	cmp	r3, #5
 8006a4a:	dc18      	bgt.n	8006a7e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a4c:	f7ff feb2 	bl	80067b4 <xTaskGetSchedulerState>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d109      	bne.n	8006a6a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a56:	4b11      	ldr	r3, [pc, #68]	; (8006a9c <xTimerGenericCommand+0x98>)
 8006a58:	6818      	ldr	r0, [r3, #0]
 8006a5a:	f107 0110 	add.w	r1, r7, #16
 8006a5e:	2300      	movs	r3, #0
 8006a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a62:	f7fe fc77 	bl	8005354 <xQueueGenericSend>
 8006a66:	6278      	str	r0, [r7, #36]	; 0x24
 8006a68:	e012      	b.n	8006a90 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006a6a:	4b0c      	ldr	r3, [pc, #48]	; (8006a9c <xTimerGenericCommand+0x98>)
 8006a6c:	6818      	ldr	r0, [r3, #0]
 8006a6e:	f107 0110 	add.w	r1, r7, #16
 8006a72:	2300      	movs	r3, #0
 8006a74:	2200      	movs	r2, #0
 8006a76:	f7fe fc6d 	bl	8005354 <xQueueGenericSend>
 8006a7a:	6278      	str	r0, [r7, #36]	; 0x24
 8006a7c:	e008      	b.n	8006a90 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a7e:	4b07      	ldr	r3, [pc, #28]	; (8006a9c <xTimerGenericCommand+0x98>)
 8006a80:	6818      	ldr	r0, [r3, #0]
 8006a82:	f107 0110 	add.w	r1, r7, #16
 8006a86:	2300      	movs	r3, #0
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	f7fe fd61 	bl	8005550 <xQueueGenericSendFromISR>
 8006a8e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3728      	adds	r7, #40	; 0x28
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	20000f58 	.word	0x20000f58

08006aa0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b088      	sub	sp, #32
 8006aa4:	af02      	add	r7, sp, #8
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aaa:	4b22      	ldr	r3, [pc, #136]	; (8006b34 <prvProcessExpiredTimer+0x94>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	3304      	adds	r3, #4
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7fe fb1d 	bl	80050f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ac4:	f003 0304 	and.w	r3, r3, #4
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d022      	beq.n	8006b12 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	699a      	ldr	r2, [r3, #24]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	18d1      	adds	r1, r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	6978      	ldr	r0, [r7, #20]
 8006ada:	f000 f8d1 	bl	8006c80 <prvInsertTimerInActiveList>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d01f      	beq.n	8006b24 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	2300      	movs	r3, #0
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	2100      	movs	r1, #0
 8006aee:	6978      	ldr	r0, [r7, #20]
 8006af0:	f7ff ff88 	bl	8006a04 <xTimerGenericCommand>
 8006af4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d113      	bne.n	8006b24 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	60fb      	str	r3, [r7, #12]
}
 8006b0e:	bf00      	nop
 8006b10:	e7fe      	b.n	8006b10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b18:	f023 0301 	bic.w	r3, r3, #1
 8006b1c:	b2da      	uxtb	r2, r3
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	6978      	ldr	r0, [r7, #20]
 8006b2a:	4798      	blx	r3
}
 8006b2c:	bf00      	nop
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	20000f50 	.word	0x20000f50

08006b38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b40:	f107 0308 	add.w	r3, r7, #8
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 f857 	bl	8006bf8 <prvGetNextExpireTime>
 8006b4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f000 f803 	bl	8006b5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006b56:	f000 f8d5 	bl	8006d04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b5a:	e7f1      	b.n	8006b40 <prvTimerTask+0x8>

08006b5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006b66:	f7ff fa39 	bl	8005fdc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b6a:	f107 0308 	add.w	r3, r7, #8
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 f866 	bl	8006c40 <prvSampleTimeNow>
 8006b74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d130      	bne.n	8006bde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10a      	bne.n	8006b98 <prvProcessTimerOrBlockTask+0x3c>
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d806      	bhi.n	8006b98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006b8a:	f7ff fa35 	bl	8005ff8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b8e:	68f9      	ldr	r1, [r7, #12]
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7ff ff85 	bl	8006aa0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006b96:	e024      	b.n	8006be2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d008      	beq.n	8006bb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b9e:	4b13      	ldr	r3, [pc, #76]	; (8006bec <prvProcessTimerOrBlockTask+0x90>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <prvProcessTimerOrBlockTask+0x50>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e000      	b.n	8006bae <prvProcessTimerOrBlockTask+0x52>
 8006bac:	2300      	movs	r3, #0
 8006bae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006bb0:	4b0f      	ldr	r3, [pc, #60]	; (8006bf0 <prvProcessTimerOrBlockTask+0x94>)
 8006bb2:	6818      	ldr	r0, [r3, #0]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	f7fe ff7d 	bl	8005abc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006bc2:	f7ff fa19 	bl	8005ff8 <xTaskResumeAll>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10a      	bne.n	8006be2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006bcc:	4b09      	ldr	r3, [pc, #36]	; (8006bf4 <prvProcessTimerOrBlockTask+0x98>)
 8006bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	f3bf 8f6f 	isb	sy
}
 8006bdc:	e001      	b.n	8006be2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006bde:	f7ff fa0b 	bl	8005ff8 <xTaskResumeAll>
}
 8006be2:	bf00      	nop
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	20000f54 	.word	0x20000f54
 8006bf0:	20000f58 	.word	0x20000f58
 8006bf4:	e000ed04 	.word	0xe000ed04

08006bf8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c00:	4b0e      	ldr	r3, [pc, #56]	; (8006c3c <prvGetNextExpireTime+0x44>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <prvGetNextExpireTime+0x16>
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	e000      	b.n	8006c10 <prvGetNextExpireTime+0x18>
 8006c0e:	2200      	movs	r2, #0
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d105      	bne.n	8006c28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c1c:	4b07      	ldr	r3, [pc, #28]	; (8006c3c <prvGetNextExpireTime+0x44>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	e001      	b.n	8006c2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	20000f50 	.word	0x20000f50

08006c40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006c48:	f7ff fa74 	bl	8006134 <xTaskGetTickCount>
 8006c4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006c4e:	4b0b      	ldr	r3, [pc, #44]	; (8006c7c <prvSampleTimeNow+0x3c>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d205      	bcs.n	8006c64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006c58:	f000 f936 	bl	8006ec8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	601a      	str	r2, [r3, #0]
 8006c62:	e002      	b.n	8006c6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006c6a:	4a04      	ldr	r2, [pc, #16]	; (8006c7c <prvSampleTimeNow+0x3c>)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006c70:	68fb      	ldr	r3, [r7, #12]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000f60 	.word	0x20000f60

08006c80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
 8006c8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d812      	bhi.n	8006ccc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	1ad2      	subs	r2, r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d302      	bcc.n	8006cba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	e01b      	b.n	8006cf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006cba:	4b10      	ldr	r3, [pc, #64]	; (8006cfc <prvInsertTimerInActiveList+0x7c>)
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	f7fe f9de 	bl	8005086 <vListInsert>
 8006cca:	e012      	b.n	8006cf2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d206      	bcs.n	8006ce2 <prvInsertTimerInActiveList+0x62>
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d302      	bcc.n	8006ce2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	617b      	str	r3, [r7, #20]
 8006ce0:	e007      	b.n	8006cf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ce2:	4b07      	ldr	r3, [pc, #28]	; (8006d00 <prvInsertTimerInActiveList+0x80>)
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3304      	adds	r3, #4
 8006cea:	4619      	mov	r1, r3
 8006cec:	4610      	mov	r0, r2
 8006cee:	f7fe f9ca 	bl	8005086 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006cf2:	697b      	ldr	r3, [r7, #20]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3718      	adds	r7, #24
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	20000f54 	.word	0x20000f54
 8006d00:	20000f50 	.word	0x20000f50

08006d04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08e      	sub	sp, #56	; 0x38
 8006d08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d0a:	e0ca      	b.n	8006ea2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	da18      	bge.n	8006d44 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006d12:	1d3b      	adds	r3, r7, #4
 8006d14:	3304      	adds	r3, #4
 8006d16:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10a      	bne.n	8006d34 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	61fb      	str	r3, [r7, #28]
}
 8006d30:	bf00      	nop
 8006d32:	e7fe      	b.n	8006d32 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d3a:	6850      	ldr	r0, [r2, #4]
 8006d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d3e:	6892      	ldr	r2, [r2, #8]
 8006d40:	4611      	mov	r1, r2
 8006d42:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f2c0 80aa 	blt.w	8006ea0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d004      	beq.n	8006d62 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fe f9cb 	bl	80050f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d62:	463b      	mov	r3, r7
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7ff ff6b 	bl	8006c40 <prvSampleTimeNow>
 8006d6a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b09      	cmp	r3, #9
 8006d70:	f200 8097 	bhi.w	8006ea2 <prvProcessReceivedCommands+0x19e>
 8006d74:	a201      	add	r2, pc, #4	; (adr r2, 8006d7c <prvProcessReceivedCommands+0x78>)
 8006d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7a:	bf00      	nop
 8006d7c:	08006da5 	.word	0x08006da5
 8006d80:	08006da5 	.word	0x08006da5
 8006d84:	08006da5 	.word	0x08006da5
 8006d88:	08006e19 	.word	0x08006e19
 8006d8c:	08006e2d 	.word	0x08006e2d
 8006d90:	08006e77 	.word	0x08006e77
 8006d94:	08006da5 	.word	0x08006da5
 8006d98:	08006da5 	.word	0x08006da5
 8006d9c:	08006e19 	.word	0x08006e19
 8006da0:	08006e2d 	.word	0x08006e2d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006daa:	f043 0301 	orr.w	r3, r3, #1
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	18d1      	adds	r1, r2, r3
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dc4:	f7ff ff5c 	bl	8006c80 <prvInsertTimerInActiveList>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d069      	beq.n	8006ea2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dd4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d05e      	beq.n	8006ea2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	441a      	add	r2, r3
 8006dec:	2300      	movs	r3, #0
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	2300      	movs	r3, #0
 8006df2:	2100      	movs	r1, #0
 8006df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006df6:	f7ff fe05 	bl	8006a04 <xTimerGenericCommand>
 8006dfa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d14f      	bne.n	8006ea2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	61bb      	str	r3, [r7, #24]
}
 8006e14:	bf00      	nop
 8006e16:	e7fe      	b.n	8006e16 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e1e:	f023 0301 	bic.w	r3, r3, #1
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006e2a:	e03a      	b.n	8006ea2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e32:	f043 0301 	orr.w	r3, r3, #1
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e42:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10a      	bne.n	8006e62 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	617b      	str	r3, [r7, #20]
}
 8006e5e:	bf00      	nop
 8006e60:	e7fe      	b.n	8006e60 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e64:	699a      	ldr	r2, [r3, #24]
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	18d1      	adds	r1, r2, r3
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e70:	f7ff ff06 	bl	8006c80 <prvInsertTimerInActiveList>
					break;
 8006e74:	e015      	b.n	8006ea2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d103      	bne.n	8006e8c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e86:	f000 fbdb 	bl	8007640 <vPortFree>
 8006e8a:	e00a      	b.n	8006ea2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e92:	f023 0301 	bic.w	r3, r3, #1
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006e9e:	e000      	b.n	8006ea2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006ea0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ea2:	4b08      	ldr	r3, [pc, #32]	; (8006ec4 <prvProcessReceivedCommands+0x1c0>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	1d39      	adds	r1, r7, #4
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fe fbec 	bl	8005688 <xQueueReceive>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f47f af2a 	bne.w	8006d0c <prvProcessReceivedCommands+0x8>
	}
}
 8006eb8:	bf00      	nop
 8006eba:	bf00      	nop
 8006ebc:	3730      	adds	r7, #48	; 0x30
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	20000f58 	.word	0x20000f58

08006ec8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ece:	e048      	b.n	8006f62 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ed0:	4b2d      	ldr	r3, [pc, #180]	; (8006f88 <prvSwitchTimerLists+0xc0>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eda:	4b2b      	ldr	r3, [pc, #172]	; (8006f88 <prvSwitchTimerLists+0xc0>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7fe f905 	bl	80050f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d02e      	beq.n	8006f62 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d90e      	bls.n	8006f34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f22:	4b19      	ldr	r3, [pc, #100]	; (8006f88 <prvSwitchTimerLists+0xc0>)
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	3304      	adds	r3, #4
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	4610      	mov	r0, r2
 8006f2e:	f7fe f8aa 	bl	8005086 <vListInsert>
 8006f32:	e016      	b.n	8006f62 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f34:	2300      	movs	r3, #0
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	2300      	movs	r3, #0
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f7ff fd60 	bl	8006a04 <xTimerGenericCommand>
 8006f44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10a      	bne.n	8006f62 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f50:	f383 8811 	msr	BASEPRI, r3
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	603b      	str	r3, [r7, #0]
}
 8006f5e:	bf00      	nop
 8006f60:	e7fe      	b.n	8006f60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f62:	4b09      	ldr	r3, [pc, #36]	; (8006f88 <prvSwitchTimerLists+0xc0>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1b1      	bne.n	8006ed0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006f6c:	4b06      	ldr	r3, [pc, #24]	; (8006f88 <prvSwitchTimerLists+0xc0>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006f72:	4b06      	ldr	r3, [pc, #24]	; (8006f8c <prvSwitchTimerLists+0xc4>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a04      	ldr	r2, [pc, #16]	; (8006f88 <prvSwitchTimerLists+0xc0>)
 8006f78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006f7a:	4a04      	ldr	r2, [pc, #16]	; (8006f8c <prvSwitchTimerLists+0xc4>)
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	6013      	str	r3, [r2, #0]
}
 8006f80:	bf00      	nop
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	20000f50 	.word	0x20000f50
 8006f8c:	20000f54 	.word	0x20000f54

08006f90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f96:	f000 f965 	bl	8007264 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f9a:	4b15      	ldr	r3, [pc, #84]	; (8006ff0 <prvCheckForValidListAndQueue+0x60>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d120      	bne.n	8006fe4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006fa2:	4814      	ldr	r0, [pc, #80]	; (8006ff4 <prvCheckForValidListAndQueue+0x64>)
 8006fa4:	f7fe f81e 	bl	8004fe4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006fa8:	4813      	ldr	r0, [pc, #76]	; (8006ff8 <prvCheckForValidListAndQueue+0x68>)
 8006faa:	f7fe f81b 	bl	8004fe4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006fae:	4b13      	ldr	r3, [pc, #76]	; (8006ffc <prvCheckForValidListAndQueue+0x6c>)
 8006fb0:	4a10      	ldr	r2, [pc, #64]	; (8006ff4 <prvCheckForValidListAndQueue+0x64>)
 8006fb2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006fb4:	4b12      	ldr	r3, [pc, #72]	; (8007000 <prvCheckForValidListAndQueue+0x70>)
 8006fb6:	4a10      	ldr	r2, [pc, #64]	; (8006ff8 <prvCheckForValidListAndQueue+0x68>)
 8006fb8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006fba:	2300      	movs	r3, #0
 8006fbc:	9300      	str	r3, [sp, #0]
 8006fbe:	4b11      	ldr	r3, [pc, #68]	; (8007004 <prvCheckForValidListAndQueue+0x74>)
 8006fc0:	4a11      	ldr	r2, [pc, #68]	; (8007008 <prvCheckForValidListAndQueue+0x78>)
 8006fc2:	2110      	movs	r1, #16
 8006fc4:	200a      	movs	r0, #10
 8006fc6:	f7fe f929 	bl	800521c <xQueueGenericCreateStatic>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	4a08      	ldr	r2, [pc, #32]	; (8006ff0 <prvCheckForValidListAndQueue+0x60>)
 8006fce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006fd0:	4b07      	ldr	r3, [pc, #28]	; (8006ff0 <prvCheckForValidListAndQueue+0x60>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d005      	beq.n	8006fe4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006fd8:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <prvCheckForValidListAndQueue+0x60>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	490b      	ldr	r1, [pc, #44]	; (800700c <prvCheckForValidListAndQueue+0x7c>)
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fe fd42 	bl	8005a68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fe4:	f000 f96e 	bl	80072c4 <vPortExitCritical>
}
 8006fe8:	bf00      	nop
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	20000f58 	.word	0x20000f58
 8006ff4:	20000f28 	.word	0x20000f28
 8006ff8:	20000f3c 	.word	0x20000f3c
 8006ffc:	20000f50 	.word	0x20000f50
 8007000:	20000f54 	.word	0x20000f54
 8007004:	20001004 	.word	0x20001004
 8007008:	20000f64 	.word	0x20000f64
 800700c:	08007b44 	.word	0x08007b44

08007010 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	3b04      	subs	r3, #4
 8007020:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007028:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	3b04      	subs	r3, #4
 800702e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f023 0201 	bic.w	r2, r3, #1
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3b04      	subs	r3, #4
 800703e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007040:	4a0c      	ldr	r2, [pc, #48]	; (8007074 <pxPortInitialiseStack+0x64>)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	3b14      	subs	r3, #20
 800704a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3b04      	subs	r3, #4
 8007056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f06f 0202 	mvn.w	r2, #2
 800705e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3b20      	subs	r3, #32
 8007064:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007066:	68fb      	ldr	r3, [r7, #12]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	08007079 	.word	0x08007079

08007078 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800707e:	2300      	movs	r3, #0
 8007080:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007082:	4b12      	ldr	r3, [pc, #72]	; (80070cc <prvTaskExitError+0x54>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708a:	d00a      	beq.n	80070a2 <prvTaskExitError+0x2a>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	60fb      	str	r3, [r7, #12]
}
 800709e:	bf00      	nop
 80070a0:	e7fe      	b.n	80070a0 <prvTaskExitError+0x28>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	60bb      	str	r3, [r7, #8]
}
 80070b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80070b6:	bf00      	nop
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0fc      	beq.n	80070b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80070be:	bf00      	nop
 80070c0:	bf00      	nop
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	2000000c 	.word	0x2000000c

080070d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80070d0:	4b07      	ldr	r3, [pc, #28]	; (80070f0 <pxCurrentTCBConst2>)
 80070d2:	6819      	ldr	r1, [r3, #0]
 80070d4:	6808      	ldr	r0, [r1, #0]
 80070d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070da:	f380 8809 	msr	PSP, r0
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f04f 0000 	mov.w	r0, #0
 80070e6:	f380 8811 	msr	BASEPRI, r0
 80070ea:	4770      	bx	lr
 80070ec:	f3af 8000 	nop.w

080070f0 <pxCurrentTCBConst2>:
 80070f0:	20000a28 	.word	0x20000a28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80070f4:	bf00      	nop
 80070f6:	bf00      	nop

080070f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80070f8:	4808      	ldr	r0, [pc, #32]	; (800711c <prvPortStartFirstTask+0x24>)
 80070fa:	6800      	ldr	r0, [r0, #0]
 80070fc:	6800      	ldr	r0, [r0, #0]
 80070fe:	f380 8808 	msr	MSP, r0
 8007102:	f04f 0000 	mov.w	r0, #0
 8007106:	f380 8814 	msr	CONTROL, r0
 800710a:	b662      	cpsie	i
 800710c:	b661      	cpsie	f
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	df00      	svc	0
 8007118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800711a:	bf00      	nop
 800711c:	e000ed08 	.word	0xe000ed08

08007120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007126:	4b46      	ldr	r3, [pc, #280]	; (8007240 <xPortStartScheduler+0x120>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a46      	ldr	r2, [pc, #280]	; (8007244 <xPortStartScheduler+0x124>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d10a      	bne.n	8007146 <xPortStartScheduler+0x26>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	613b      	str	r3, [r7, #16]
}
 8007142:	bf00      	nop
 8007144:	e7fe      	b.n	8007144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007146:	4b3e      	ldr	r3, [pc, #248]	; (8007240 <xPortStartScheduler+0x120>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a3f      	ldr	r2, [pc, #252]	; (8007248 <xPortStartScheduler+0x128>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d10a      	bne.n	8007166 <xPortStartScheduler+0x46>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	60fb      	str	r3, [r7, #12]
}
 8007162:	bf00      	nop
 8007164:	e7fe      	b.n	8007164 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007166:	4b39      	ldr	r3, [pc, #228]	; (800724c <xPortStartScheduler+0x12c>)
 8007168:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	b2db      	uxtb	r3, r3
 8007170:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	22ff      	movs	r2, #255	; 0xff
 8007176:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	b2db      	uxtb	r3, r3
 800717e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007180:	78fb      	ldrb	r3, [r7, #3]
 8007182:	b2db      	uxtb	r3, r3
 8007184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007188:	b2da      	uxtb	r2, r3
 800718a:	4b31      	ldr	r3, [pc, #196]	; (8007250 <xPortStartScheduler+0x130>)
 800718c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800718e:	4b31      	ldr	r3, [pc, #196]	; (8007254 <xPortStartScheduler+0x134>)
 8007190:	2207      	movs	r2, #7
 8007192:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007194:	e009      	b.n	80071aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007196:	4b2f      	ldr	r3, [pc, #188]	; (8007254 <xPortStartScheduler+0x134>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3b01      	subs	r3, #1
 800719c:	4a2d      	ldr	r2, [pc, #180]	; (8007254 <xPortStartScheduler+0x134>)
 800719e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80071a0:	78fb      	ldrb	r3, [r7, #3]
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	005b      	lsls	r3, r3, #1
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071aa:	78fb      	ldrb	r3, [r7, #3]
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b2:	2b80      	cmp	r3, #128	; 0x80
 80071b4:	d0ef      	beq.n	8007196 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80071b6:	4b27      	ldr	r3, [pc, #156]	; (8007254 <xPortStartScheduler+0x134>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f1c3 0307 	rsb	r3, r3, #7
 80071be:	2b04      	cmp	r3, #4
 80071c0:	d00a      	beq.n	80071d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	60bb      	str	r3, [r7, #8]
}
 80071d4:	bf00      	nop
 80071d6:	e7fe      	b.n	80071d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071d8:	4b1e      	ldr	r3, [pc, #120]	; (8007254 <xPortStartScheduler+0x134>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	021b      	lsls	r3, r3, #8
 80071de:	4a1d      	ldr	r2, [pc, #116]	; (8007254 <xPortStartScheduler+0x134>)
 80071e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071e2:	4b1c      	ldr	r3, [pc, #112]	; (8007254 <xPortStartScheduler+0x134>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071ea:	4a1a      	ldr	r2, [pc, #104]	; (8007254 <xPortStartScheduler+0x134>)
 80071ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071f6:	4b18      	ldr	r3, [pc, #96]	; (8007258 <xPortStartScheduler+0x138>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a17      	ldr	r2, [pc, #92]	; (8007258 <xPortStartScheduler+0x138>)
 80071fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007200:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007202:	4b15      	ldr	r3, [pc, #84]	; (8007258 <xPortStartScheduler+0x138>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a14      	ldr	r2, [pc, #80]	; (8007258 <xPortStartScheduler+0x138>)
 8007208:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800720c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800720e:	f000 f8dd 	bl	80073cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007212:	4b12      	ldr	r3, [pc, #72]	; (800725c <xPortStartScheduler+0x13c>)
 8007214:	2200      	movs	r2, #0
 8007216:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007218:	f000 f8fc 	bl	8007414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800721c:	4b10      	ldr	r3, [pc, #64]	; (8007260 <xPortStartScheduler+0x140>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a0f      	ldr	r2, [pc, #60]	; (8007260 <xPortStartScheduler+0x140>)
 8007222:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007226:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007228:	f7ff ff66 	bl	80070f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800722c:	f7ff f84c 	bl	80062c8 <vTaskSwitchContext>
	prvTaskExitError();
 8007230:	f7ff ff22 	bl	8007078 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3718      	adds	r7, #24
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	e000ed00 	.word	0xe000ed00
 8007244:	410fc271 	.word	0x410fc271
 8007248:	410fc270 	.word	0x410fc270
 800724c:	e000e400 	.word	0xe000e400
 8007250:	20001054 	.word	0x20001054
 8007254:	20001058 	.word	0x20001058
 8007258:	e000ed20 	.word	0xe000ed20
 800725c:	2000000c 	.word	0x2000000c
 8007260:	e000ef34 	.word	0xe000ef34

08007264 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
	__asm volatile
 800726a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	607b      	str	r3, [r7, #4]
}
 800727c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800727e:	4b0f      	ldr	r3, [pc, #60]	; (80072bc <vPortEnterCritical+0x58>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	3301      	adds	r3, #1
 8007284:	4a0d      	ldr	r2, [pc, #52]	; (80072bc <vPortEnterCritical+0x58>)
 8007286:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007288:	4b0c      	ldr	r3, [pc, #48]	; (80072bc <vPortEnterCritical+0x58>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d10f      	bne.n	80072b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007290:	4b0b      	ldr	r3, [pc, #44]	; (80072c0 <vPortEnterCritical+0x5c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00a      	beq.n	80072b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800729a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729e:	f383 8811 	msr	BASEPRI, r3
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	603b      	str	r3, [r7, #0]
}
 80072ac:	bf00      	nop
 80072ae:	e7fe      	b.n	80072ae <vPortEnterCritical+0x4a>
	}
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	2000000c 	.word	0x2000000c
 80072c0:	e000ed04 	.word	0xe000ed04

080072c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80072ca:	4b12      	ldr	r3, [pc, #72]	; (8007314 <vPortExitCritical+0x50>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10a      	bne.n	80072e8 <vPortExitCritical+0x24>
	__asm volatile
 80072d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	607b      	str	r3, [r7, #4]
}
 80072e4:	bf00      	nop
 80072e6:	e7fe      	b.n	80072e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80072e8:	4b0a      	ldr	r3, [pc, #40]	; (8007314 <vPortExitCritical+0x50>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	3b01      	subs	r3, #1
 80072ee:	4a09      	ldr	r2, [pc, #36]	; (8007314 <vPortExitCritical+0x50>)
 80072f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80072f2:	4b08      	ldr	r3, [pc, #32]	; (8007314 <vPortExitCritical+0x50>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d105      	bne.n	8007306 <vPortExitCritical+0x42>
 80072fa:	2300      	movs	r3, #0
 80072fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	f383 8811 	msr	BASEPRI, r3
}
 8007304:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007306:	bf00      	nop
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	2000000c 	.word	0x2000000c
	...

08007320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007320:	f3ef 8009 	mrs	r0, PSP
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	4b15      	ldr	r3, [pc, #84]	; (8007380 <pxCurrentTCBConst>)
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	f01e 0f10 	tst.w	lr, #16
 8007330:	bf08      	it	eq
 8007332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800733a:	6010      	str	r0, [r2, #0]
 800733c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007340:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007344:	f380 8811 	msr	BASEPRI, r0
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f7fe ffba 	bl	80062c8 <vTaskSwitchContext>
 8007354:	f04f 0000 	mov.w	r0, #0
 8007358:	f380 8811 	msr	BASEPRI, r0
 800735c:	bc09      	pop	{r0, r3}
 800735e:	6819      	ldr	r1, [r3, #0]
 8007360:	6808      	ldr	r0, [r1, #0]
 8007362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007366:	f01e 0f10 	tst.w	lr, #16
 800736a:	bf08      	it	eq
 800736c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007370:	f380 8809 	msr	PSP, r0
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	f3af 8000 	nop.w

08007380 <pxCurrentTCBConst>:
 8007380:	20000a28 	.word	0x20000a28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007384:	bf00      	nop
 8007386:	bf00      	nop

08007388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	607b      	str	r3, [r7, #4]
}
 80073a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80073a2:	f7fe fed7 	bl	8006154 <xTaskIncrementTick>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d003      	beq.n	80073b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80073ac:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <xPortSysTickHandler+0x40>)
 80073ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	2300      	movs	r3, #0
 80073b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	f383 8811 	msr	BASEPRI, r3
}
 80073be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80073c0:	bf00      	nop
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	e000ed04 	.word	0xe000ed04

080073cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80073cc:	b480      	push	{r7}
 80073ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80073d0:	4b0b      	ldr	r3, [pc, #44]	; (8007400 <vPortSetupTimerInterrupt+0x34>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073d6:	4b0b      	ldr	r3, [pc, #44]	; (8007404 <vPortSetupTimerInterrupt+0x38>)
 80073d8:	2200      	movs	r2, #0
 80073da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073dc:	4b0a      	ldr	r3, [pc, #40]	; (8007408 <vPortSetupTimerInterrupt+0x3c>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a0a      	ldr	r2, [pc, #40]	; (800740c <vPortSetupTimerInterrupt+0x40>)
 80073e2:	fba2 2303 	umull	r2, r3, r2, r3
 80073e6:	099b      	lsrs	r3, r3, #6
 80073e8:	4a09      	ldr	r2, [pc, #36]	; (8007410 <vPortSetupTimerInterrupt+0x44>)
 80073ea:	3b01      	subs	r3, #1
 80073ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80073ee:	4b04      	ldr	r3, [pc, #16]	; (8007400 <vPortSetupTimerInterrupt+0x34>)
 80073f0:	2207      	movs	r2, #7
 80073f2:	601a      	str	r2, [r3, #0]
}
 80073f4:	bf00      	nop
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	e000e010 	.word	0xe000e010
 8007404:	e000e018 	.word	0xe000e018
 8007408:	20000000 	.word	0x20000000
 800740c:	10624dd3 	.word	0x10624dd3
 8007410:	e000e014 	.word	0xe000e014

08007414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007424 <vPortEnableVFP+0x10>
 8007418:	6801      	ldr	r1, [r0, #0]
 800741a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800741e:	6001      	str	r1, [r0, #0]
 8007420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007422:	bf00      	nop
 8007424:	e000ed88 	.word	0xe000ed88

08007428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800742e:	f3ef 8305 	mrs	r3, IPSR
 8007432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2b0f      	cmp	r3, #15
 8007438:	d914      	bls.n	8007464 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800743a:	4a17      	ldr	r2, [pc, #92]	; (8007498 <vPortValidateInterruptPriority+0x70>)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4413      	add	r3, r2
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007444:	4b15      	ldr	r3, [pc, #84]	; (800749c <vPortValidateInterruptPriority+0x74>)
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	7afa      	ldrb	r2, [r7, #11]
 800744a:	429a      	cmp	r2, r3
 800744c:	d20a      	bcs.n	8007464 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800744e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	607b      	str	r3, [r7, #4]
}
 8007460:	bf00      	nop
 8007462:	e7fe      	b.n	8007462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007464:	4b0e      	ldr	r3, [pc, #56]	; (80074a0 <vPortValidateInterruptPriority+0x78>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800746c:	4b0d      	ldr	r3, [pc, #52]	; (80074a4 <vPortValidateInterruptPriority+0x7c>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	429a      	cmp	r2, r3
 8007472:	d90a      	bls.n	800748a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	603b      	str	r3, [r7, #0]
}
 8007486:	bf00      	nop
 8007488:	e7fe      	b.n	8007488 <vPortValidateInterruptPriority+0x60>
	}
 800748a:	bf00      	nop
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	e000e3f0 	.word	0xe000e3f0
 800749c:	20001054 	.word	0x20001054
 80074a0:	e000ed0c 	.word	0xe000ed0c
 80074a4:	20001058 	.word	0x20001058

080074a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b08a      	sub	sp, #40	; 0x28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80074b0:	2300      	movs	r3, #0
 80074b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80074b4:	f7fe fd92 	bl	8005fdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80074b8:	4b5b      	ldr	r3, [pc, #364]	; (8007628 <pvPortMalloc+0x180>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80074c0:	f000 f920 	bl	8007704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074c4:	4b59      	ldr	r3, [pc, #356]	; (800762c <pvPortMalloc+0x184>)
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4013      	ands	r3, r2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f040 8093 	bne.w	80075f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d01d      	beq.n	8007514 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80074d8:	2208      	movs	r2, #8
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4413      	add	r3, r2
 80074de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f003 0307 	and.w	r3, r3, #7
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d014      	beq.n	8007514 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f023 0307 	bic.w	r3, r3, #7
 80074f0:	3308      	adds	r3, #8
 80074f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f003 0307 	and.w	r3, r3, #7
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00a      	beq.n	8007514 <pvPortMalloc+0x6c>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	617b      	str	r3, [r7, #20]
}
 8007510:	bf00      	nop
 8007512:	e7fe      	b.n	8007512 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d06e      	beq.n	80075f8 <pvPortMalloc+0x150>
 800751a:	4b45      	ldr	r3, [pc, #276]	; (8007630 <pvPortMalloc+0x188>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	429a      	cmp	r2, r3
 8007522:	d869      	bhi.n	80075f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007524:	4b43      	ldr	r3, [pc, #268]	; (8007634 <pvPortMalloc+0x18c>)
 8007526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007528:	4b42      	ldr	r3, [pc, #264]	; (8007634 <pvPortMalloc+0x18c>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800752e:	e004      	b.n	800753a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	429a      	cmp	r2, r3
 8007542:	d903      	bls.n	800754c <pvPortMalloc+0xa4>
 8007544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1f1      	bne.n	8007530 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800754c:	4b36      	ldr	r3, [pc, #216]	; (8007628 <pvPortMalloc+0x180>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007552:	429a      	cmp	r2, r3
 8007554:	d050      	beq.n	80075f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2208      	movs	r2, #8
 800755c:	4413      	add	r3, r2
 800755e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	1ad2      	subs	r2, r2, r3
 8007570:	2308      	movs	r3, #8
 8007572:	005b      	lsls	r3, r3, #1
 8007574:	429a      	cmp	r2, r3
 8007576:	d91f      	bls.n	80075b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4413      	add	r3, r2
 800757e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	f003 0307 	and.w	r3, r3, #7
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00a      	beq.n	80075a0 <pvPortMalloc+0xf8>
	__asm volatile
 800758a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758e:	f383 8811 	msr	BASEPRI, r3
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	613b      	str	r3, [r7, #16]
}
 800759c:	bf00      	nop
 800759e:	e7fe      	b.n	800759e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	685a      	ldr	r2, [r3, #4]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	1ad2      	subs	r2, r2, r3
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80075ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075b2:	69b8      	ldr	r0, [r7, #24]
 80075b4:	f000 f908 	bl	80077c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075b8:	4b1d      	ldr	r3, [pc, #116]	; (8007630 <pvPortMalloc+0x188>)
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	4a1b      	ldr	r2, [pc, #108]	; (8007630 <pvPortMalloc+0x188>)
 80075c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075c6:	4b1a      	ldr	r3, [pc, #104]	; (8007630 <pvPortMalloc+0x188>)
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	4b1b      	ldr	r3, [pc, #108]	; (8007638 <pvPortMalloc+0x190>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d203      	bcs.n	80075da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075d2:	4b17      	ldr	r3, [pc, #92]	; (8007630 <pvPortMalloc+0x188>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a18      	ldr	r2, [pc, #96]	; (8007638 <pvPortMalloc+0x190>)
 80075d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	4b13      	ldr	r3, [pc, #76]	; (800762c <pvPortMalloc+0x184>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	431a      	orrs	r2, r3
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80075e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ea:	2200      	movs	r2, #0
 80075ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80075ee:	4b13      	ldr	r3, [pc, #76]	; (800763c <pvPortMalloc+0x194>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	3301      	adds	r3, #1
 80075f4:	4a11      	ldr	r2, [pc, #68]	; (800763c <pvPortMalloc+0x194>)
 80075f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80075f8:	f7fe fcfe 	bl	8005ff8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	f003 0307 	and.w	r3, r3, #7
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <pvPortMalloc+0x174>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	60fb      	str	r3, [r7, #12]
}
 8007618:	bf00      	nop
 800761a:	e7fe      	b.n	800761a <pvPortMalloc+0x172>
	return pvReturn;
 800761c:	69fb      	ldr	r3, [r7, #28]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3728      	adds	r7, #40	; 0x28
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	20004c64 	.word	0x20004c64
 800762c:	20004c78 	.word	0x20004c78
 8007630:	20004c68 	.word	0x20004c68
 8007634:	20004c5c 	.word	0x20004c5c
 8007638:	20004c6c 	.word	0x20004c6c
 800763c:	20004c70 	.word	0x20004c70

08007640 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d04d      	beq.n	80076ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007652:	2308      	movs	r3, #8
 8007654:	425b      	negs	r3, r3
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	4413      	add	r3, r2
 800765a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	4b24      	ldr	r3, [pc, #144]	; (80076f8 <vPortFree+0xb8>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4013      	ands	r3, r2
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10a      	bne.n	8007684 <vPortFree+0x44>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	60fb      	str	r3, [r7, #12]
}
 8007680:	bf00      	nop
 8007682:	e7fe      	b.n	8007682 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00a      	beq.n	80076a2 <vPortFree+0x62>
	__asm volatile
 800768c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007690:	f383 8811 	msr	BASEPRI, r3
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	60bb      	str	r3, [r7, #8]
}
 800769e:	bf00      	nop
 80076a0:	e7fe      	b.n	80076a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	685a      	ldr	r2, [r3, #4]
 80076a6:	4b14      	ldr	r3, [pc, #80]	; (80076f8 <vPortFree+0xb8>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4013      	ands	r3, r2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d01e      	beq.n	80076ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d11a      	bne.n	80076ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	4b0e      	ldr	r3, [pc, #56]	; (80076f8 <vPortFree+0xb8>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	43db      	mvns	r3, r3
 80076c2:	401a      	ands	r2, r3
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80076c8:	f7fe fc88 	bl	8005fdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	4b0a      	ldr	r3, [pc, #40]	; (80076fc <vPortFree+0xbc>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4413      	add	r3, r2
 80076d6:	4a09      	ldr	r2, [pc, #36]	; (80076fc <vPortFree+0xbc>)
 80076d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076da:	6938      	ldr	r0, [r7, #16]
 80076dc:	f000 f874 	bl	80077c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80076e0:	4b07      	ldr	r3, [pc, #28]	; (8007700 <vPortFree+0xc0>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	3301      	adds	r3, #1
 80076e6:	4a06      	ldr	r2, [pc, #24]	; (8007700 <vPortFree+0xc0>)
 80076e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80076ea:	f7fe fc85 	bl	8005ff8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80076ee:	bf00      	nop
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	20004c78 	.word	0x20004c78
 80076fc:	20004c68 	.word	0x20004c68
 8007700:	20004c74 	.word	0x20004c74

08007704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800770a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800770e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007710:	4b27      	ldr	r3, [pc, #156]	; (80077b0 <prvHeapInit+0xac>)
 8007712:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f003 0307 	and.w	r3, r3, #7
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00c      	beq.n	8007738 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3307      	adds	r3, #7
 8007722:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f023 0307 	bic.w	r3, r3, #7
 800772a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	4a1f      	ldr	r2, [pc, #124]	; (80077b0 <prvHeapInit+0xac>)
 8007734:	4413      	add	r3, r2
 8007736:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800773c:	4a1d      	ldr	r2, [pc, #116]	; (80077b4 <prvHeapInit+0xb0>)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007742:	4b1c      	ldr	r3, [pc, #112]	; (80077b4 <prvHeapInit+0xb0>)
 8007744:	2200      	movs	r2, #0
 8007746:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	4413      	add	r3, r2
 800774e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007750:	2208      	movs	r2, #8
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	1a9b      	subs	r3, r3, r2
 8007756:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f023 0307 	bic.w	r3, r3, #7
 800775e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4a15      	ldr	r2, [pc, #84]	; (80077b8 <prvHeapInit+0xb4>)
 8007764:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007766:	4b14      	ldr	r3, [pc, #80]	; (80077b8 <prvHeapInit+0xb4>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2200      	movs	r2, #0
 800776c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800776e:	4b12      	ldr	r3, [pc, #72]	; (80077b8 <prvHeapInit+0xb4>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2200      	movs	r2, #0
 8007774:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	1ad2      	subs	r2, r2, r3
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007784:	4b0c      	ldr	r3, [pc, #48]	; (80077b8 <prvHeapInit+0xb4>)
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	4a0a      	ldr	r2, [pc, #40]	; (80077bc <prvHeapInit+0xb8>)
 8007792:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	4a09      	ldr	r2, [pc, #36]	; (80077c0 <prvHeapInit+0xbc>)
 800779a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800779c:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <prvHeapInit+0xc0>)
 800779e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80077a2:	601a      	str	r2, [r3, #0]
}
 80077a4:	bf00      	nop
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	2000105c 	.word	0x2000105c
 80077b4:	20004c5c 	.word	0x20004c5c
 80077b8:	20004c64 	.word	0x20004c64
 80077bc:	20004c6c 	.word	0x20004c6c
 80077c0:	20004c68 	.word	0x20004c68
 80077c4:	20004c78 	.word	0x20004c78

080077c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077d0:	4b28      	ldr	r3, [pc, #160]	; (8007874 <prvInsertBlockIntoFreeList+0xac>)
 80077d2:	60fb      	str	r3, [r7, #12]
 80077d4:	e002      	b.n	80077dc <prvInsertBlockIntoFreeList+0x14>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d8f7      	bhi.n	80077d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	4413      	add	r3, r2
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d108      	bne.n	800780a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	441a      	add	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	441a      	add	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	429a      	cmp	r2, r3
 800781c:	d118      	bne.n	8007850 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	4b15      	ldr	r3, [pc, #84]	; (8007878 <prvInsertBlockIntoFreeList+0xb0>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	429a      	cmp	r2, r3
 8007828:	d00d      	beq.n	8007846 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	441a      	add	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	e008      	b.n	8007858 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007846:	4b0c      	ldr	r3, [pc, #48]	; (8007878 <prvInsertBlockIntoFreeList+0xb0>)
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	e003      	b.n	8007858 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	429a      	cmp	r2, r3
 800785e:	d002      	beq.n	8007866 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007866:	bf00      	nop
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	20004c5c 	.word	0x20004c5c
 8007878:	20004c64 	.word	0x20004c64

0800787c <__libc_init_array>:
 800787c:	b570      	push	{r4, r5, r6, lr}
 800787e:	4d0d      	ldr	r5, [pc, #52]	; (80078b4 <__libc_init_array+0x38>)
 8007880:	4c0d      	ldr	r4, [pc, #52]	; (80078b8 <__libc_init_array+0x3c>)
 8007882:	1b64      	subs	r4, r4, r5
 8007884:	10a4      	asrs	r4, r4, #2
 8007886:	2600      	movs	r6, #0
 8007888:	42a6      	cmp	r6, r4
 800788a:	d109      	bne.n	80078a0 <__libc_init_array+0x24>
 800788c:	4d0b      	ldr	r5, [pc, #44]	; (80078bc <__libc_init_array+0x40>)
 800788e:	4c0c      	ldr	r4, [pc, #48]	; (80078c0 <__libc_init_array+0x44>)
 8007890:	f000 f8f2 	bl	8007a78 <_init>
 8007894:	1b64      	subs	r4, r4, r5
 8007896:	10a4      	asrs	r4, r4, #2
 8007898:	2600      	movs	r6, #0
 800789a:	42a6      	cmp	r6, r4
 800789c:	d105      	bne.n	80078aa <__libc_init_array+0x2e>
 800789e:	bd70      	pop	{r4, r5, r6, pc}
 80078a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80078a4:	4798      	blx	r3
 80078a6:	3601      	adds	r6, #1
 80078a8:	e7ee      	b.n	8007888 <__libc_init_array+0xc>
 80078aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ae:	4798      	blx	r3
 80078b0:	3601      	adds	r6, #1
 80078b2:	e7f2      	b.n	800789a <__libc_init_array+0x1e>
 80078b4:	08007c5c 	.word	0x08007c5c
 80078b8:	08007c5c 	.word	0x08007c5c
 80078bc:	08007c5c 	.word	0x08007c5c
 80078c0:	08007c60 	.word	0x08007c60

080078c4 <__retarget_lock_acquire_recursive>:
 80078c4:	4770      	bx	lr

080078c6 <__retarget_lock_release_recursive>:
 80078c6:	4770      	bx	lr

080078c8 <memcpy>:
 80078c8:	440a      	add	r2, r1
 80078ca:	4291      	cmp	r1, r2
 80078cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80078d0:	d100      	bne.n	80078d4 <memcpy+0xc>
 80078d2:	4770      	bx	lr
 80078d4:	b510      	push	{r4, lr}
 80078d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078de:	4291      	cmp	r1, r2
 80078e0:	d1f9      	bne.n	80078d6 <memcpy+0xe>
 80078e2:	bd10      	pop	{r4, pc}

080078e4 <memset>:
 80078e4:	4402      	add	r2, r0
 80078e6:	4603      	mov	r3, r0
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d100      	bne.n	80078ee <memset+0xa>
 80078ec:	4770      	bx	lr
 80078ee:	f803 1b01 	strb.w	r1, [r3], #1
 80078f2:	e7f9      	b.n	80078e8 <memset+0x4>

080078f4 <cleanup_glue>:
 80078f4:	b538      	push	{r3, r4, r5, lr}
 80078f6:	460c      	mov	r4, r1
 80078f8:	6809      	ldr	r1, [r1, #0]
 80078fa:	4605      	mov	r5, r0
 80078fc:	b109      	cbz	r1, 8007902 <cleanup_glue+0xe>
 80078fe:	f7ff fff9 	bl	80078f4 <cleanup_glue>
 8007902:	4621      	mov	r1, r4
 8007904:	4628      	mov	r0, r5
 8007906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800790a:	f000 b869 	b.w	80079e0 <_free_r>
	...

08007910 <_reclaim_reent>:
 8007910:	4b2c      	ldr	r3, [pc, #176]	; (80079c4 <_reclaim_reent+0xb4>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4283      	cmp	r3, r0
 8007916:	b570      	push	{r4, r5, r6, lr}
 8007918:	4604      	mov	r4, r0
 800791a:	d051      	beq.n	80079c0 <_reclaim_reent+0xb0>
 800791c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800791e:	b143      	cbz	r3, 8007932 <_reclaim_reent+0x22>
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d14a      	bne.n	80079bc <_reclaim_reent+0xac>
 8007926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007928:	6819      	ldr	r1, [r3, #0]
 800792a:	b111      	cbz	r1, 8007932 <_reclaim_reent+0x22>
 800792c:	4620      	mov	r0, r4
 800792e:	f000 f857 	bl	80079e0 <_free_r>
 8007932:	6961      	ldr	r1, [r4, #20]
 8007934:	b111      	cbz	r1, 800793c <_reclaim_reent+0x2c>
 8007936:	4620      	mov	r0, r4
 8007938:	f000 f852 	bl	80079e0 <_free_r>
 800793c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800793e:	b111      	cbz	r1, 8007946 <_reclaim_reent+0x36>
 8007940:	4620      	mov	r0, r4
 8007942:	f000 f84d 	bl	80079e0 <_free_r>
 8007946:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007948:	b111      	cbz	r1, 8007950 <_reclaim_reent+0x40>
 800794a:	4620      	mov	r0, r4
 800794c:	f000 f848 	bl	80079e0 <_free_r>
 8007950:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007952:	b111      	cbz	r1, 800795a <_reclaim_reent+0x4a>
 8007954:	4620      	mov	r0, r4
 8007956:	f000 f843 	bl	80079e0 <_free_r>
 800795a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800795c:	b111      	cbz	r1, 8007964 <_reclaim_reent+0x54>
 800795e:	4620      	mov	r0, r4
 8007960:	f000 f83e 	bl	80079e0 <_free_r>
 8007964:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007966:	b111      	cbz	r1, 800796e <_reclaim_reent+0x5e>
 8007968:	4620      	mov	r0, r4
 800796a:	f000 f839 	bl	80079e0 <_free_r>
 800796e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007970:	b111      	cbz	r1, 8007978 <_reclaim_reent+0x68>
 8007972:	4620      	mov	r0, r4
 8007974:	f000 f834 	bl	80079e0 <_free_r>
 8007978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800797a:	b111      	cbz	r1, 8007982 <_reclaim_reent+0x72>
 800797c:	4620      	mov	r0, r4
 800797e:	f000 f82f 	bl	80079e0 <_free_r>
 8007982:	69a3      	ldr	r3, [r4, #24]
 8007984:	b1e3      	cbz	r3, 80079c0 <_reclaim_reent+0xb0>
 8007986:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007988:	4620      	mov	r0, r4
 800798a:	4798      	blx	r3
 800798c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800798e:	b1b9      	cbz	r1, 80079c0 <_reclaim_reent+0xb0>
 8007990:	4620      	mov	r0, r4
 8007992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007996:	f7ff bfad 	b.w	80078f4 <cleanup_glue>
 800799a:	5949      	ldr	r1, [r1, r5]
 800799c:	b941      	cbnz	r1, 80079b0 <_reclaim_reent+0xa0>
 800799e:	3504      	adds	r5, #4
 80079a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079a2:	2d80      	cmp	r5, #128	; 0x80
 80079a4:	68d9      	ldr	r1, [r3, #12]
 80079a6:	d1f8      	bne.n	800799a <_reclaim_reent+0x8a>
 80079a8:	4620      	mov	r0, r4
 80079aa:	f000 f819 	bl	80079e0 <_free_r>
 80079ae:	e7ba      	b.n	8007926 <_reclaim_reent+0x16>
 80079b0:	680e      	ldr	r6, [r1, #0]
 80079b2:	4620      	mov	r0, r4
 80079b4:	f000 f814 	bl	80079e0 <_free_r>
 80079b8:	4631      	mov	r1, r6
 80079ba:	e7ef      	b.n	800799c <_reclaim_reent+0x8c>
 80079bc:	2500      	movs	r5, #0
 80079be:	e7ef      	b.n	80079a0 <_reclaim_reent+0x90>
 80079c0:	bd70      	pop	{r4, r5, r6, pc}
 80079c2:	bf00      	nop
 80079c4:	20000010 	.word	0x20000010

080079c8 <__malloc_lock>:
 80079c8:	4801      	ldr	r0, [pc, #4]	; (80079d0 <__malloc_lock+0x8>)
 80079ca:	f7ff bf7b 	b.w	80078c4 <__retarget_lock_acquire_recursive>
 80079ce:	bf00      	nop
 80079d0:	20004c7c 	.word	0x20004c7c

080079d4 <__malloc_unlock>:
 80079d4:	4801      	ldr	r0, [pc, #4]	; (80079dc <__malloc_unlock+0x8>)
 80079d6:	f7ff bf76 	b.w	80078c6 <__retarget_lock_release_recursive>
 80079da:	bf00      	nop
 80079dc:	20004c7c 	.word	0x20004c7c

080079e0 <_free_r>:
 80079e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079e2:	2900      	cmp	r1, #0
 80079e4:	d044      	beq.n	8007a70 <_free_r+0x90>
 80079e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079ea:	9001      	str	r0, [sp, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f1a1 0404 	sub.w	r4, r1, #4
 80079f2:	bfb8      	it	lt
 80079f4:	18e4      	addlt	r4, r4, r3
 80079f6:	f7ff ffe7 	bl	80079c8 <__malloc_lock>
 80079fa:	4a1e      	ldr	r2, [pc, #120]	; (8007a74 <_free_r+0x94>)
 80079fc:	9801      	ldr	r0, [sp, #4]
 80079fe:	6813      	ldr	r3, [r2, #0]
 8007a00:	b933      	cbnz	r3, 8007a10 <_free_r+0x30>
 8007a02:	6063      	str	r3, [r4, #4]
 8007a04:	6014      	str	r4, [r2, #0]
 8007a06:	b003      	add	sp, #12
 8007a08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a0c:	f7ff bfe2 	b.w	80079d4 <__malloc_unlock>
 8007a10:	42a3      	cmp	r3, r4
 8007a12:	d908      	bls.n	8007a26 <_free_r+0x46>
 8007a14:	6825      	ldr	r5, [r4, #0]
 8007a16:	1961      	adds	r1, r4, r5
 8007a18:	428b      	cmp	r3, r1
 8007a1a:	bf01      	itttt	eq
 8007a1c:	6819      	ldreq	r1, [r3, #0]
 8007a1e:	685b      	ldreq	r3, [r3, #4]
 8007a20:	1949      	addeq	r1, r1, r5
 8007a22:	6021      	streq	r1, [r4, #0]
 8007a24:	e7ed      	b.n	8007a02 <_free_r+0x22>
 8007a26:	461a      	mov	r2, r3
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	b10b      	cbz	r3, 8007a30 <_free_r+0x50>
 8007a2c:	42a3      	cmp	r3, r4
 8007a2e:	d9fa      	bls.n	8007a26 <_free_r+0x46>
 8007a30:	6811      	ldr	r1, [r2, #0]
 8007a32:	1855      	adds	r5, r2, r1
 8007a34:	42a5      	cmp	r5, r4
 8007a36:	d10b      	bne.n	8007a50 <_free_r+0x70>
 8007a38:	6824      	ldr	r4, [r4, #0]
 8007a3a:	4421      	add	r1, r4
 8007a3c:	1854      	adds	r4, r2, r1
 8007a3e:	42a3      	cmp	r3, r4
 8007a40:	6011      	str	r1, [r2, #0]
 8007a42:	d1e0      	bne.n	8007a06 <_free_r+0x26>
 8007a44:	681c      	ldr	r4, [r3, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	6053      	str	r3, [r2, #4]
 8007a4a:	4421      	add	r1, r4
 8007a4c:	6011      	str	r1, [r2, #0]
 8007a4e:	e7da      	b.n	8007a06 <_free_r+0x26>
 8007a50:	d902      	bls.n	8007a58 <_free_r+0x78>
 8007a52:	230c      	movs	r3, #12
 8007a54:	6003      	str	r3, [r0, #0]
 8007a56:	e7d6      	b.n	8007a06 <_free_r+0x26>
 8007a58:	6825      	ldr	r5, [r4, #0]
 8007a5a:	1961      	adds	r1, r4, r5
 8007a5c:	428b      	cmp	r3, r1
 8007a5e:	bf04      	itt	eq
 8007a60:	6819      	ldreq	r1, [r3, #0]
 8007a62:	685b      	ldreq	r3, [r3, #4]
 8007a64:	6063      	str	r3, [r4, #4]
 8007a66:	bf04      	itt	eq
 8007a68:	1949      	addeq	r1, r1, r5
 8007a6a:	6021      	streq	r1, [r4, #0]
 8007a6c:	6054      	str	r4, [r2, #4]
 8007a6e:	e7ca      	b.n	8007a06 <_free_r+0x26>
 8007a70:	b003      	add	sp, #12
 8007a72:	bd30      	pop	{r4, r5, pc}
 8007a74:	20004c80 	.word	0x20004c80

08007a78 <_init>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	bf00      	nop
 8007a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7e:	bc08      	pop	{r3}
 8007a80:	469e      	mov	lr, r3
 8007a82:	4770      	bx	lr

08007a84 <_fini>:
 8007a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a86:	bf00      	nop
 8007a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a8a:	bc08      	pop	{r3}
 8007a8c:	469e      	mov	lr, r3
 8007a8e:	4770      	bx	lr
